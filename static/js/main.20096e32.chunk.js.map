{"version":3,"sources":["state/actions/apiActions.js","state/actions/loadingActions.js","state/actions/polkadotActions.js","state/actions/tableActions.js","state/reducers/loadingReducers.js","state/reducers/polkadotReducers.js","state/reducers/tableReducers.js","state/reducers/index.js","state/reducers/apiReducers.js","state/store.js","components/Header.jsx","components/Loader.jsx","components/Form.jsx","components/Table.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["API_ERROR","GET_API","SET_API","SET_BLOCKCHAIN","GET_BLOCKCHAIN","SET_ENDPOINT","GET_ENDPOINT","getApi","dispatch","type","setApi","payload","endpoint","provider","WsProvider","ApiPromise","create","initializeProvider","then","api","error","getBlockchain","setBlockchain","getEndpoint","setEndpoint","tempFilter","filter","ACTION_TYPES","getPercentLoaded","setPercentLoaded","GET_PERCENT_LOADED","SET_PERCENT_LOADED","SET_CURRENCY","GET_CURRENCY","SET_GENESIS_BLOCK","GET_GENESIS_BLOCK","SET_CURRENT_BLOCK","GET_CURRENT_BLOCK","SET_LAST_BLOCK","GET_LAST_BLOCK","SET_LAST_FINALIZED_BLOCK","GET_LAST_FINALIZED_BLOCK","SET_BLOCK_HASH","GET_BLOCK_HASH","SET_BLOCK_NUMBER","GET_BLOCK_NUMBER","setCurrency","getCurrency","setGenesisBlock","getGenesisBlock","setCurrentBlock","getCurrentBlock","setLastBlock","getLastBlock","setLastFinalizedBlock","getLastFinalizedBlock","setBlockHash","getBlockHash","setBlockNumber","getBlockNumber","ADD_COLUMNS","ADD_ROW","ADD_ROWS","CLEAR_TABLE","SET_COLUMNS","addColumns","setColumns","addRow","addRows","clearTable","setColumnFilter","setRowFilter","loadingActions","percentLoaded","state","action","polkadotActions","block","currency","tableActions","rowId","columns","rows","key","reducers","loadingReducers","tableReducers","polkadotReducers","combinedReducers","combineReducers","apiActions","blockchain","allReducersCombined","apiReducers","loading","polkadot","table","tableReducer","store","initialState","createStore","applyMiddleware","thunk","configureStore","console","log","getState","Title","Typography","AppHeader","props","className","style","Header","Layout","margin","textAlign","Loader","percent","status","this","setState","Component","connect","DataInput","menu","onClick","event","Item","item","icon","RocketTwoTone","BankTwoTone","CompassTwoTone","SettingTwoTone","HeartTwoTone","ThunderboltTwoTone","inputForm","React","createRef","blockDifference","endBlock","lastBlock","startBlock","subscribe","clickListener","bind","subscribeToBlocks","unsubscribeToBlocks","misc","a","buildTableObjects","form","current","parseInt","getFieldValue","getBlockData","percentTicker","i","getHashFromNumber","blockHash","getEventsFromHash","blockEvents","parseEventData","formattedEvents","forEach","index","keys","Object","push","title","toLocaleUpperCase","dataIndex","Math","round","Number","EPSILON","events","eventData","hash","createdAtHash","getBlockHeaderFromHash","blockHeader","getBlockNumberFromHash","blockNumber","getTimeFromHash","eventObject","get","data","meta","method","section","phase","toHuman","readable","args","docs","isEmpty","name","registry","Type","asApplyExtrinsic","words","eventId","author","extraData","class","paysFee","weight","test","isApplyExtrinsic","map","derive","rpc","chain","getBlock","header","subscribeNewHeads","number","getBlockFromHash","time","extrincs","d","toString","join","query","bestNumberFinalized","blockData","getHeader","lastFinalizedBlock","rpcChain","timestamp","didUpdate","now","blockchainTimestamp","parsedBlockchainTimestamp","Date","currentTime","diff1","diff2","diff3","time1","system","at","blockTime","children","toISOString","arguments","clickEvent","formLayout","labelCol","span","wrapperCol","layout","initialValues","ref","orientation","align","flex","justify","Button","overlay","buttonsRender","leftButton","rightButton","cloneElement","CaretDownOutlined","label","tooltip","initialValue","rules","required","message","shouldUpdate","previousValue","newValue","placeholder","guter","DataDisplay","createFilters","column","row","sorter","b","sortDirections","filters","text","value","onFilter","render","populateEventFilter","items","record","populateTable","secondaryColumns","dataSource","expandable","childrenColumnName","expandedRowRender","pagination","expandIcon","expanded","onExpand","AppstoreFilled","e","PlusSquareFilled","expandRowByClick","rowExpandable","spinning","AppFooter","Footer","year","getFullYear","require","Content","App","obj","getChainProperties","systemNumber","raw","lastBlockNumber","lastBlockHash","getFinalizedHead","temp","eventRecords","digest","logs","runtimeMetadata","magicNumber","extrinsics","ex","isSigned","signer","nonce","minHeight","padding","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8+EAGMA,EAAY,YACZC,EAAU,UACVC,EAAU,UACVC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAe,eACfC,EAAe,eASd,SAASC,IACd,OAAO,SAACC,GACNA,EAAS,CACPC,KAAMR,KAKL,SAASS,EAAOC,GACrB,OAAO,SAACH,GACN,OAhBJ,SAA4BI,GAC1B,IAAMC,EAAW,IAAIC,IAAWF,GAChC,OAAOG,IAAWC,OAAO,CAAEH,aAclBI,CAAmBN,GAASO,MACjC,SAACC,GACCX,EAAS,CAAEC,KAAMP,EAASS,QAASQ,OAErC,SAACC,GACCZ,EAAS,CAAEC,KAAMT,EAAWW,QAASS,QAetC,IAAMC,EAAgB,WAC3B,OAAO,SAACb,GACNA,EAAS,CACPC,KAAML,MAKCkB,EAAgB,SAACX,GAC5B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMN,EACNQ,cAKOY,EAAc,WACzB,OAAO,SAACf,GACNA,EAAS,CACPC,KAAMH,MAKCkB,EAAc,SAACb,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMJ,EACNM,cAKOc,EAAa,SAACC,GAAD,MAAa,CACrCjB,KAAM,cACNiB,WAIWC,EAAe,CAC1B3B,YACAC,UACAC,UACAC,iBACAC,iBACAC,eACAC,gBC1FWsB,EAAmB,WAC9B,OAAO,SAACpB,GACNA,EAAS,CACPC,KAPqB,qBAQrBE,oBAKOkB,EAAmB,SAAClB,GAC/B,OAAO,SAACH,GACNA,EAAS,CACPC,KAfqB,qBAgBrBE,cAMOgB,EAAe,CAC1BG,mBAAoB,qBACpBC,mBAAoB,sBCzBhBC,EAAe,eACfC,EAAe,eACfC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAoB,oBACpBhC,EAAe,eACfC,EAAe,eACfgC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAA2B,2BAC3BC,EAA2B,2BAC3BC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAmB,mBACnBC,EAAmB,mBAGZC,EAAc,SAACnC,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMuB,EACNrB,cAKOoC,GAAc,SAACpC,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMwB,EACNtB,cAKOY,GAAc,SAACZ,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMJ,EACNM,cAKOa,GAAc,SAACb,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMH,EACNK,cAKOqC,GAAkB,SAACrC,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMyB,EACNvB,cAKOsC,GAAkB,SAACtC,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM0B,EACNxB,cAKOuC,GAAkB,SAACvC,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM2B,EACNzB,cAKOwC,GAAkB,SAACxC,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM4B,EACN1B,cAKOyC,GAAe,SAACzC,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM6B,EACN3B,cAKO0C,GAAe,SAAC1C,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM8B,EACN5B,cAKO2C,GAAwB,SAAC3C,GACpC,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM+B,EACN7B,cAKO4C,GAAwB,SAAC5C,GACpC,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMgC,EACN9B,cAKO6C,GAAe,SAAC7C,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMiC,EACN/B,cAKO8C,GAAe,SAAC9C,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMkC,EACNhC,cAKO+C,GAAiB,SAAC/C,GAC7B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMmC,EACNjC,cAKOgD,GAAiB,SAAChD,GAC7B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMoC,EACNlC,cAKOc,GAAa,SAACC,GAAD,MAAa,CACrCjB,KAAM,cACNiB,WAIWC,GAAe,CAC1BK,eACAC,eACAC,oBACAC,oBACAC,oBACAC,oBACAhC,eACAC,eACAgC,iBACAC,iBACAC,2BACAC,2BACAC,iBACAC,iBACAC,mBACAC,oBCxLIe,GAAc,aACdC,GAAU,UACVC,GAAW,WACXC,GAAc,cACdC,GAAc,cAmBPC,GAAa,SAACtD,GACzB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMmD,GACNjD,cAKOuD,GAAa,SAACvD,GACzB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMuD,GACNrD,cAKOwD,GAAS,SAACxD,GACrB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMoD,GACNlD,cAKOyD,GAAU,SAACzD,GACtB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMqD,GACNnD,cAKO0D,GAAa,WACxB,OAAO,SAAC7D,GACNA,EAAS,CACPC,KAAMsD,OAMCO,GAAkB,SAAC5C,GAAD,MAAa,CAC1CjB,KAAM,oBACNiB,WAGW6C,GAAe,SAAC7C,GAAD,MAAa,CACvCjB,KAAM,iBACNiB,WAIWC,GAAe,CAC1BiC,eACAC,WACAC,YACAC,eACAC,gBCnFF,GAAmDQ,EAAe7C,aAAtCI,IAA5B,GAAQD,mBAAR,GAA4BC,oBAab,IAAE0C,cAXK,WAA2C,IAA1CC,EAAyC,uDAAjC,CAAED,cAAe,GAAKE,EAAW,uCAC9D,OAAQA,EAAOlE,OACRsB,GACI4C,EAAOhE,QAIP+D,ICPb,GAiBIE,EAAgBjD,aAuDL,IAxEf,GACEK,aADF,GAEEC,aAFF,GAGEC,kBAHF,GAIEC,kBAJF,GAKEC,kBALF,GAMEC,kBANF,GAOEhC,aAPF,GAQEC,aARF,GASEgC,eATF,GAUEC,eAVF,GAWEC,yBAXF,GAYEC,yBAZF,GAaEC,eAbF,GAcEC,eAdF,GAeEC,iBAfF,GAgBEC,iBAwDa,CACbgC,MAtDY,WAAyB,IAAxBH,EAAuB,uDAAf,GAAIC,EAAW,uCA2BhC,OA1BIA,EAAOlE,KA0BJiE,GA4BXI,SAxBe,WAA4B,IAA3BJ,EAA0B,uDAAlB,MAAOC,EAAW,uCAOtC,OANIA,EAAOlE,KAMJiE,GAkBX9D,SAde,WAA4D,IAA3D8D,EAA0D,uDAAlD,CAAE9D,SAAU,yBAA2B+D,EAAW,uCAOtE,OANIA,EAAOlE,KAMJiE,K,SCtEb,GACEK,EAAapD,aADPiC,GAAR,GAAQA,YAAaC,GAArB,GAAqBA,QAASC,GAA9B,GAA8BA,SAAuBE,IAArD,GAAwCD,YAAxC,GAAqDC,aAgBjDgB,GAAQ,EAmBG,IACbC,QAhCc,WAAsC,IAArCP,EAAoC,uDAA5B,CAAEO,QAAS,IAAMN,EAAW,uCAEnD,OAAQA,EAAOlE,MACb,KAAKmD,GACH,MAAM,GAAN,oBAAWc,GAAX,aAAqBC,EAAOhE,UAC9B,KAAKqD,GACH,OAAOW,EAAOhE,QAChB,QACE,OAAO+D,IAyBXQ,KAnBW,WAAmC,IAAlCR,EAAiC,uDAAzB,CAAEQ,KAAM,IAAMP,EAAW,uCAC7C,OAAQA,EAAOlE,MACb,KAAKoD,GACH,IAAMsB,EAAG,YAAQH,IAIjB,OADAL,EAAOhE,QAAQwE,IAAMA,EACf,GAAN,oBAAWT,GAAX,CAAkBC,EAAOhE,UAC3B,KAAKmD,GACH,MAAM,GAAN,oBAAWY,GAAX,CAAkBC,EAAOhE,UAG3B,QACE,OAAO+D,KCnBPU,GAAW,CACfC,kBACAC,gBACAC,oBAOaC,GAJU,WACvBC,YAAgBL,KCnBlB,GAQIM,EAAW/D,aALbzB,IAHF,GACEF,UADF,GAEEC,QAFF,GAGEC,SACAC,GAJF,GAIEA,eAEAE,IANF,GAKED,eALF,GAMEC,cAuCa,IA7Cf,GAOEC,aAsCa,CACba,IApCU,WAAyB,IAAxBuD,EAAuB,uDAAf,GAAIC,EAAW,uCAClC,OAAQA,EAAOlE,OAKRP,GACIyE,EAAOhE,QAEP+D,GA4BXiB,WAxBiB,WAAiD,IAAhDjB,EAA+C,uDAAvC,CAAEiB,WAAY,YAAchB,EAAW,uCACjE,OAAQA,EAAOlE,OAGRN,GACIwE,EAAOhE,QAEP+D,GAkBX9D,SAde,WAA4D,IAA3D8D,EAA0D,uDAAlD,CAAE9D,SAAU,yBAA2B+D,EAAW,uCAC1E,OAAQA,EAAOlE,OAGRJ,GACIsE,EAAOhE,QAEP+D,KCrBPkB,GAAsB,CAC1BzE,IAf0BsE,YAAgBI,IAgB1CC,QAZ8BL,YAAgBJ,IAa9CU,SAT+BN,YAAgBF,IAU/CS,MAN4BP,YAAgBQ,KA6C9C,IAAMC,GAjBC,WAA4C,IAApBC,EAAmB,uDAAJ,GAStCD,GARmBT,YAAgBL,IAQ3BgB,YACZX,YAAgBG,IAChBO,EACAE,YAAgBC,OAElB,OAAOJ,EAGKK,CApCO,CACnBT,QAAS,CAAErB,cAAe,GAC1BsB,SAAU,CACRlB,MAAO,GACPC,SAAU,MAGVlE,SAAU,yBAIZoF,MAAO,CACLf,QAAS,GACTC,KAAM,MAwCVsB,QAAQC,IAAIP,GAAMQ,YAEHR,U,uIC/EPS,GAAUC,KAAVD,MAoBOE,GAlBG,SAACC,GACjB,IAAQC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,MACXC,EAAWC,KAAXD,OACR,OACE,eAACA,EAAD,CAAQF,UAAWA,EAAWC,MAAOA,EAArC,SACE,eAACL,GAAD,CAAOK,MAAO,CAAEG,OAAQ,OAAQC,UAAW,UAA3C,2B,sBCYAC,G,oDACJ,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAKDpC,MAJe,CAClB4C,QAAS,EACTC,OAAQ,UAJO,E,sDAcnB,WAEkB,IADIC,KAAK9C,MAAjB4C,SAENE,KAAKC,SAAS,CAAEF,OAAQ,e,gCAI5B,WACsBC,KAAK9C,MAAjB4C,U,oBAIV,WACE,MAA4BE,KAAK9C,MAAzB4C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OACjB,OACE,gBAAC,KAAD,WACE,oBAAGP,MAAO,CAAEI,UAAW,UAAvB,wBACA,eAAC,KAAD,CAAUE,QAASA,EAASC,OAAQA,U,uCAtB1C,SAAgCT,EAAOpC,GAErC,MAAO,CAAE4C,QADWR,EAAZQ,a,GAXSI,aAsDNC,gBARS,SAACjD,GACvB,MAAO,CACLD,cAAeC,EAAMD,iBAMVkD,CAAyBN,I,6LC7BhCpD,GAAwDc,EAAxDd,WAAYE,GAA4CY,EAA5CZ,OAAQC,GAAoCW,EAApCX,QAASC,GAA2BU,EAA3BV,WAAYH,GAAea,EAAfb,WACzCrC,GAAqB2C,EAArB3C,iBACAiB,GAA8C8B,EAA9C9B,YAA0BE,GAAoB4B,EAApB5B,gBAI5B4E,G,oDACJ,WAAYd,GAAQ,IAAD,wBACjB,cAAMA,IA6URe,KACE,gBAAC,KAAD,CACEC,QAAS,SAACC,KADZ,UAQE,eAAC,KAAKC,KAAN,CAEEF,QAAS,SAACG,GACRzB,QAAQC,IAAIwB,GACZ,EAAKR,SAAS,CACZ9B,WAAY,YACZ/E,SAAU,oCAGdsH,KAAM,eAACC,GAAA,EAAD,IATR,sBACM,KAWN,eAAC,KAAKH,KAAN,CAEEF,QAAS,SAACG,GACRzB,QAAQC,IAAIwB,GACZ,EAAKR,SAAS,CACZ9B,WAAY,sBACZ/E,SAAU,sCAGdsH,KAAM,eAACE,GAAA,EAAD,IATR,gCACM,KAWN,eAAC,KAAKJ,KAAN,CAEEF,QAAS,SAACG,GACRzB,QAAQC,IAAIwB,GACZ,EAAKR,SAAS,CACZ9B,WAAY,WACZ/E,SAAU,gCAGdsH,KAAM,eAACG,GAAA,EAAD,IATR,qBACM,KAWN,eAAC,KAAKL,KAAN,CAEEF,QAAS,SAACG,GACRzB,QAAQC,IAAIwB,GACZ,EAAKR,SAAS,CACZ9B,WAAY,UACZ/E,SAAU,oCAGdsH,KAAM,eAACI,GAAA,EAAD,IATR,oBACM,KAWN,eAAC,KAAKN,KAAN,CAEEF,QAAS,SAACG,GACRzB,QAAQC,IAAIwB,GACZ,EAAKR,SAAS,CACZ9B,WAAY,WACZ/E,SAAU,2BAGdsH,KAAM,eAACK,GAAA,EAAD,IATR,qBACM,KAWN,eAAC,KAAKP,KAAN,CAEEF,QAAS,SAACG,GACRzB,QAAQC,IAAIwB,GACZ,EAAKR,SAAS,CACZ9B,WAAY,SACZ/E,SAAU,kCAGdsH,KAAM,eAACM,GAAA,EAAD,IATR,mBACM,QAlZR,EAAKC,UAAYC,IAAMC,YAFN,OAajB,EAAKjE,MAVe,CAClBvD,IAAK,GACLwE,WAAY,WACZiD,gBAAiB,EACjBC,SAAU,EACVjI,SAAU,wBACVkI,UAAW,EACXC,WAAY,EACZC,WAAW,GAGb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,iBACrB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,iBACzB,EAAKE,oBAAsB,EAAKA,oBAAoBF,KAAzB,iBAG3B,EAAKzC,IAAM,EAAKA,IAAIyC,KAAT,iBACX,EAAKG,KAAO,EAAKA,KAAKH,KAAV,iBApBK,E,sDA2BnB,c,gCAEA,c,uEAEA,WAAuBnB,GAAvB,UAAAuB,EAAA,0F,2HAIA,WAAoBvB,GAApB,UAAAuB,EAAA,0DACkB9B,KAAK9C,MAAbvD,IACAV,KAFV,gCAGuB+G,KAAK+B,oBAH5B,8D,+HAOA,kDAAAD,EAAA,6DACMrE,EAAU,GAERuE,EAAOhC,KAAKiB,UAAUgB,QAE1BC,SAASF,EAAKG,cAAc,cAAgBnC,KAAK9C,MAAM9D,SAEnDmI,EAAaW,SAASF,EAAKG,cAAc,gBAAkB,EAPnE,SAQ+BnC,KAAKoC,aAAab,GARjD,qBASQF,EAAWa,SAASF,EAAKG,cAAc,cAAgB,EAT/D,UAU6BnC,KAAKoC,aAAaf,GAV/C,eAYQgB,EAAgB,KADhBjB,EAAkBC,EAAWE,GAExB,GAbb,KAAAO,EAAA,iBAcWQ,GAdX,wBAAAR,EAAA,sEAe4B,EAAKS,kBAAkBhB,EAAae,GAfhE,cAeUE,EAfV,gBAiB8B,EAAKC,kBAAkBD,GAjBrD,cAiBUE,EAjBV,gBAkBkC,EAAKC,eAAeD,GAlBtD,QAkBUE,EAlBV,QAuBoBC,SAAQ,SAACpC,EAAMqC,GAG7B,EAAKxD,MAAM3C,OAAO8D,MAGdsC,EAAO,GACbC,OAAOD,KAAKH,EAAgB,IAAIC,SAAQ,SAAClF,GACvC,OAAQA,GACN,IAAK,YACL,IAAK,MACH,OACF,QACEoF,EAAKE,KAAK,CACRC,MAAM,GAAD,OAAKvF,EAAIwF,qBACdC,UAAU,GAAD,OAAKzF,GACdA,IAAI,GAAD,OAAKA,SAIhBF,EAAUsF,EAEJ9F,EACJoG,KAAKC,MAA6C,KAAtChB,EAAID,EAAgBkB,OAAOC,UAAkB,IAC3D,EAAKlE,MAAMjF,iBAAiB4C,GA/ChC,2CAcWqF,EAAI,EAdf,aAckBA,GAAKlB,GAdvB,0CAcWkB,GAdX,iBAcwCA,IAdxC,wBAiDEtC,KAAKV,MAAM5C,WAAWe,GAEtBuC,KAAKV,MAAMjF,iBAAiB,GAnD9B,iD,2HAsDA,WAAqBoJ,GAArB,oDAAA3B,EAAA,6DACQ4B,EAAY,GACZC,EAAOF,EAAOG,cAFtB,SAG4B5D,KAAK6D,uBAAuBF,GAHxD,cAGQG,EAHR,gBAI4B9D,KAAK+D,uBAAuBJ,GAJxD,cAIQK,EAJR,iBAK0BhE,KAAKiE,gBAAgBN,GAL/C,eAMQO,EAAc,CAClBF,cACAP,OAAQ,IARZ,eAUqBA,GAVrB,kEAUahD,EAVb,UAWmDA,EAAK0D,IAAI,SAAhDC,EAXZ,EAWYA,KAXZ,EAWkBtB,MAAOuB,EAXzB,EAWyBA,KAAMC,EAX/B,EAW+BA,OAAQC,EAXvC,EAWuCA,QAC3BC,EAAU/D,EAAV+D,MAZZ,EAauBJ,EAAKK,UAb5B,oBAaWC,EAbX,KAcqBN,EAAKC,KACgCA,EAA9CM,KAA8CN,EAAxCO,KAAwCP,EAAlCQ,QAAkCR,EAAzBS,KAAyBT,EAAnBU,SAAmBV,EAATW,KAfjD,eAgBsBR,EAAMS,iBAAiBC,MAhB7C,GAgBWC,EAhBX,eAiByBrB,EAAYsB,OAjBrC,eAkBIlB,EAAYT,OAAOR,KAAK,CAGtBkC,QAAQ,GAAD,OAAKnB,EAAL,YAAoBmB,GAC3B5E,MAAM,GAAD,OAAKgE,EAAL,YAAgBD,GACrBe,UAAW,CAACX,EAASY,MAAOZ,EAASa,QAASb,EAASc,UAvB7D,wJA0BE9B,EAAUT,KAAKiB,GAEFT,EACVvJ,QACC,SAACuL,GACmBA,EAAVjB,MAEFkB,oBAKTC,KAAI,SAACF,GACJ,IAAQlF,EAAUkF,EAAVlF,MACR,MAAM,GAAN,OAAUA,EAAMgE,QAAhB,YAA2BhE,EAAM+D,WAErCtF,QAAQC,IAAIyE,GA1Cd,kBA2CSA,GA3CT,iE,+HA8CA,0CAAA5B,EAAA,6DACUnI,EAAQqG,KAAK9C,MAAbvD,IACAiM,EAAgBjM,EAAhBiM,OAAQC,EAAQlM,EAARkM,IAFlB,SAGsBA,EAAIC,MAAMC,WAHhC,OAGQ1I,EAHR,OAIiBA,EAAMA,MAAM2I,OAC3BJ,EAAOE,MAAMG,mBAAkB,SAACD,GACR,EAAK9I,MAAnBsE,WAENxC,QAAQC,IAAR,uBACkB+G,EAAOE,OADzB,2BACkDF,EAAOZ,YAT/D,gD,yHAeA,WAAmBpB,GAAnB,wBAAAlC,EAAA,6DACkB9B,KAAK9C,MAAbvD,IADV,SAEqBqG,KAAKuC,kBAAkByB,GAF5C,cAEQL,EAFR,gBAG0B3D,KAAKmG,iBAAiBxC,GAHhD,uBAGUtG,EAHV,EAGUA,MAHV,UAIuB2C,KAAKyC,kBAAkBkB,GAJ9C,eAIQF,EAJR,iBAKqBzD,KAAKiE,gBAAgBN,GAL1C,eAKQyC,EALR,cAMqB/I,QANrB,IAMqBA,OANrB,EAMqBA,EAAOgJ,SAN5B,kBAYS,CACLhJ,QACAsG,OACAF,SACA2C,SAhBJ,iD,wFAoBA,WACEpG,KAAKC,SAAS,CAAEuB,WAAW,M,gCAG7B,YAA8B,IAAToD,EAAQ,EAARA,KACnB5F,QAAQC,IAAR,0BAA+B2F,EAAKe,KAAI,SAACW,GAAD,OAAOA,EAAEC,cAAYC,KAAK,U,kFAGpE,iCAAA1E,EAAA,6DACUnI,EAAQqG,KAAK9C,MAAbvD,IACAiM,EAAkBjM,EAAlBiM,OAAkBjM,EAAV8M,MACRX,EAAUF,EAAVE,MAHV,kBAISA,EAAMY,uBAJf,gD,mIAOA,WAA6B/C,GAA7B,sBAAA7B,EAAA,2DACUnI,EAAQqG,KAAK9C,MAAbvD,KACAV,KAFV,uBAGY4M,EAAQlM,EAARkM,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAMC,SAASpC,GAL3C,cAKUgD,EALV,yBAMWzE,SAASyE,EAAUtJ,MAAM2I,OAAOE,OAAOK,aANlD,gCAQS,GART,gD,+HAWA,WAAwBL,GAAxB,sBAAApE,EAAA,2DACUnI,EAAQqG,KAAK9C,MAAbvD,KACAV,KAFV,uBAGY4M,EAAQlM,EAARkM,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAM7J,aAAaiK,GAL/C,cAKU1D,EALV,yBAMWA,GANX,gCAQS,GART,gD,8HAWA,WAAuBmB,GAAvB,sBAAA7B,EAAA,2DACUnI,EAAQqG,KAAK9C,MAAbvD,KACAV,KAFV,uBAGY4M,EAAQlM,EAARkM,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAMC,SAASpC,GAL3C,cAKUgD,EALV,OAMiBA,EAAUtJ,MAAMgJ,SANjC,kBAOWM,GAPX,gCASS,GATT,iD,oIAYA,WAA6BhD,GAA7B,sBAAA7B,EAAA,2DACUnI,EAAQqG,KAAK9C,MAAbvD,KACAV,KAFV,uBAGY4M,EAAQlM,EAARkM,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAMc,UAAUjD,GAL5C,cAKUgD,EALV,yBAMWA,GANX,gCAQS,GART,gD,6HAWA,WAAsBhD,GAAtB,wCAAA7B,EAAA,2DAEiD9B,KAAK9C,MAA5CvD,EAFV,EAEUA,IAFV,EAEe2H,UAFf,EAE0BuF,oBACpBlN,EAAIV,KAHV,wBAIwBU,EAAIiM,OAAOE,MACzBgB,EAAWnN,EAAIkM,IAAIC,MAL7B,SAM4BgB,EAASf,SAASpC,GAN9C,yBAMYtG,MAEF0J,EAAYpN,EAAI8M,MAAMM,UARhC,UAS4BA,EAAUC,YATtC,gCAUsCD,EAAUE,MAVhD,eAUUC,EAVV,sBAYwCA,EAAoBhC,MAZ5D,GAYWiC,EAZX,KAa2B,IAAIC,KAAKD,GAC1BE,EAAc,IAAID,KAClBE,EAAQD,EAAcF,EACtBI,EAAQJ,EAA4BE,EACpCG,EACJH,EACAH,EAAoBhC,MAAM,GAAKgC,EAAoBhC,MAAM,GAErDuC,EAAQ,IAAIL,KAAKE,GACT,IAAIF,KAAKG,GACT,IAAIH,KAAKI,GAvB3B,kBAwBWC,GAxBX,iD,+HA4BA,WAAwB9D,GAAxB,wBAAA7B,EAAA,2DACUnI,EAAQqG,KAAK9C,MAAbvD,KACAV,KAFV,uBAGYwN,EAAU9M,EAAV8M,MACAiB,EAAWjB,EAAXiB,OACAjE,EAAWiE,EAAXjE,OALZ,SAoBwBA,EAAOkE,GAAGhE,GApBlC,cAoBUpD,EApBV,yBAqBWA,GArBX,gCAuBS,IAvBT,iD,+HA0BA,WAAwBkD,GAAxB,oDAAA3B,EAAA,6DACQ6B,EAAOF,EAAOG,cADtB,SAE4B5D,KAAK6D,uBAAuBF,GAFxD,cAEQG,EAFR,gBAG4B9D,KAAK+D,uBAAuBJ,GAHxD,cAGQK,EAHR,gBAI0BhE,KAAKiE,gBAAgBN,GAJ/C,OAIQiE,EAJR,OAKQlE,EAAY,CAChBM,cACA6D,SAAU,GACVd,UAAWa,EAAUE,eARzB,eAUqBrE,GAVrB,kEAUahD,EAVb,UAWmDA,EAAK0D,IAAI,SAAhDC,EAXZ,EAWYA,KAXZ,EAWkBtB,MAAOuB,EAXzB,EAWyBA,KAAMC,EAX/B,EAW+BA,OAAQC,EAXvC,EAWuCA,QAC3BC,EAAU/D,EAAV+D,MAZZ,EAauBJ,EAAKK,UAb5B,yBAcqBL,EAAKC,KACdM,EAA8CN,EAA9CM,KAA8CN,EAAxCO,KAAwCP,EAAlCQ,QAAkCR,EAAzBS,KAAyBT,EAAnBU,SAAmBV,EAATW,KAfjD,eAgBsBR,EAAMS,iBAAiBC,MAhB7C,GAgBWC,EAhBX,eAiByBrB,EAAYsB,OAjBrC,eAkBI1B,EAAUmE,SAAS5E,KAAK,CACtB8E,UAAWpD,EAAKF,UAEhBU,QAAQ,GAAD,OAAKnB,EAAL,YAAoBmB,GAC3B5E,MAAM,GAAD,OAAKgE,EAAL,YAAgBD,KAtB3B,wJA0Beb,EACVvJ,QACC,SAACuL,GACmBA,EAAVjB,MAEFkB,oBAKTC,KAAI,SAACF,GACJ,IAAQlF,EAAUkF,EAAVlF,MACR,MAAM,GAAN,OAAUA,EAAMgE,QAAhB,YAA2BhE,EAAM+D,WAtCvC,kBAwCS,CAACZ,IAxCV,iE,wEA+HA,SAAIsE,GACFhJ,QAAQC,IAAI,UACZD,QAAQC,IAAIe,KAAKV,OACjBN,QAAQC,IAAI,UACZD,QAAQC,IAAIe,KAAK9C,S,kBAGnB,SAAK8K,GACHhJ,QAAQC,IAAI+I,GACZhI,KAAKV,MAAMzC,e,oBAGb,WACE,MACEmD,KAAK9C,MADCiB,EAAR,EAAQA,WAAYkD,EAApB,EAAoBA,SAAUjI,EAA9B,EAA8BA,SAAUkI,EAAxC,EAAwCA,UAAWC,EAAnD,EAAmDA,WAG7C0G,GAHN,EAA+DzG,UAG5C,cAOnB,OACE,gBAAC,KAAD,6BANqB,CACrB0G,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MAIpB,IAEEE,OAAQJ,EACRK,cAAe,CACbD,OAAQJ,GAEVM,IAAKvI,KAAKiB,UANZ,UAQE,eAAC,KAAD,CAASuH,YAAY,OAArB,6BACA,gBAAC,KAAD,CAAKC,MAAM,SAASC,KAAK,OAAOC,QAAQ,SAAxC,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SACE,eAAC,KAASE,OAAV,CACEC,QAAS7I,KAAKK,KACdyI,cAAe,oCAAEC,EAAF,KAAcC,EAAd,WAA+B,CAC5C,eAAC,KAAD,CAAS9F,MAAM,sBAAf,SACG6F,GADsC,cAGzC7H,IAAM+H,aAAaD,EAAa,CAC9BtI,KAAM,eAACwI,GAAA,EAAD,IACN5K,SAAS,MARf,SAWGH,MAGL,eAAC,KAAD,CAAKuK,KAAM,EAAX,SACE,eAAC,KAAKlI,KAAN,CACE2I,MAAM,WACNrE,KAAK,WACLsE,QAAS,eAGTC,aAAcjQ,EAEdkQ,MAAO,CACL,CACEC,UAAU,EACVC,QACE,6EAINC,aAAc,SAACC,EAAeC,GAG5B,OAAID,GAAiBC,GAKvBJ,UAAU,EAxBZ,SAyBE,eAAC,KAAD,WAIN,eAAC,KAAD,CAASf,YAAY,OAArB,oBACA,gBAAC,KAAD,CAAKE,KAAK,OAAOC,QAAQ,SAAzB,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SACE,eAAC,KAAKlI,KAAN,CACE2I,MAAM,cACNrE,KAAK,aACLsE,QAAS,eAGTC,aAAc9H,EAEd+H,MAAO,CACL,CACEC,UAAU,EACVC,QACE,yEAINC,aAAc,SAACC,EAAeC,GAG5B,OAAID,GAAiBC,GAKvBJ,UAAU,EAxBZ,SAyBE,eAAC,KAAD,QAGJ,eAAC,KAAD,CAAKb,KAAM,EAAX,SACE,eAAC,KAAKlI,KAAN,CACE2I,MAAM,YACNrE,KAAK,WACLsE,QAAS,eAKTE,MAAO,CACL,CACEC,UAAU,EACVC,QACE,0EAINC,aAAc,SAACC,EAAeC,GAG5B,OAAID,GAAiBC,GAKvBJ,UAAU,EAxBZ,SAyBE,eAAC,KAAD,CAAOK,YAAcvI,EAAsBC,EAAXD,WAItC,eAAC,KAAD,CAASmH,YAAY,OAArB,qBACA,gBAAC,KAAD,CAAKE,KAAK,OAAOmB,MAAO,GAAIlB,QAAQ,SAApC,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SAGE,eAAC,KAAD,CACEnJ,UAAU,cACVtG,KAAK,UACLqH,QAASN,KAAKyB,cACdpE,OAAO,EAJT,oBAQF,eAAC,KAAD,CAAKqL,KAAM,EAAX,SACE,eAAC,KAAD,CACEzP,KAAK,UACLqH,QAASN,KAAK2B,kBACdtE,OAAO,EAHT,yBAOF,eAAC,KAAD,CAAKqL,KAAM,EAAX,SACE,eAAC,KAAD,CACEzP,KAAK,UACLqH,QAASN,KAAK4B,oBACduG,KAAM,EACN9K,OAAO,EAJT,8BASJ,eAAC,KAAD,CAASmL,YAAY,OAArB,+BACA,gBAAC,KAAD,CAAKE,KAAK,OAAOmB,MAAO,GAAIlB,QAAQ,SAApC,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SACE,eAAC,KAAD,CAAQzP,KAAK,UAAUqH,QAASN,KAAKf,IAAKkJ,KAAM,EAAG9K,OAAO,EAA1D,mBAIF,eAAC,KAAD,CAAKqL,KAAM,EAAX,SACE,eAAC,KAAD,CAAQzP,KAAK,UAAUqH,QAASN,KAAK6B,KAAMsG,KAAM,EAAG9K,OAAO,EAA3D,8B,uCA9jBV,SAAgCiC,EAAOpC,GACrC,OAAOoC,M,GAzBaY,aAspBTC,gBA9CS,SAACjD,GACvB,MAA4BA,EAAMvD,IAA1BA,EAAR,EAAQA,IAER,GAFA,EAAawE,WACajB,EAAMoB,QAAxBrB,cAC8BC,EAAMqB,UAC5C,GADA,EAAQlB,MAAR,EAAeC,SAAf,EAAyBlE,SACC8D,EAAMsB,OAChC,MAAO,CAAE7E,MAAK8D,QADd,EAAQA,QACeC,KADvB,EAAiBA,SAKQ,SAAC1E,GAO1B,MAAO,CACLyD,WAAY,SAAC2H,GACXpL,EAASyD,GAAW2H,KAEtBzH,OAAQ,SAACyH,GACPpL,EAAS2D,GAAOyH,KAElBxH,QAAS,SAACwH,GACRpL,EAAS4D,GAAQwH,KAEnBvH,WAAY,WACV7D,EAAS6D,OAEXH,WAAY,SAAC0H,GACXpL,EAAS0D,GAAW0H,KAEtB9I,YAAa,SAAC8I,GACZpL,EAASsC,GAAY8I,KAEvB5I,gBAAiB,SAAC4I,GAChBpL,EAASwC,GAAgB4I,KAE3B/J,iBAAkB,SAAC+J,GACjBpL,EAASqB,GAAiB+J,QAOjBjE,CAA6CC,I,iCCzqBtD0J,G,oDACJ,WAAYxK,GAAQ,IAAD,wBACjB,cAAMA,IA8BRyK,cAAgB,SAACtM,GACf,IAAQC,EAAS,EAAKR,MAAdQ,KAGRD,EAAQkI,KAAI,SAACqE,GAAW,qBAKJtM,GALI,IAKtB,2BAAwB,CAAC,IAAduM,EAAa,QAMtB,OAAQD,EAAOrM,KACb,IAAK,cACHqM,EAAOE,OAAS,SAACpI,EAAGqI,GAElB,OAAOrI,GAETkI,EAAOI,eAAiB,CAAC,SAAU,WACrC,IAAK,QAiBH,IAAMlQ,EAAM,UAAM+P,EAAI1J,OACtByJ,EAAOK,QAAU,CACf,CACEC,KAAMpQ,EACNqQ,MAAOrQ,IAGX8P,EAAOQ,SAAW,WAEhBxL,QAAQC,IAAIwB,OAEhB,QACEuJ,EAAOS,OAAS,SAAC9F,GACf,OAAOA,GAIb,OAAOqF,GApDa,mCAnCP,EA4FnBU,oBAAsB,SAACC,GACrBA,EAAM9H,SAAQ,SAACpC,GACG,UAAZA,EAAK9C,MACP8C,EAAK4J,QAAU,CACb,CACEC,KAAK,0BACLC,MAAO,4BAGX9J,EAAK+J,SAAW,SAACD,EAAOK,GAEtB,OADwBA,EAAOrK,OAASgK,QAtG7B,OAQjB,EAAKrN,MANe,CAClBO,QAAS,GACTa,SAAS,EACTrB,cAAe,EACfS,KAAM,IAIR,EAAKmN,cAAgB,EAAKA,cAAcnJ,KAAnB,iBACrB,EAAKqI,cAAgB,EAAKA,cAAcrI,KAAnB,iBACrB,EAAKgJ,oBAAsB,EAAKA,oBAAoBhJ,KAAzB,iBAZV,E,sDAmBnB,c,gCAEA,WACE,MAAmC1B,KAAK9C,MAAxC,EAAQoB,QAAR,EAAiBrB,gB,2BAuFnB,WACE,MAAyC+C,KAAK9C,MAAtCoB,EAAR,EAAQA,QAAwBZ,GAAhC,EAAiBT,cAAjB,EAAgCS,MAc1BoN,EAAmB,CACvB,CACE5H,MAAO,WACPE,UAAW,UACXzF,IAAK,WAEP,CACEuF,MAAO,QACPE,UAAW,QACXzF,IAAK,SAEP,CACEuF,MAAO,aACPE,UAAW,YACXzF,IAAK,YACL8M,OAAQ,SAACH,EAAMM,EAAQ9H,GACrB,IAAMsB,EAAOwG,EAAOvF,UAAUM,KAAI,SAAClF,GACjC,OAAO,8BAAKA,OAEd,OAAO,8BAAK2D,OAKlB,OADApE,KAAK0K,oBAAoBI,GAEvB,eAAC,KAAD,CACErN,QArCgB,CAClB,CACEyF,MAAO,eACPE,UAAW,cACXzF,IAAK,cACLuM,OAAQ,SAACpI,EAAGqI,GACV,OAAOrI,EAAEkC,YAAcmG,EAAEnG,aAE3BoG,eAAgB,CAAC,SAAU,aA8B3BW,WAAYrN,EACZsN,WAAY,CACVC,mBAAoB,WACpBC,kBAAmB,SAACN,EAAQ9H,GAC1B,OACE,eAAC,KAAD,CAEErF,QAASqN,EACTC,WAAYH,EAAOnH,OACnB0H,YAAY,GAHPrI,IAOXsI,WAAY,YAAqC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAUV,EAAa,EAAbA,OACjC,OAAIS,EACK,eAACE,GAAA,EAAD,CAAgBjL,QAAS,SAACkL,GAAD,OAAOF,EAASV,EAAQY,MAEnD,eAACC,GAAA,EAAD,CAAkBnL,QAAS,SAACkL,GAAD,OAAOF,EAASV,EAAQY,OAE5DE,kBAAkB,EAClBC,cAAe,SAACf,GACd,QAAIA,EAAOnH,SAMfnF,QAAS,CAAEsN,SAAUtN,GACrB6M,YACE,EAIFjI,MAAO,WACL,MAAO,uB,oBAMf,WAME,OADclD,KAAK6K,mB,uCA1KrB,SAAgCvL,EAAOpC,GAErC,MAAO,CAAEO,QADyC6B,EAA1C7B,QACUa,QADgCgB,EAAjChB,QACUrB,cADuBqC,EAAxBrC,cACgBS,KADQ4B,EAAT5B,U,GA5BnBwC,aAyOXC,gBAvBS,SAACjD,GACvB,IAAQoB,EAA6BpB,EAA7BoB,QAAmBE,GAAUtB,EAApBqB,SAAoBrB,EAAVsB,OACnBvB,EAAkBqB,EAAlBrB,cACR,MAAO,CACLQ,QAASe,EAAMf,QACfa,QAASrB,EAAgB,EACzBA,cAAeA,EACfS,KAAMc,EAAMd,QAgBDyC,CAAyB2J,IClPzB+B,GApBG,SAACvM,GACjB,IAAQE,EAAUF,EAAVE,MACAsM,EAAWpM,KAAXoM,OACFC,GAAO,IAAI3E,MAAO4E,cACxB,OACE,gBAACF,EAAD,CAAQtM,MAAOA,EAAf,2CAC8BuM,EAD9B,4BCWIhT,IAFQkT,EAAQ,KAEgB/N,EAAhCnF,QAAQG,GAAwBgF,EAAxBhF,OAAQa,GAAgBmE,EAAhBnE,YAGhBmS,GAAYxM,KAAZwM,QAIFC,G,oDACJ,WAAY7M,GAAQ,IAAD,uBACjB,cAAMA,GACN,IAAQ3F,EAA0C2F,EAA1C3F,IAAKP,EAAqCkG,EAArClG,SAAUkF,EAA2BgB,EAA3BhB,QAASrB,EAAkBqC,EAAlBrC,cAFf,OAGjB,EAAKC,MAAQ,CAAEvD,MAAKP,WAAUkF,UAASrB,iBAHtB,E,sDAQnB,WACe+C,KAAKV,MAAMpG,OAAO,yBAA/B,IACQS,EAAQqG,KAAK9C,MAAbvD,IACR,GAAIA,EAAIV,KAAM,CACMU,EAAV8M,MACAiB,OACR1H,KAAKC,SAAS,CACZ3B,SAAS,EACTrB,cAAe,O,gCAarB,c,4DAMA,WAAYmP,GAAZ,oCAAAtK,EAAA,6DACUnI,EAAQqG,KAAK9C,MAAbvD,IACuBA,EAAvBiM,OAAuBjM,EAAf8M,MAAOZ,EAAQlM,EAARkM,IAFzB,SAIgClM,EAAIoL,SAASsH,qBAJ7C,8BAM6B1S,EAAI8M,MAAMiB,OAAOxB,SAN9C,cAMQoG,EANR,iBAOoBzG,EAAI6B,OAAO5B,MAAMyG,MAPrC,qCAQ4BD,EAAapH,MARzC,GAQSsH,EART,eAS8BxM,KAAKuC,kBAAkBiK,GATrD,eASQC,EATR,iBAWuB5G,EAAIC,MAAMc,YAXjC,gCAaqBf,EAAIC,MAAM4G,mBAb/B,gCAcqB7G,EAAIC,MAAMC,SAAS0G,GAdxC,eAcQE,EAdR,iBAe4BA,EAAKtP,MAAM2I,OAfvC,eAeQlC,EAfR,iBAkB6B9D,KAAKyC,kBAAkBkK,EAAKtP,MAAM2I,OAAOrC,MAlBtE,eAkBQiJ,EAlBR,iBAmBuB5M,KAAK2C,eAAeiK,GAnB3C,eAmBQnJ,EAnBR,iBAqBuBK,EAAY+I,OArBnC,eAqBQA,EArBR,iBAsBqBA,EAAOC,KAtB5B,gCAuB4BnT,EAAIoT,gBAAgBC,YAvBhD,gCAyBQL,EAAKtP,MAAM4P,WAAWpK,SAAQ,SAACqK,EAAIpK,GAIvC,IACEqK,EAGED,EAHFC,SADF,GAIID,EAFF7I,KAEE6I,EADF5I,QAAUK,EAHZ,EAGYA,KAAML,EAHlB,EAGkBA,OAAQC,EAH1B,EAG0BA,QAM1BvF,QAAQC,IAAR,UAAesF,EAAf,YAA0BD,EAA1B,cAAsCb,GAAU,cAMhDzE,QAAQC,IAAR,qBACgBsF,EADhB,YAC2BD,EAD3B,YACqCK,EAChCgB,KAAI,SAAC7D,GAAD,OAAOA,EAAEyE,cACbC,KAAK,MAHV,MAOI2G,GACFnO,QAAQC,IAAR,iBACYiO,EAAGE,OAAO7G,WADtB,mBAC2C2G,EAAGG,MAAM9G,gBArD1D,iD,2EA2DA,WACE,MAAmCvG,KAAK9C,MAAhCoB,EAAR,EAAQA,QAASrB,EAAjB,EAAiBA,cACjB,OACE,eAAC,KAAD,CAAQuC,MAAO,CAAE8N,UAAW,SAA5B,SACE,gBAAC,KAAD,CAAQ/N,UAAU,cAAlB,UACE,eAAC,GAAD,CAAWA,UAAU,2BACrB,eAAC2M,GAAD,CAAS1M,MAAO,CAAEG,OAAQ,UAA1B,SACGrB,EACC,eAAC,GAAD,CAAQwB,QAAS7C,EAAe8C,OAAO,WAEvC,uBACER,UAAU,yBACVC,MAAO,CAAE+N,QAAS,GAAID,UAAW,KAFnC,UAGE,eAAC,GAAD,IACA,eAAC,GAAD,SAIN,eAAC,GAAD,CAAW9N,MAAO,CAAEI,UAAW,qB,GAjHvBM,aAqKHC,gBAlCS,SAACjD,GAAW,IAAD,EACjC,EAA4BA,EAAMvD,IAA1BA,EAAR,EAAQA,IAAKwE,EAAb,EAAaA,WACLlB,EAAkBC,EAAMoB,QAAxBrB,cACR,EAAsCC,EAAMqB,SAApClB,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUlE,EAAzB,EAAyBA,SACzB,EAA0B8D,EAAMsB,MAChC,OAAO,EAAP,CACE7E,MACAwE,aACAd,QACAC,WACAlE,WACAkF,QAASrB,EAAgB,EACzBQ,QARF,EAAQA,QASNC,KATF,EAAiBA,MACjB,0BASEtE,GATF,+BAUE6D,GAVF,KAeyB,SAACjE,GAC1B,MAAO,CACLD,OAAQ,WACNC,EAASD,OAEXG,OAAQ,SAACkL,GACPpL,EAASE,GAAOkL,KAElBrK,YAAa,WACXf,EAASe,UAKAoG,CAA6CgM,ICtLxCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASpD,OACP,eAAC,IAAMqD,WAAP,UACE,eAAC,IAAD,CAAUpP,MAAOA,GAAjB,SACE,eAAC,GAAD,QAGJqP,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzU,MAAK,SAAC0U,GAClCA,EAAaC,iB","file":"static/js/main.20096e32.chunk.js","sourcesContent":["import { ApiPromise, WsProvider } from '@polkadot/api';\n\n// Action Types\nconst API_ERROR = 'API_ERROR';\nconst GET_API = 'GET_API';\nconst SET_API = 'SET_API';\nconst SET_BLOCKCHAIN = 'SET_BLOCKCHAIN';\nconst GET_BLOCKCHAIN = 'GET_BLOCKCHAIN';\nconst SET_ENDPOINT = 'SET_ENDPOINT';\nconst GET_ENDPOINT = 'GET_ENDPOINT';\n\n// Action Utilities\nfunction initializeProvider(endpoint) {\n  const provider = new WsProvider(endpoint);\n  return ApiPromise.create({ provider });\n}\n\n// Action Creators\nexport function getApi() {\n  return (dispatch) => {\n    dispatch({\n      type: GET_API,\n    });\n  };\n}\n\nexport function setApi(payload) {\n  return (dispatch) => {\n    return initializeProvider(payload).then(\n      (api) => {\n        dispatch({ type: SET_API, payload: api });\n      },\n      (error) => {\n        dispatch({ type: API_ERROR, payload: error });\n      },\n    );\n  };\n}\n\n// export const setApi = (payload) => {\n//   return (dispatch) => {\n//     dispatch({\n//       type: SET_API,\n//       payload,\n//     });\n//   };\n// };\n\nexport const getBlockchain = () => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_BLOCKCHAIN,\n    });\n  };\n};\n\nexport const setBlockchain = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_BLOCKCHAIN,\n      payload,\n    });\n  };\n};\n\nexport const getEndpoint = () => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_ENDPOINT,\n    });\n  };\n};\n\nexport const setEndpoint = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_ENDPOINT,\n      payload,\n    });\n  };\n};\n\nexport const tempFilter = (filter) => ({\n  type: 'TEMP_FILTER',\n  filter,\n});\n\n// Action Constants\nexport const ACTION_TYPES = {\n  API_ERROR,\n  GET_API,\n  SET_API,\n  SET_BLOCKCHAIN,\n  GET_BLOCKCHAIN,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n};\n","// Action Types\nconst GET_PERCENT_LOADED = 'GET_PERCENT_LOADED';\nconst SET_PERCENT_LOADED = 'SET_PERCENT_LOADED';\n\n// Action Creators\nexport const getPercentLoaded = () => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_PERCENT_LOADED,\n      payload,\n    });\n  };\n};\n\nexport const setPercentLoaded = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_PERCENT_LOADED,\n      payload,\n    });\n  };\n};\n\n// Action Constants\nexport const ACTION_TYPES = {\n  GET_PERCENT_LOADED: 'GET_PERCENT_LOADED',\n  SET_PERCENT_LOADED: 'SET_PERCENT_LOADED',\n};\n","// Action Types\nconst SET_CURRENCY = 'SET_CURRENCY';\nconst GET_CURRENCY = 'GET_CURRENCY';\nconst SET_GENESIS_BLOCK = 'SET_GENESIS_BLOCK';\nconst GET_GENESIS_BLOCK = 'GET_GENESIS_BLOCK';\nconst SET_CURRENT_BLOCK = 'SET_CURRENT_BLOCK';\nconst GET_CURRENT_BLOCK = 'GET_CURRENT_BLOCK';\nconst SET_ENDPOINT = 'SET_ENDPOINT';\nconst GET_ENDPOINT = 'GET_ENDPOINT';\nconst SET_LAST_BLOCK = 'SET_LAST_BLOCK';\nconst GET_LAST_BLOCK = 'GET_LAST_BLOCK';\nconst SET_LAST_FINALIZED_BLOCK = 'SET_LAST_FINALIZED_BLOCK';\nconst GET_LAST_FINALIZED_BLOCK = 'GET_LAST_FINALIZED_BLOCK';\nconst SET_BLOCK_HASH = 'SET_BLOCK_HASH';\nconst GET_BLOCK_HASH = 'GET_BLOCK_HASH';\nconst SET_BLOCK_NUMBER = 'SET_BLOCK_NUMBER';\nconst GET_BLOCK_NUMBER = 'GET_BLOCK_NUMBER';\n\n// Action Creators\nexport const setCurrency = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_CURRENCY,\n      payload,\n    });\n  };\n};\n\nexport const getCurrency = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_CURRENCY,\n      payload,\n    });\n  };\n};\n\nexport const getEndpoint = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_ENDPOINT,\n      payload,\n    });\n  };\n};\n\nexport const setEndpoint = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_ENDPOINT,\n      payload,\n    });\n  };\n};\n\nexport const setGenesisBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_GENESIS_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getGenesisBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_GENESIS_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setCurrentBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_CURRENT_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getCurrentBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_CURRENT_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setLastBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_LAST_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getLastBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_LAST_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setLastFinalizedBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_LAST_FINALIZED_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getLastFinalizedBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_LAST_FINALIZED_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setBlockHash = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_BLOCK_HASH,\n      payload,\n    });\n  };\n};\n\nexport const getBlockHash = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_BLOCK_HASH,\n      payload,\n    });\n  };\n};\n\nexport const setBlockNumber = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_BLOCK_NUMBER,\n      payload,\n    });\n  };\n};\n\nexport const getBlockNumber = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_BLOCK_NUMBER,\n      payload,\n    });\n  };\n};\n\nexport const tempFilter = (filter) => ({\n  type: 'TEMP_FILTER',\n  filter,\n});\n\n// Action Constants\nexport const ACTION_TYPES = {\n  SET_CURRENCY,\n  GET_CURRENCY,\n  SET_GENESIS_BLOCK,\n  GET_GENESIS_BLOCK,\n  SET_CURRENT_BLOCK,\n  GET_CURRENT_BLOCK,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n  SET_LAST_BLOCK,\n  GET_LAST_BLOCK,\n  SET_LAST_FINALIZED_BLOCK,\n  GET_LAST_FINALIZED_BLOCK,\n  SET_BLOCK_HASH,\n  GET_BLOCK_HASH,\n  SET_BLOCK_NUMBER,\n  GET_BLOCK_NUMBER,\n};\n","// Action Types\nconst ADD_COLUMNS = 'ADD_COLUMN';\nconst ADD_ROW = 'ADD_ROW';\nconst ADD_ROWS = 'ADD_ROWS';\nconst CLEAR_TABLE = 'CLEAR_TABLE';\nconst SET_COLUMNS = 'SET_COLUMNS';\n\n// Action Creators\n// export const addColumn = (payload) => {\n//   return {\n//     type: ADD_COLUMN,\n//     payload,\n//   };\n// };\n\n// export const addRow = (payload) => {\n//   console.log(payload);\n//   return {\n//     type: ADD_ROW,\n//     payload,\n//   };\n// };\n\n// // These are functions that will create and then dispatch an action.\nexport const addColumns = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_COLUMNS,\n      payload,\n    });\n  };\n};\n\nexport const setColumns = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_COLUMNS,\n      payload,\n    });\n  };\n};\n\nexport const addRow = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_ROW,\n      payload,\n    });\n  };\n};\n\nexport const addRows = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_ROWS,\n      payload,\n    });\n  };\n};\n\nexport const clearTable = () => {\n  return (dispatch) => {\n    dispatch({\n      type: CLEAR_TABLE,\n    });\n  };\n};\n\n// Action Filters\nexport const setColumnFilter = (filter) => ({\n  type: 'SET_COLUMN_FILTER',\n  filter,\n});\n\nexport const setRowFilter = (filter) => ({\n  type: 'SET_ROW_FILTER',\n  filter,\n});\n\n// Action Constants\nexport const ACTION_TYPES = {\n  ADD_COLUMNS,\n  ADD_ROW,\n  ADD_ROWS,\n  CLEAR_TABLE,\n  SET_COLUMNS,\n};\n","import { loadingActions } from '../actions';\n\nconst { GET_PERCENT_LOADED, SET_PERCENT_LOADED } = loadingActions.ACTION_TYPES;\n\nconst percentLoaded = (state = { percentLoaded: 1 }, action) => {\n  switch (action.type) {\n    case SET_PERCENT_LOADED:\n      return action.payload;\n    case GET_PERCENT_LOADED:\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default { percentLoaded };\n","import { polkadotActions } from '../actions';\n\n// blockchain: 'Polkadot',\n\nconst {\n  SET_CURRENCY,\n  GET_CURRENCY,\n  SET_GENESIS_BLOCK,\n  GET_GENESIS_BLOCK,\n  SET_CURRENT_BLOCK,\n  GET_CURRENT_BLOCK,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n  SET_LAST_BLOCK,\n  GET_LAST_BLOCK,\n  SET_LAST_FINALIZED_BLOCK,\n  GET_LAST_FINALIZED_BLOCK,\n  SET_BLOCK_HASH,\n  GET_BLOCK_HASH,\n  SET_BLOCK_NUMBER,\n  GET_BLOCK_NUMBER,\n} = polkadotActions.ACTION_TYPES;\n\nconst block = (state = {}, action) => {\n  switch (action.type) {\n    case SET_GENESIS_BLOCK:\n      return state;\n    case GET_GENESIS_BLOCK:\n      return state;\n    case SET_CURRENT_BLOCK:\n      return state;\n    case GET_CURRENT_BLOCK:\n      return state;\n    case SET_BLOCK_HASH:\n      return state;\n    case GET_BLOCK_HASH:\n      return state;\n    case SET_LAST_BLOCK:\n      return state;\n    case GET_LAST_BLOCK:\n      return state;\n    case SET_LAST_FINALIZED_BLOCK:\n      return state;\n    case GET_LAST_FINALIZED_BLOCK:\n      return state;\n    case SET_BLOCK_NUMBER:\n      return state;\n    case GET_BLOCK_NUMBER:\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst currency = (state = 'DOT', action) => {\n  switch (action.type) {\n    case SET_CURRENCY:\n      return state;\n    case GET_CURRENCY:\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst endpoint = (state = { endpoint: 'wss://rpc.polkadot.io' }, action) => {\n  switch (action.type) {\n    case SET_ENDPOINT:\n      return state;\n    case GET_ENDPOINT:\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default {\n  block,\n  currency,\n  endpoint,\n};\n","import { tableActions } from '../actions';\n\nconst { ADD_COLUMNS, ADD_ROW, ADD_ROWS, CLEAR_TABLE, SET_COLUMNS } =\n  tableActions.ACTION_TYPES;\n\n// Reducers are just functions that return a state. These functions are passed 2 arguments: + initial state & + the action associated with this payload\nconst columns = (state = { columns: [] }, action) => {\n  // We read the action and then return the appropriate state. (THIS IS WHERE WE MODIFY STATE)\n  switch (action.type) {\n    case ADD_COLUMNS:\n      return [...state, ...action.payload];\n    case SET_COLUMNS:\n      return action.payload;\n    default:\n      return state; // We typically just return the original state if none of the action types match.\n  }\n};\n\nlet rowId = 0;\n\nconst rows = (state = { rows: [] }, action) => {\n  switch (action.type) {\n    case ADD_ROW:\n      const key = `${++rowId}`;\n      // console.log(`key = ${key}`);\n      // console.log(action.payload);\n      action.payload.key = key;\n      return [...state, action.payload];\n    case ADD_ROWS:\n      return [...state, action.payload];\n    case CLEAR_TABLE:\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default {\n  columns,\n  rows,\n};\n","import { combineReducers } from 'redux';\n\n// import * as apiReducers from './apiReducers';\n// import * as formReducers from './formReducers';\nimport * as loadingReducers from './loadingReducers';\nimport * as polkadotReducers from './polkadotReducers';\nimport * as tableReducers from './tableReducers';\n\n// import loadingReducers from './loadingReducers';\n// import polkadotReducers from './polkadotReducers';\n// import tableReducers from './tableReducers';\n\n// https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers\n\nconst reducers = {\n  loadingReducers,\n  tableReducers,\n  polkadotReducers,\n};\n\nconst combinedReducers = () => {\n  combineReducers(reducers);\n};\n\nexport default combinedReducers;\n","import { apiActions } from '../actions';\n\nconst {\n  API_ERROR,\n  GET_API,\n  SET_API,\n  SET_BLOCKCHAIN,\n  GET_BLOCKCHAIN,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n} = apiActions.ACTION_TYPES;\n\nconst api = (state = {}, action) => {\n  switch (action.type) {\n    case API_ERROR:\n      return state;\n    case GET_API:\n      return state;\n    case SET_API:\n      return action.payload; // Might want to return pending promise so we can resolve it any time we want to re-access it.\n    default:\n      return state;\n  }\n};\n\nconst blockchain = (state = { blockchain: 'Polkadot' }, action) => {\n  switch (action.type) {\n    case GET_BLOCKCHAIN:\n      return state;\n    case SET_BLOCKCHAIN:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst endpoint = (state = { endpoint: 'wss://rpc.polkadot.io' }, action) => {\n  switch (action.type) {\n    case GET_ENDPOINT:\n      return state;\n    case SET_ENDPOINT:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default {\n  api,\n  blockchain,\n  endpoint,\n};\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from './reducers';\n// import { apiReducers, loadingReducers, polkadotReducers, tableReducers } from './reducers';\n\nimport apiReducers from './reducers/apiReducers';\n// console.log(apiReducers);\nconst combinedApiReducers = combineReducers(apiReducers);\n\nimport loadingReducers from './reducers/loadingReducers';\n// console.log(loadingReducers);\nconst combinedLoadingReducers = combineReducers(loadingReducers);\n\nimport polkadotReducers from './reducers/polkadotReducers';\n// console.log(polkadotReducers);\nconst combinedPolkadotReducers = combineReducers(polkadotReducers);\n\nimport tableReducer from './reducers/tableReducers';\n// console.log(tableReducer);\nconst combinedTableReducers = combineReducers(tableReducer);\n\nconst allReducersCombined = {\n  api: combinedApiReducers,\n  loading: combinedLoadingReducers,\n  polkadot: combinedPolkadotReducers,\n  table: combinedTableReducers,\n};\n\nconst initialState = {\n  loading: { percentLoaded: 0 },\n  polkadot: {\n    block: {},\n    currency: 'DOT',\n    // currentBlock: 0,\n    // endBlock: 0,\n    endpoint: 'wss://rpc.polkadot.io',\n    // lastBlock: 0,\n    // startBlock: 0,\n  },\n  table: {\n    columns: [],\n    rows: [],\n  },\n};\n\n// const combinedReducers = combineReducers(reducers);\n\nexport function configureStore(initialState = {}) {\n  const combinedReducers = combineReducers(reducers);\n  // const store = createStore(reducers, initialState, applyMiddleware(thunk));\n  // const store = createStore(\n  //   combinedReducers,\n  //   initialState,\n  //   applyMiddleware(thunk),\n  // );\n\n  const store = createStore(\n    combineReducers(allReducersCombined),\n    initialState,\n    applyMiddleware(thunk),\n  );\n  return store;\n}\n\nconst store = configureStore(initialState);\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\n// store.subscribe(() => console.log(store.getState()));\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\n// store.dispatch({ type: 'counter/incremented' });\n// // {value: 1}\n// store.dispatch({ type: 'counter/incremented' });\n// // {value: 2}\n// store.dispatch({ type: 'counter/decremented' });\n// {value: 1}\n\nconsole.log(store.getState());\n\nexport default store;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Layout, Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst AppHeader = (props) => {\n  const { className, style } = props;\n  const { Header } = Layout;\n  return (\n    <Header className={className} style={style}>\n      <Title style={{ margin: '1rem', textAlign: 'center' }}>Kevin Scan</Title>\n    </Header>\n  );\n};\n\n// AppHeader.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// AppHeader.defaultProps = {\n//   array: [''],\n// };\n\nexport default AppHeader;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadingActions } from '../state/actions';\nimport {\n  Button,\n  Col,\n  Divider,\n  Dropdown,\n  Form,\n  Input,\n  Layout,\n  Menu,\n  Progress,\n  Row,\n  Space,\n  Table,\n  Tag,\n  Tooltip,\n} from 'antd';\n\nconst { loading, percentLoaded } = loadingActions;\n\nclass Loader extends Component {\n  constructor(props) {\n    super(props);\n    const stateObject = {\n      percent: 0,\n      status: 'active',\n    };\n    this.state = stateObject;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { percent } = props;\n    return { percent };\n  }\n\n  componentDidMount() {\n    const { percent } = this.state;\n    if (percent === 0) {\n      this.setState({ status: 'inactive' });\n    }\n  }\n\n  componentDidUpdate() {\n    const { percent } = this.state;\n    // this.setState({ percent });\n  }\n\n  render() {\n    const { percent, status } = this.state;\n    return (\n      <Row>\n        <p style={{ textAlign: 'center' }}>Loading...</p>\n        <Progress percent={percent} status={status} />\n      </Row>\n    );\n  }\n}\n\n// Loader.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// Loader.defaultProps = {\n//   array: [''],\n// };\n\nconst mapStateToProps = (state) => {\n  return {\n    percentLoaded: state.percentLoaded,\n  };\n};\n\n// export default DataInput;\n\nexport default connect(mapStateToProps)(Loader);\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  tableActions,\n  formActions,\n  loadingActions,\n  polkadotActions,\n} from '../state/actions';\nimport {\n  Button,\n  Col,\n  Divider,\n  Dropdown,\n  Form,\n  Input,\n  Menu,\n  Row,\n  Tooltip,\n} from 'antd';\nimport {\n  AppstoreFilled,\n  CodeFilled,\n  CodepenSquareFilled,\n  InteractionFilled,\n  PlaySquareFilled,\n  PlusSquareFilled,\n  RightSquareFilled,\n  WalletFilled,\n  BorderOuterOutlined,\n  CaretDownOutlined,\n  DashboardOutlined,\n  DownCircleOutlined,\n  DownSquareOutlined,\n  UserOutlined,\n  ApiTwoTone,\n  BankTwoTone,\n  CompassTwoTone,\n  FireTwoTone,\n  FrownTwoTone,\n  HddTwoTone,\n  HeartTwoTone,\n  RocketTwoTone,\n  SaveTwoTone,\n  SettingTwoTone,\n  ThunderboltTwoTone,\n} from '@ant-design/icons';\n\nconst { addColumns, addRow, addRows, clearTable, setColumns } = tableActions;\nconst { setPercentLoaded } = loadingActions;\nconst { setCurrency, setEndpoint, setGenesisBlock } = polkadotActions;\n\nconst DEBUG = false;\n\nclass DataInput extends Component {\n  constructor(props) {\n    super(props);\n    this.inputForm = React.createRef();\n    const stateObject = {\n      api: {},\n      blockchain: 'Polkadot',\n      blockDifference: 0,\n      endBlock: 1,\n      endpoint: 'wss://rpc.polkadot.io',\n      lastBlock: 0,\n      startBlock: 1,\n      subscribe: true,\n    };\n    this.state = stateObject;\n    this.clickListener = this.clickListener.bind(this);\n    this.subscribeToBlocks = this.subscribeToBlocks.bind(this);\n    this.unsubscribeToBlocks = this.unsubscribeToBlocks.bind(this);\n\n    // DEBUGGING FUNCTIONS\n    this.log = this.log.bind(this);\n    this.misc = this.misc.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return props;\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {}\n\n  async dropdownListener(event) {\n    // console.log(event);\n  }\n\n  async clickListener(event) {\n    const { api } = this.state;\n    if (api.type) {\n      const test = await this.buildTableObjects();\n    }\n  }\n\n  async buildTableObjects() {\n    let columns = [];\n\n    const form = this.inputForm.current;\n    const endpoint =\n      parseInt(form.getFieldValue('endpoint')) || this.state.endpoint;\n\n    const startBlock = parseInt(form.getFieldValue('startBlock')) || 0;\n    const startBlockData = await this.getBlockData(startBlock);\n    const endBlock = parseInt(form.getFieldValue('endBlock')) || 0;\n    const endBlockData = await this.getBlockData(endBlock);\n    const blockDifference = endBlock - startBlock;\n    const percentTicker = 100 / blockDifference;\n    let rows = [];\n    for (let i = 0; i <= blockDifference; i++) {\n      const blockHash = await this.getHashFromNumber(startBlock + i);\n\n      const blockEvents = await this.getEventsFromHash(blockHash);\n      const formattedEvents = await this.parseEventData(blockEvents);\n      // rows = [...rows, { block: formattedEvents }];\n      // this.props.addRow({ block: formattedEvents });\n      // this.props.addRow(formattedEvents);\n\n      formattedEvents.forEach((item, index) => {\n        // item.key = `${i + item.blockNumber + index}`;\n        // console.log(`item.key = ${item.key}`);\n        this.props.addRow(item); // TODO: So this is being called more than once per row because 1 block may have multiple children. Maybe we need... yes ANOTHER loop here to handle sub-rows / children?\n      });\n\n      const keys = [];\n      Object.keys(formattedEvents[0]).forEach((key) => {\n        switch (key) {\n          case 'arguments':\n          case 'key':\n            return;\n          default:\n            keys.push({\n              title: `${key.toLocaleUpperCase()}`, // https://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n              dataIndex: `${key}`,\n              key: `${key}`,\n            });\n        }\n      });\n      columns = keys;\n\n      const percentLoaded =\n        Math.round((i * percentTicker + Number.EPSILON) * 100) / 100; // TODO: Figure out why this goes above 100%\n      this.props.setPercentLoaded(percentLoaded);\n    }\n    this.props.setColumns(columns);\n    // this.props.addRows(rows);\n    this.props.setPercentLoaded(0);\n  }\n\n  async parseEventData(events) {\n    const eventData = [];\n    const hash = events.createdAtHash;\n    const blockHeader = await this.getBlockHeaderFromHash(hash);\n    const blockNumber = await this.getBlockNumberFromHash(hash);\n    const blockTime = await this.getTimeFromHash(hash);\n    const eventObject = {\n      blockNumber,\n      events: [],\n    };\n    for (const item of events) {\n      const { data, index, meta, method, section } = item.get('event'); // Missing size\n      const { phase } = item;\n      const [readable] = data.toHuman();\n      const metadata = data.meta;\n      const { args, docs, isEmpty, name, registry, Type } = meta; // Missing size\n      const [eventId] = phase.asApplyExtrinsic.words;\n      const author = await blockHeader.author;\n      eventObject.events.push({\n        // author,\n        // timestamp: blockTime.toISOString(),\n        eventId: `${blockNumber}-${eventId}`,\n        event: `${section}.${method}`,\n        extraData: [readable.class, readable.paysFee, readable.weight],\n      });\n    }\n    eventData.push(eventObject);\n\n    const test = events\n      .filter(\n        (test) => {\n          const { phase } = test;\n          // console.log(phase.asApplyExtrinsic);\n          phase.isApplyExtrinsic;\n          // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq();\n        },\n        // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index), // Need \"index\" from forEach\n      )\n      .map((test) => {\n        const { event } = test;\n        return `${event.section}.${event.method}`;\n      });\n    console.log(eventData);\n    return eventData;\n  }\n\n  async subscribeToBlocks() {\n    const { api } = this.state;\n    const { derive, rpc } = api;\n    const block = await rpc.chain.getBlock();\n    const header = block.block.header;\n    derive.chain.subscribeNewHeads((header) => {\n      const { subscribe } = this.state;\n      if (subscribe) {\n        console.log(\n          `Block Number#${header.number}\\tBlock Author: ${header.author}`,\n        );\n      }\n    });\n  }\n\n  async getBlockData(blockNumber) {\n    const { api } = this.state;\n    const hash = await this.getHashFromNumber(blockNumber);\n    const { block } = await this.getBlockFromHash(hash);\n    const events = await this.getEventsFromHash(hash);\n    const time = await this.getTimeFromHash(hash);\n    const extrinsics = block?.extrincs;\n    // const {\n    //   isSigned,\n    //   meta,\n    //   method: { args, method, section },\n    // } = ex;\n    return {\n      block,\n      hash,\n      events,\n      time,\n    };\n  }\n\n  unsubscribeToBlocks() {\n    this.setState({ subscribe: false });\n  }\n\n  printDocumentation({ docs }) {\n    console.log(`Documentation:\\n${docs.map((d) => d.toString()).join('\\n')}`);\n  }\n\n  async getLastFinalizedBlockNumber() {\n    const { api } = this.state;\n    const { derive, query } = api;\n    const { chain } = derive;\n    return chain.bestNumberFinalized();\n  }\n\n  async getBlockNumberFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      return parseInt(blockData.block.header.number.toString());\n    }\n    return 0;\n  }\n\n  async getHashFromNumber(number) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockHash = await chain.getBlockHash(number);\n      return blockHash;\n    }\n    return 0;\n  }\n\n  async getBlockFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      const test = blockData.block.extrincs;\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getBlockHeaderFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getHeader(hash);\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getTimeFromHash(hash) {\n    let temp;\n    const { api, lastBlock, lastFinalizedBlock } = this.state;\n    if (api.type) {\n      const deriveChain = api.derive.chain;\n      const rpcChain = api.rpc.chain;\n      const { block } = await rpcChain.getBlock(hash);\n      // const block = await api.query.getBlock(hash);\n      const timestamp = api.query.timestamp;\n      const didUpdate = await timestamp.didUpdate();\n      const blockchainTimestamp = await timestamp.now(); // Try subtracting todays date from this date?\n      let timeDifference;\n      const [parsedBlockchainTimestamp] = blockchainTimestamp.words;\n      const blockchainTime = new Date(parsedBlockchainTimestamp);\n      const currentTime = new Date();\n      const diff1 = currentTime - parsedBlockchainTimestamp;\n      const diff2 = parsedBlockchainTimestamp - currentTime;\n      const diff3 =\n        currentTime -\n        blockchainTimestamp.words[0] * blockchainTimestamp.words[1];\n      // TODO: Fix timestamp here.\n      const time1 = new Date(diff1);\n      const time2 = new Date(diff2);\n      const time3 = new Date(diff3);\n      return time1;\n    }\n  }\n\n  async getEventsFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { query } = api;\n      const { system } = query;\n      const { events } = system;\n      // const {\n      //   at,\n      //   creator,\n      //   hash,\n      //   is,\n      //   key,\n      //   meta,\n      //   method,\n      //   multi,\n      //   range,\n      //   size,\n      //   sizeAt,\n      //   toJson,\n      // } = events;\n      const event = await events.at(hash);\n      return event;\n    }\n    return {};\n  }\n\n  async parseEventDataAlt(events) {\n    const hash = events.createdAtHash;\n    const blockHeader = await this.getBlockHeaderFromHash(hash);\n    const blockNumber = await this.getBlockNumberFromHash(hash);\n    const blockTime = await this.getTimeFromHash(hash);\n    const eventData = {\n      blockNumber,\n      children: [],\n      timestamp: blockTime.toISOString(),\n    };\n    for (const item of events) {\n      const { data, index, meta, method, section } = item.get('event'); // Missing size\n      const { phase } = item;\n      const [readable] = data.toHuman();\n      const metadata = data.meta;\n      const { args, docs, isEmpty, name, registry, Type } = meta; // Missing size\n      const [eventId] = phase.asApplyExtrinsic.words;\n      const author = await blockHeader.author;\n      eventData.children.push({\n        arguments: args.toHuman(),\n        // blockAuthor: blockHeader.author,\n        eventId: `${blockNumber}-${eventId}`,\n        event: `${section}.${method}`,\n      });\n    }\n\n    const test = events\n      .filter(\n        (test) => {\n          const { phase } = test;\n          // console.log(phase.asApplyExtrinsic);\n          phase.isApplyExtrinsic;\n          // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq();\n        },\n        // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index), // Need \"index\" from forEach\n      )\n      .map((test) => {\n        const { event } = test;\n        return `${event.section}.${event.method}`;\n      });\n    return [eventData];\n  }\n\n  menu = (\n    <Menu\n      onClick={(event) => {\n        // TODO: Make this items below 1 component with a loop or something?\n        // const {domEvent, key, keyPath} = event;\n        // const {target  } = domEvent;\n        // const { innerText } =target.domEvent;\n        // console.log(innerText);\n      }}>\n      <Menu.Item\n        key=\"1\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Avalanche',\n            endpoint: 'ws://NEED_URL:9650/ext/bc/C/ws',\n          });\n        }}\n        icon={<RocketTwoTone />}>\n        Avalanche\n      </Menu.Item>\n      <Menu.Item\n        key=\"2\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Binance Smart Chain',\n            endpoint: 'wss://bsc-ws-node.nariox.org:443',\n          });\n        }}\n        icon={<BankTwoTone />}>\n        Binance Smart Chain\n      </Menu.Item>\n      <Menu.Item\n        key=\"3\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Ethereum',\n            endpoint: 'wss://mainnet.infura.io/ws',\n          });\n        }}\n        icon={<CompassTwoTone />}>\n        Ethereum\n      </Menu.Item>\n      <Menu.Item\n        key=\"4\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Polygon',\n            endpoint: 'wss://socket.polygon.io/stocks',\n          });\n        }}\n        icon={<SettingTwoTone />}>\n        Polygon\n      </Menu.Item>\n      <Menu.Item\n        key=\"5\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Polkadot',\n            endpoint: 'wss://rpc.polkadot.io',\n          });\n        }}\n        icon={<HeartTwoTone />}>\n        Polkadot\n      </Menu.Item>\n      <Menu.Item\n        key=\"6\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Solana',\n            endpoint: 'wss://api.devnet.solana.com/',\n          });\n        }}\n        icon={<ThunderboltTwoTone />}>\n        Solana\n      </Menu.Item>\n    </Menu>\n  );\n\n  log(clickEvent) {\n    console.log('props:');\n    console.log(this.props);\n    console.log('state:');\n    console.log(this.state);\n  }\n\n  misc(clickEvent) {\n    console.log(clickEvent);\n    this.props.clearTable();\n  }\n\n  render() {\n    const { blockchain, endBlock, endpoint, lastBlock, startBlock, subscribe } =\n      this.state;\n\n    const formLayout = 'horizontal';\n\n    const formItemLayout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 14 },\n    };\n\n    return (\n      <Form\n        {...formItemLayout}\n        layout={formLayout}\n        initialValues={{\n          layout: formLayout,\n        }}\n        ref={this.inputForm}>\n        {/* Error validation on all form fields with relevant error messages. */}\n        <Divider orientation=\"left\">Blockchain Info</Divider>\n        <Row align=\"middle\" flex=\"auto\" justify=\"center\">\n          <Col flex={1}>\n            <Dropdown.Button\n              overlay={this.menu}\n              buttonsRender={([leftButton, rightButton]) => [\n                <Tooltip title=\"Choose a blockchain\" key=\"leftButton\">\n                  {leftButton}\n                </Tooltip>,\n                React.cloneElement(rightButton, {\n                  icon: <CaretDownOutlined />,\n                  loading: false,\n                }),\n              ]}>\n              {blockchain}\n            </Dropdown.Button>\n          </Col>\n          <Col flex={2}>\n            <Form.Item\n              label=\"Endpoint\"\n              name=\"endpoint\"\n              tooltip={'TEST TOOLTIP'}\n              // extra=\"EXTRA\"\n              // help=\"HELP\"\n              initialValue={endpoint}\n              // value=\"Endpoint Value\"\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Please input the endpoint you would lke to request blockchain data from.',\n                },\n              ]}\n              // trigger=\"endpoint\"\n              shouldUpdate={(previousValue, newValue) => {\n                // console.log(previousValue);\n                // console.log(newValue);\n                if (previousValue != newValue) {\n                  return true;\n                }\n                return false;\n              }}\n              required={true}>\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Blocks</Divider>\n        <Row flex=\"auto\" justify=\"center\">\n          <Col flex={1}>\n            <Form.Item\n              label=\"Start Block\"\n              name=\"startBlock\"\n              tooltip={'TEST TOOLTIP'}\n              // extra=\"EXTRA\"\n              // help=\"HELP\"\n              initialValue={startBlock}\n              // value=\"Start Block Value\"\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Input the number of the block you would like to start the search at.',\n                },\n              ]}\n              // trigger=\"startBlock\"\n              shouldUpdate={(previousValue, newValue) => {\n                // console.log(previousValue);\n                // console.log(newValue);\n                if (previousValue != newValue) {\n                  return true;\n                }\n                return false;\n              }}\n              required={true}>\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col flex={1}>\n            <Form.Item\n              label=\"End Block\"\n              name=\"endBlock\"\n              tooltip={'TEST TOOLTIP'}\n              // extra=\"EXTRA\"\n              // help=\"HELP\"\n              // initialValue={}\n              // value=\"End Block Value\"\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Input the number of the block you would like to finish the search at.',\n                },\n              ]}\n              // trigger=\"endBlock\"\n              shouldUpdate={(previousValue, newValue) => {\n                // console.log(previousValue);\n                // console.log(newValue);\n                if (previousValue != newValue) {\n                  return true;\n                }\n                return false;\n              }}\n              required={true}>\n              <Input placeholder={!endBlock ? endBlock : lastBlock} />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Actions</Divider>\n        <Row flex=\"auto\" guter={10} justify=\"center\">\n          <Col flex={2}>\n            {/* <Row gutter={{ xs: 8, sm: 16, md: 25, lg: 32 }}> */}\n            {/* <Form.Item {...buttonItemLayout}> */}\n            <Button\n              className=\"scan_button\"\n              type=\"primary\"\n              onClick={this.clickListener}\n              block={true}>\n              Scan\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button\n              type=\"default\"\n              onClick={this.subscribeToBlocks}\n              block={true}>\n              Subscribe\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button\n              type=\"default\"\n              onClick={this.unsubscribeToBlocks}\n              span={1}\n              block={true}>\n              Unsubscribe\n            </Button>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Debugging Buttons</Divider>\n        <Row flex=\"auto\" guter={10} justify=\"center\">\n          <Col flex={1}>\n            <Button type=\"default\" onClick={this.log} span={1} block={true}>\n              LOG\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button type=\"default\" onClick={this.misc} span={1} block={true}>\n              MISC\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\n// DataInput.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// DataInput.defaultProps = {\n//   array: [''],\n// };\n\nconst mapStateToProps = (state) => {\n  const { api, blockchain } = state.api;\n  const { percentLoaded } = state.loading;\n  const { block, currency, endpoint } = state.polkadot;\n  const { columns, rows } = state.table;\n  return { api, columns, rows };\n};\n\n// These come in as \"props\" to the component.\nconst mapDispatchToProps = (dispatch) => {\n  // Are these actually state because there's multiple & they constantly change?\n  // setCurrentBlock\n  // setLastBlock\n  // setLastFinalizedBlock\n  // setBlockHash\n  // setBlockNumber\n  return {\n    addColumns: (data) => {\n      dispatch(addColumns(data));\n    },\n    addRow: (data) => {\n      dispatch(addRow(data));\n    },\n    addRows: (data) => {\n      dispatch(addRows(data));\n    },\n    clearTable: () => {\n      dispatch(clearTable());\n    },\n    setColumns: (data) => {\n      dispatch(setColumns(data));\n    },\n    setCurrency: (data) => {\n      dispatch(setCurrency(data));\n    },\n    setGenesisBlock: (data) => {\n      dispatch(setGenesisBlock(data));\n    },\n    setPercentLoaded: (data) => {\n      dispatch(setPercentLoaded(data));\n    },\n  };\n};\n\n// export default DataInput;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataInput);\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { tableActions } from '../state/actions';\nimport { Divider, Table } from 'antd';\nimport {\n  AppstoreFilled,\n  CodeFilled,\n  CodepenSquareFilled,\n  InteractionFilled,\n  PlaySquareFilled,\n  PlusSquareFilled,\n  RightSquareFilled,\n  WalletFilled,\n  BorderOuterOutlined,\n  CaretDownOutlined,\n  DashboardOutlined,\n  DownCircleOutlined,\n  DownSquareOutlined,\n  UserOutlined,\n  ApiTwoTone,\n  BankTwoTone,\n  CompassTwoTone,\n  FireTwoTone,\n  FrownTwoTone,\n  HddTwoTone,\n  HeartTwoTone,\n  RocketTwoTone,\n  SaveTwoTone,\n  SettingTwoTone,\n  ThunderboltTwoTone,\n} from '@ant-design/icons';\n\nconst { addColumns, addRows } = tableActions;\n\nclass DataDisplay extends Component {\n  constructor(props) {\n    super(props);\n    const stateObject = {\n      columns: [],\n      loading: false,\n      percentLoaded: 0,\n      rows: [],\n    };\n    this.state = stateObject;\n    // this.table = React.createRef();\n    this.populateTable = this.populateTable.bind(this);\n    this.createFilters = this.createFilters.bind(this);\n    this.populateEventFilter = this.populateEventFilter.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return props;\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    const { loading, percentLoaded } = this.state;\n    const test = percentLoaded > 0 ? true : false;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { columns, loading, percentLoaded, rows } = props;\n    return { columns, loading, percentLoaded, rows };\n  }\n\n  createFilters = (columns) => {\n    const { rows } = this.state;\n    // TODO: Finish the dynamic creation of filters.\n    // let uniqueKeysAndValues = {};\n    columns.map((column) => {\n      // data.forEach.bind(column)((item) => {\n      //   console.log(item);\n      //   fieldValues.add(item);\n      // });\n      for (const row of rows) {\n        // const uniqueValues = new Set(); // Check for value in Set: fieldValues.has('');\n        // Object.entries(row).forEach(([key, value]) => {\n        //   uniqueKeysAndValues.key = uniqueValues.add(value);\n        //   console.log(key);\n        // });\n        switch (column.key) {\n          case 'blockNumber':\n            column.sorter = (a, b) => {\n              // return a.blockNumber - b.blockNumber;\n              return a;\n            };\n            column.sortDirections = ['ascend', 'descend'];\n          case 'event':\n            // column.filters = [\n            //   {\n            //     text: 'TEST',\n            //     value: 'WORKING',\n            //     children: [\n            //       {\n            //         text: 'Green',\n            //         value: 'Green',\n            //       },\n            //       {\n            //         text: 'Black',\n            //         value: 'Black',\n            //       },{}\n            //     ],\n            //   },\n            // ];\n            const filter = `${row.event}`;\n            column.filters = [\n              {\n                text: filter,\n                value: filter,\n              },\n            ];\n            column.onFilter = (...items) => {\n              // record.name.indexOf(value) === 0;\n              console.log(item);\n            };\n          default:\n            column.render = (args) => {\n              return args;\n            };\n            break;\n        }\n        return column;\n      }\n    });\n  };\n\n  populateEventFilter = (items) => {\n    items.forEach((item) => {\n      if (item.key == 'events') {\n        item.filters = [\n          {\n            text: `system.ExtrinsicSuccess`,\n            value: 'system.ExtrinsicSuccess',\n          },\n        ];\n        item.onFilter = (value, record) => {\n          const filterCondition = record.event == value;\n          return filterCondition;\n        };\n      }\n    });\n  };\n\n  populateTable() {\n    const { loading, percentLoaded, rows } = this.state;\n    // TODO: Loop through rows and get unique values\n    // TODO:\n    const mainColumns = [\n      {\n        title: 'BLOCK NUMBER',\n        dataIndex: 'blockNumber',\n        key: 'blockNumber',\n        sorter: (a, b) => {\n          return a.blockNumber - b.blockNumber;\n        },\n        sortDirections: ['ascend', 'descend'],\n      },\n    ];\n    const secondaryColumns = [\n      {\n        title: 'EVENT ID',\n        dataIndex: 'eventId',\n        key: 'eventId',\n      },\n      {\n        title: 'EVENT',\n        dataIndex: 'event',\n        key: 'event',\n      },\n      {\n        title: 'EXTRA DATA',\n        dataIndex: 'extraData',\n        key: 'extraData',\n        render: (text, record, index) => {\n          const data = record.extraData.map((item) => {\n            return <li>{item}</li>;\n          });\n          return <ul>{data}</ul>;\n        },\n      },\n    ];\n    this.populateEventFilter(secondaryColumns);\n    return (\n      <Table\n        columns={mainColumns}\n        dataSource={rows}\n        expandable={{\n          childrenColumnName: 'children',\n          expandedRowRender: (record, index) => {\n            return (\n              <Table\n                key={index}\n                columns={secondaryColumns}\n                dataSource={record.events}\n                pagination={false}\n              />\n            );\n          },\n          expandIcon: ({ expanded, onExpand, record }) => {\n            if (expanded) {\n              return <AppstoreFilled onClick={(e) => onExpand(record, e)} />;\n            }\n            return <PlusSquareFilled onClick={(e) => onExpand(record, e)} />;\n          },\n          expandRowByClick: true,\n          rowExpandable: (record) => {\n            if (record.events) {\n              return true;\n            }\n            return false;\n          },\n        }}\n        loading={{ spinning: loading }}\n        pagination={\n          true /*TODO: Do this dynamically based on the number of items returned. */\n        }\n        // ref={this.table}\n        // scroll={{ x: false, y: false }}\n        title={() => {\n          return 'Blockchain Data';\n        }}\n      />\n    );\n  }\n\n  render() {\n    /*\n    + (*Optional*) Users should be able to sort events on various columns\n    + (*Optional*) Users should be able to filter events by name\n    */\n    const Table = this.populateTable();\n    return Table;\n  }\n}\n\n// DataDisplay.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// DataDisplay.defaultProps = {\n//   array: [''],\n// };\n\nconst mapStateToProps = (state) => {\n  const { loading, polkadot, table } = state;\n  const { percentLoaded } = loading;\n  return {\n    columns: table.columns,\n    loading: percentLoaded > 0 ? true : false,\n    percentLoaded: percentLoaded,\n    rows: table.rows,\n  };\n};\n\n// These come in as \"props\" to the component. (Saving this just incase we can use it for sort / filtering.)\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     addColumns: (data) => {\n//       dispatch(addColumns(data));\n//     },\n//     addRows: (data) => {\n//       dispatch(addRows(data));\n//     },\n//   };\n// };\n\nexport default connect(mapStateToProps)(DataDisplay);\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Layout } from 'antd';\n\nconst DEBUG = false;\n\nconst AppFooter = (props) => {\n  const { style } = props;\n  const { Footer } = Layout;\n  const year = new Date().getFullYear();\n  return (\n    <Footer style={style}>\n      Decentralized Application ©{year} Created by Kevin Loy\n      {/* <p className=\"small-text\">...hire me please :D</p> */}\n    </Footer>\n  );\n};\n\n// AppFooter.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// AppFooter.defaultProps = {\n//   array: [''],\n// };\n\nexport default AppFooter;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  apiActions,\n  tableActions,\n  loadingActions,\n  polkadotActions,\n} from './state/actions';\n\nimport { Layout } from 'antd';\nimport './App.css';\n\nimport AppHeader from './components/Header.jsx';\nimport Loader from './components/Loader.jsx';\nimport DataInput from './components/Form.jsx';\nimport DataDisplay from './components/Table.jsx';\nimport AppFooter from './components/Footer.jsx';\n\nimport DEBUG from './helpers/debug.js';\n\nconst moralis = require('moralis');\n\nconst { getApi, setApi, getEndpoint } = apiActions;\nconst { percentLoaded } = loadingActions;\n\nconst { Content } = Layout;\n\n// Websockets Article - https://blog.logrocket.com/websockets-tutorial-how-to-go-real-time-with-node-and-react-8e4693fbf843/\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const { api, endpoint, loading, percentLoaded } = props;\n    this.state = { api, endpoint, loading, percentLoaded };\n    // this.setState({ api, endpoint, percentLoaded });\n    // this.initializeProvider = this.initializeProvider.bind(this);\n  }\n\n  componentDidMount() {\n    const test = this.props.setApi('wss://rpc.polkadot.io');\n    const { api } = this.state;\n    if (api.type) {\n      const { query } = api;\n      const { system } = query;\n      this.setState({\n        loading: false,\n        percentLoaded: 0,\n      });\n    }\n  }\n\n  // async initializeProvider() {\n  //   const { endpoint } = this.state;\n  //   const provider = new WsProvider(endpoint);\n  //   const api = await ApiPromise.create({ provider });\n  //   this.setState({ percentLoaded: 75 });\n  //   this.props.setApi(endpoint);\n  // }\n\n  componentDidUpdate() {\n    // console.log(\n    //   \"This maybe the trick to setting the API to state. However, it's probably better to just stay as props?\",\n    // );\n  }\n\n  async debug(obj) {\n    const { api } = this.state;\n    const { derive, query, rpc } = api;\n\n    const chainProperties = await api.registry.getChainProperties();\n\n    const systemNumber = await api.query.system.number();\n    const raw = await rpc.system.chain.raw();\n    const [lastBlockNumber] = systemNumber.words;\n    const lastBlockHash = await this.getHashFromNumber(lastBlockNumber);\n\n    const header = await rpc.chain.getHeader();\n\n    const test = await rpc.chain.getFinalizedHead();\n    const temp = await rpc.chain.getBlock(lastBlockHash);\n    const blockHeader = await temp.block.header;\n\n    // // no blockHash is specified, so we retrieve the latest\n    const eventRecords = await this.getEventsFromHash(temp.block.header.hash);\n    const events = await this.parseEventData(eventRecords);\n\n    const digest = await blockHeader.digest;\n    const logs = await digest.logs;\n    const magicNumber = await api.runtimeMetadata.magicNumber;\n\n    await temp.block.extrinsics.forEach((ex, index) => {\n      // ({ method: { method, section } }, index) => {\n      // the extrinsics are decoded by the API, human-like view\n\n      const {\n        isSigned,\n        meta,\n        method: { args, method, section },\n      } = ex;\n\n      // filter the specific events based on the phase and then the\n      // index of our extrinsic in the block\n\n      console.log(`${section}.${method}:: ${events || 'no events'}`);\n      // console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\n\n      // this.printDocumentation(meta);\n\n      // explicit display of name, args & documentation\n      console.log(\n        `Function:\\n${section}.${method}(${args\n          .map((a) => a.toString())\n          .join(', ')})`,\n      );\n\n      // signer/nonce info\n      if (isSigned) {\n        console.log(\n          `signer=${ex.signer.toString()}, nonce=${ex.nonce.toString()}`,\n        );\n      }\n    });\n  }\n\n  render() {\n    const { loading, percentLoaded } = this.state;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Layout className=\"site-layout\">\n          <AppHeader className=\"site-layout-background\" />\n          <Content style={{ margin: '0 1rem' }}>\n            {loading ? (\n              <Loader percent={percentLoaded} status=\"active\" />\n            ) : (\n              <div\n                className=\"site-layout-background\"\n                style={{ padding: 24, minHeight: 360 }}>\n                <DataInput />\n                <DataDisplay />\n              </div>\n            )}\n          </Content>\n          <AppFooter style={{ textAlign: 'center' }} />\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\n// const getColumns = (columns, filter) => {\n//   switch (filter) {\n//     case actions.ColumnFilters.SHOW_ALL:\n//       return column;\n//     case actions.ColumnFilters.SHOW_COMPLETED:\n//       return column.filter((t) => t.completed);\n//     default:\n//       throw new Error('Unknown filter: ' + filter);\n//   }\n// };\n\nconst mapStateToProps = (state) => {\n  const { api, blockchain } = state.api;\n  const { percentLoaded } = state.loading;\n  const { block, currency, endpoint } = state.polkadot;\n  const { columns, rows } = state.table;\n  return {\n    api,\n    blockchain,\n    block,\n    currency,\n    endpoint,\n    loading: percentLoaded > 0 ? true : false,\n    columns,\n    rows,\n    endpoint,\n    percentLoaded,\n  };\n};\n\n// These come in as \"props\" to the component.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getApi: () => {\n      dispatch(getApi());\n    },\n    setApi: (data) => {\n      dispatch(setApi(data));\n    },\n    getEndpoint: () => {\n      dispatch(getEndpoint());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/* eslint-disable no-param-reassign, no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import reportWebVitals from 'reportWebVitals';\n\n// Moralis wrapper = https://docs.moralis.io/moralis-server/tools/react-moralis\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}