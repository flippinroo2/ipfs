{"version":3,"sources":["components/Header.jsx","components/Loader.jsx","components/Form.jsx","components/Table.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Title","Typography","AppHeader","props","className","style","Header","Layout","margin","textAlign","Component","DataInput","menu","onClick","event","Item","item","console","log","setState","blockchain","endpoint","icon","RocketTwoTone","BankTwoTone","CompassTwoTone","SettingTwoTone","HeartTwoTone","ThunderboltTwoTone","inputForm","React","createRef","state","api","blockDifference","endBlock","events","lastBlock","percentLoaded","startBlock","subscribe","transactions","initializeProvider","bind","clickListener","subscribeToBlocks","unsubscribeToBlocks","this","then","a","query","system","getLastFinalizedBlockNumber","lastFinalizedBlock","words","provider","WsProvider","ApiPromise","create","dataLoading","loading","columns","data","type","form","current","parseInt","getFieldValue","getBlockData","percentTicker","i","Math","round","Number","EPSILON","getHashFromNumber","blockHash","getEventsFromHash","blockEvents","parseEventData","formattedEvents","sampleEvent","keys","Object","forEach","key","push","title","toLocaleUpperCase","dataIndex","index","blockNumber","dataLoaded","derive","rpc","chain","getBlock","block","header","subscribeNewHeads","number","author","hash","getBlockFromHash","getTimeFromHash","time","extrincs","docs","map","d","toString","join","bestNumberFinalized","blockData","getBlockHash","getHeader","rpcChain","timestamp","didUpdate","now","blockchainTimestamp","parsedBlockchainTimestamp","Date","currentTime","diff1","diff2","diff3","time1","at","eventData","createdAtHash","getBlockHeaderFromHash","blockHeader","getBlockNumberFromHash","blockTime","eventObject","toISOString","get","meta","method","section","phase","toHuman","args","isEmpty","name","registry","Type","asApplyExtrinsic","eventId","children","arguments","blockAuthor","filter","test","isApplyExtrinsic","formLayout","labelCol","span","wrapperCol","layout","initialValues","ref","orientation","align","flex","justify","Button","overlay","buttonsRender","leftButton","rightButton","cloneElement","CaretDownOutlined","label","tooltip","initialValue","rules","required","message","shouldUpdate","previousValue","newValue","placeholder","guter","DataDisplay","createFilters","column","sorter","b","sortDirections","filters","text","value","onFilter","render","populateEventFilter","items","headerObject","dataSource","expandable","expandIcon","PlusSquareFilled","indicator","spinning","pagination","table","scroll","x","y","AppFooter","Footer","year","getFullYear","Content","require","App","minHeight","padding","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db51bbe4.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Layout, Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst AppHeader = (props) => {\n  const { className, style } = props;\n  const { Header } = Layout;\n  return (\n    <Header className={className} style={style}>\n      <Title style={{ margin: '1rem', textAlign: 'center' }}>Kevin Scan</Title>\n    </Header>\n  );\n};\n\n// AppHeader.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// AppHeader.defaultProps = {\n//   array: [''],\n// };\n\nexport default AppHeader;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Col,\n  Divider,\n  Dropdown,\n  Form,\n  Input,\n  Layout,\n  Menu,\n  Progress,\n  Row,\n  Space,\n  Table,\n  Tag,\n  Tooltip,\n} from 'antd';\n\nclass Loader extends Component {\n  constructor(props) {\n    super(props);\n    const stateObject = {\n      percent: 0,\n      status: 'active',\n    };\n    this.state = stateObject;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { percent } = props;\n    return { percent };\n  }\n\n  componentDidMount() {\n    const { percent } = this.state;\n    if (percent === 0) {\n      this.setState({ status: 'inactive' });\n    }\n  }\n\n  componentDidUpdate() {\n    const { percent } = this.state;\n    // this.setState({ percent });\n  }\n\n  render() {\n    const { percent, status } = this.state;\n    return (\n      <Row>\n        <p style={{ textAlign: 'center' }}>Loading...</p>\n        <Progress percent={percent} status={status} />\n      </Row>\n    );\n  }\n}\n\n// Loader.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// Loader.defaultProps = {\n//   array: [''],\n// };\n\nexport default Loader;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport {\n  Button,\n  Col,\n  Divider,\n  Dropdown,\n  Form,\n  Input,\n  Menu,\n  Row,\n  Tooltip,\n} from 'antd';\nimport {\n  AppstoreFilled,\n  CodeFilled,\n  CodepenSquareFilled,\n  InteractionFilled,\n  PlaySquareFilled,\n  PlusSquareFilled,\n  RightSquareFilled,\n  WalletFilled,\n  BorderOuterOutlined,\n  CaretDownOutlined,\n  DashboardOutlined,\n  DownCircleOutlined,\n  DownSquareOutlined,\n  UserOutlined,\n  ApiTwoTone,\n  BankTwoTone,\n  CompassTwoTone,\n  FireTwoTone,\n  FrownTwoTone,\n  HddTwoTone,\n  HeartTwoTone,\n  RocketTwoTone,\n  SaveTwoTone,\n  SettingTwoTone,\n  ThunderboltTwoTone,\n} from '@ant-design/icons';\n\nconst DEBUG = false;\n\nclass DataInput extends Component {\n  constructor(props) {\n    super(props);\n    this.inputForm = React.createRef();\n    const stateObject = {\n      api: {},\n      blockchain: 'Polkadot',\n      blockDifference: 0,\n      endBlock: 1,\n      endpoint: 'wss://rpc.polkadot.io',\n      events: {},\n      lastBlock: 0,\n      percentLoaded: 0,\n      startBlock: 1,\n      subscribe: true,\n      transactions: [],\n    };\n    this.state = stateObject;\n    this.initializeProvider = this.initializeProvider.bind(this);\n    this.clickListener = this.clickListener.bind(this);\n    this.subscribeToBlocks = this.subscribeToBlocks.bind(this);\n    this.unsubscribeToBlocks = this.unsubscribeToBlocks.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {};\n  }\n\n  componentDidMount() {\n    this.initializeProvider().then(async () => {\n      const { api } = this.state;\n      const { query } = api;\n      const { system } = query;\n      const lastFinalizedBlock = await this.getLastFinalizedBlockNumber();\n      this.setState({\n        lastBlock: lastFinalizedBlock.words[0],\n      });\n    });\n  }\n\n  componentDidUpdate() {}\n\n  async initializeProvider() {\n    const { endpoint } = this.state;\n    const provider = new WsProvider(endpoint);\n    const api = await ApiPromise.create({ provider });\n    this.setState({ api });\n  }\n\n  async dropdownListener(event) {\n    // console.log(event);\n  }\n\n  async clickListener(event) {\n    const { api } = this.state;\n    this.props.dataLoading({ loading: true });\n    let columns = [];\n    const data = [];\n    if (api.type) {\n      let { endBlock, endpoint, startBlock } = this.state;\n\n      const form = this.inputForm.current;\n      startBlock = parseInt(form.getFieldValue('startBlock')) || startBlock;\n      endBlock = parseInt(form.getFieldValue('endBlock')) || endBlock;\n      endpoint = parseInt(form.getFieldValue('endpoint')) || endpoint;\n\n      const blockDifference = endBlock - startBlock;\n\n      const endBlockData = await this.getBlockData(endBlock);\n      const startBlockData = await this.getBlockData(startBlock);\n\n      const percentTicker = 100 / blockDifference;\n\n      for (let i = 0; i <= blockDifference; i++) {\n        const percentLoaded =\n          Math.round((i * percentTicker + Number.EPSILON) * 100) / 100;\n\n        this.props.dataLoading({ loading: true, percentLoaded });\n\n        const blockHash = await this.getHashFromNumber(startBlock + i);\n\n        const blockEvents = await this.getEventsFromHash(blockHash);\n        const formattedEvents = await this.parseEventData(blockEvents);\n        const [sampleEvent] = formattedEvents;\n\n        const keys = [];\n\n        Object.keys(sampleEvent).forEach((key) => {\n          keys.push({\n            title: `${key.toLocaleUpperCase()}`,\n            dataIndex: `${key}`,\n            key: `${key}`,\n          });\n        });\n\n        formattedEvents.forEach((item, index) => {\n          item.key = `${i + item.blockNumber + index}`;\n          data.push(item);\n        });\n\n        columns = keys;\n      }\n    }\n    this.props.dataLoaded(\n      { loading: false, percentLoaded: 0 },\n      { columns, data },\n    );\n  }\n\n  async subscribeToBlocks() {\n    const { api } = this.state;\n    const { derive, rpc } = api;\n    const block = await rpc.chain.getBlock();\n    const header = block.block.header;\n    derive.chain.subscribeNewHeads((header) => {\n      const { subscribe } = this.state;\n      if (subscribe) {\n        console.log(\n          `Block Number#${header.number}\\tBlock Author: ${header.author}`,\n        );\n      }\n    });\n  }\n\n  async getBlockData(blockNumber) {\n    const { api } = this.state;\n    const hash = await this.getHashFromNumber(blockNumber);\n    const { block } = await this.getBlockFromHash(hash);\n    const events = await this.getEventsFromHash(hash);\n    const time = await this.getTimeFromHash(hash);\n    const extrinsics = block?.extrincs;\n    // const {\n    //   isSigned,\n    //   meta,\n    //   method: { args, method, section },\n    // } = ex;\n    return {\n      block,\n      hash,\n      events,\n      time,\n    };\n  }\n\n  unsubscribeToBlocks() {\n    this.setState({ subscribe: false });\n  }\n\n  printDocumentation({ docs }) {\n    console.log(`Documentation:\\n${docs.map((d) => d.toString()).join('\\n')}`);\n  }\n\n  async getLastFinalizedBlockNumber() {\n    const { api } = this.state;\n    const { derive, query } = api;\n    const { chain } = derive;\n    return chain.bestNumberFinalized();\n  }\n\n  async getBlockNumberFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      return parseInt(blockData.block.header.number.toString());\n    }\n    return 0;\n  }\n\n  async getHashFromNumber(number) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockHash = await chain.getBlockHash(number);\n      return blockHash;\n    }\n    return 0;\n  }\n\n  async getBlockFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      const test = blockData.block.extrincs;\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getBlockHeaderFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getHeader(hash);\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getTimeFromHash(hash) {\n    let temp;\n    const { api, lastBlock, lastFinalizedBlock } = this.state;\n    if (api.type) {\n      const deriveChain = api.derive.chain;\n      const rpcChain = api.rpc.chain;\n      const { block } = await rpcChain.getBlock(hash);\n      // const block = await api.query.getBlock(hash);\n      const timestamp = api.query.timestamp;\n      const didUpdate = await timestamp.didUpdate();\n      const blockchainTimestamp = await timestamp.now(); // Try subtracting todays date from this date?\n      let timeDifference;\n      const [parsedBlockchainTimestamp] = blockchainTimestamp.words;\n      const blockchainTime = new Date(parsedBlockchainTimestamp);\n      const currentTime = new Date();\n      const diff1 = currentTime - parsedBlockchainTimestamp;\n      const diff2 = parsedBlockchainTimestamp - currentTime;\n      const diff3 =\n        currentTime -\n        blockchainTimestamp.words[0] * blockchainTimestamp.words[1];\n      // TODO: Fix timestamp here.\n      const time1 = new Date(diff1);\n      const time2 = new Date(diff2);\n      const time3 = new Date(diff3);\n      return time1;\n    }\n  }\n\n  async getEventsFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { query } = api;\n      const { system } = query;\n      const { events } = system;\n      // const {\n      //   at,\n      //   creator,\n      //   hash,\n      //   is,\n      //   key,\n      //   meta,\n      //   method,\n      //   multi,\n      //   range,\n      //   size,\n      //   sizeAt,\n      //   toJson,\n      // } = events;\n      const event = await events.at(hash);\n      return event;\n    }\n    return {};\n  }\n\n  async parseEventData(events) {\n    const eventData = [];\n    const hash = events.createdAtHash;\n    const blockHeader = await this.getBlockHeaderFromHash(hash);\n    const blockNumber = await this.getBlockNumberFromHash(hash);\n    const blockTime = await this.getTimeFromHash(hash);\n    const eventObject = {\n      blockNumber,\n      timestamp: blockTime.toISOString(),\n    };\n    for (const item of events) {\n      const { data, index, meta, method, section } = item.get('event'); // Missing size\n      const { phase } = item;\n      const [readable] = data.toHuman();\n      const metadata = data.meta;\n      const { args, docs, isEmpty, name, registry, Type } = meta; // Missing size\n      const [eventId] = phase.asApplyExtrinsic.words;\n      const author = await blockHeader.author;\n      eventObject.children = [\n        {\n          arguments: args.toHuman(),\n          blockAuthor: blockHeader.author,\n          eventId: `${blockNumber}-${eventId}`,\n          event: `${section}.${method}`,\n        },\n      ];\n      eventData.push(eventObject);\n    }\n\n    const test = events\n      .filter(\n        (test) => {\n          const { phase } = test;\n          // console.log(phase.asApplyExtrinsic);\n          phase.isApplyExtrinsic;\n          // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq();\n        },\n        // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index), // Need \"index\" from forEach\n      )\n      .map((test) => {\n        const { event } = test;\n        return `${event.section}.${event.method}`;\n      });\n    return eventData;\n  }\n\n  // async debug(obj) {\n  //   const { api } = this.state;\n  //   const { derive, query, rpc } = api;\n\n  //   const chainProperties = await api.registry.getChainProperties();\n\n  //   const systemNumber = await api.query.system.number();\n  //   const raw = await rpc.system.chain.raw();\n  //   const [lastBlockNumber] = systemNumber.words;\n  //   const lastBlockHash = await this.getHashFromNumber(lastBlockNumber);\n\n  //   const header = await rpc.chain.getHeader();\n\n  //   const test = await rpc.chain.getFinalizedHead();\n  //   const temp = await rpc.chain.getBlock(lastBlockHash);\n  //   const blockHeader = await temp.block.header;\n\n  //   // // no blockHash is specified, so we retrieve the latest\n  //   const eventRecords = await this.getEventsFromHash(temp.block.header.hash);\n  //   const events = await this.parseEventData(eventRecords);\n\n  //   const digest = await blockHeader.digest;\n  //   const logs = await digest.logs;\n  //   const magicNumber = await api.runtimeMetadata.magicNumber;\n\n  //   await temp.block.extrinsics.forEach((ex, index) => {\n  //     // ({ method: { method, section } }, index) => {\n  //     // the extrinsics are decoded by the API, human-like view\n\n  //     const {\n  //       isSigned,\n  //       meta,\n  //       method: { args, method, section },\n  //     } = ex;\n\n  //     // filter the specific events based on the phase and then the\n  //     // index of our extrinsic in the block\n\n  //     console.log(`${section}.${method}:: ${events || 'no events'}`);\n  //     // console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\n\n  //     // this.printDocumentation(meta);\n\n  //     // explicit display of name, args & documentation\n  //     console.log(\n  //       `Function:\\n${section}.${method}(${args\n  //         .map((a) => a.toString())\n  //         .join(', ')})`,\n  //     );\n\n  //     // signer/nonce info\n  //     if (isSigned) {\n  //       console.log(\n  //         `signer=${ex.signer.toString()}, nonce=${ex.nonce.toString()}`,\n  //       );\n  //     }\n  //   });\n  // }\n\n  menu = (\n    <Menu\n      onClick={(event) => {\n        // TODO: Make this items below 1 component with a loop or something?\n        // const {domEvent, key, keyPath} = event;\n        // const {target  } = domEvent;\n        // const { innerText } =target.domEvent;\n        // console.log(innerText);\n      }}>\n      <Menu.Item\n        key=\"1\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Avalanche',\n            endpoint: 'ws://NEED_URL:9650/ext/bc/C/ws',\n          });\n        }}\n        icon={<RocketTwoTone />}>\n        Avalanche\n      </Menu.Item>\n      <Menu.Item\n        key=\"2\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Binance Smart Chain',\n            endpoint: 'wss://bsc-ws-node.nariox.org:443',\n          });\n        }}\n        icon={<BankTwoTone />}>\n        Binance Smart Chain\n      </Menu.Item>\n      <Menu.Item\n        key=\"3\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Ethereum',\n            endpoint: 'wss://mainnet.infura.io/ws',\n          });\n        }}\n        icon={<CompassTwoTone />}>\n        Ethereum\n      </Menu.Item>\n      <Menu.Item\n        key=\"4\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Polygon',\n            endpoint: 'wss://socket.polygon.io/stocks',\n          });\n        }}\n        icon={<SettingTwoTone />}>\n        Polygon\n      </Menu.Item>\n      <Menu.Item\n        key=\"5\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Polkadot',\n            endpoint: 'wss://rpc.polkadot.io',\n          });\n        }}\n        icon={<HeartTwoTone />}>\n        Polkadot\n      </Menu.Item>\n      <Menu.Item\n        key=\"6\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Solana',\n            endpoint: 'wss://api.devnet.solana.com/',\n          });\n        }}\n        icon={<ThunderboltTwoTone />}>\n        Solana\n      </Menu.Item>\n    </Menu>\n  );\n\n  render() {\n    const { blockchain, endBlock, endpoint, lastBlock, startBlock, subscribe } =\n      this.state;\n\n    const formLayout = 'horizontal';\n\n    const formItemLayout = {\n      labelCol: { span: 4 },\n      wrapperCol: { span: 14 },\n    };\n\n    // const buttonItemLayout = {\n    //   wrapperCol: { span: 14, offset: 4 },\n    // };\n\n    return (\n      <Form\n        {...formItemLayout}\n        layout={formLayout}\n        initialValues={{\n          layout: formLayout,\n        }}\n        ref={this.inputForm}>\n        {/* Error validation on all form fields with relevant error messages. */}\n        <Divider orientation=\"left\">Blockchain Info</Divider>\n        <Row align=\"middle\" flex=\"auto\" justify=\"center\">\n          <Col flex={1}>\n            <Dropdown.Button\n              overlay={this.menu}\n              buttonsRender={([leftButton, rightButton]) => [\n                <Tooltip title=\"Choose a blockchain\" key=\"leftButton\">\n                  {leftButton}\n                </Tooltip>,\n                React.cloneElement(rightButton, {\n                  icon: <CaretDownOutlined />,\n                  loading: false,\n                }),\n              ]}>\n              {blockchain}\n            </Dropdown.Button>\n          </Col>\n          <Col flex={2}>\n            <Form.Item\n              label=\"Endpoint\"\n              name=\"endpoint\"\n              tooltip={'TEST TOOLTIP'}\n              // extra=\"EXTRA\"\n              // help=\"HELP\"\n              initialValue={endpoint}\n              // value=\"Endpoint Value\"\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Please input the endpoint you would lke to request blockchain data from.',\n                },\n              ]}\n              // trigger=\"endpoint\"\n              shouldUpdate={(previousValue, newValue) => {\n                // console.log(previousValue);\n                // console.log(newValue);\n                if (previousValue != newValue) {\n                  return true;\n                }\n                return false;\n              }}\n              required={true}>\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Blocks</Divider>\n        <Row flex=\"auto\" justify=\"center\">\n          <Col flex={1}>\n            <Form.Item\n              label=\"Start Block\"\n              name=\"startBlock\"\n              tooltip={'TEST TOOLTIP'}\n              // extra=\"EXTRA\"\n              // help=\"HELP\"\n              initialValue={startBlock}\n              // value=\"Start Block Value\"\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Input the number of the block you would like to start the search at.',\n                },\n              ]}\n              // trigger=\"startBlock\"\n              shouldUpdate={(previousValue, newValue) => {\n                // console.log(previousValue);\n                // console.log(newValue);\n                if (previousValue != newValue) {\n                  return true;\n                }\n                return false;\n              }}\n              required={true}>\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col flex={1}>\n            <Form.Item\n              label=\"End Block\"\n              name=\"endBlock\"\n              tooltip={'TEST TOOLTIP'}\n              // extra=\"EXTRA\"\n              // help=\"HELP\"\n              // value=\"End Block Value\"\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Input the number of the block you would like to finish the search at.',\n                },\n              ]}\n              // trigger=\"endBlock\"\n              shouldUpdate={(previousValue, newValue) => {\n                // console.log(previousValue);\n                // console.log(newValue);\n                if (previousValue != newValue) {\n                  return true;\n                }\n                return false;\n              }}\n              required={true}>\n              <Input placeholder={!endBlock ? endBlock : lastBlock} />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Actions</Divider>\n        <Row flex=\"auto\" guter={10} justify=\"center\">\n          <Col flex={2}>\n            {/* <Row gutter={{ xs: 8, sm: 16, md: 25, lg: 32 }}> */}\n            {/* <Form.Item {...buttonItemLayout}> */}\n            <Button type=\"primary\" onClick={this.clickListener} block={true}>\n              Scan\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button\n              type=\"default\"\n              onClick={this.subscribeToBlocks}\n              block={true}>\n              Subscribe\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button\n              type=\"default\"\n              onClick={this.unsubscribeToBlocks}\n              span={1}\n              block={true}>\n              Unsubscribe\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\n// DataInput.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// DataInput.defaultProps = {\n//   array: [''],\n// };\n\nexport default DataInput;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Divider, Table } from 'antd';\nimport {\n  AppstoreFilled,\n  CodeFilled,\n  CodepenSquareFilled,\n  InteractionFilled,\n  PlaySquareFilled,\n  PlusSquareFilled,\n  RightSquareFilled,\n  WalletFilled,\n  BorderOuterOutlined,\n  CaretDownOutlined,\n  DashboardOutlined,\n  DownCircleOutlined,\n  DownSquareOutlined,\n  UserOutlined,\n  ApiTwoTone,\n  BankTwoTone,\n  CompassTwoTone,\n  FireTwoTone,\n  FrownTwoTone,\n  HddTwoTone,\n  HeartTwoTone,\n  RocketTwoTone,\n  SaveTwoTone,\n  SettingTwoTone,\n  ThunderboltTwoTone,\n} from '@ant-design/icons';\n\nclass DataDisplay extends Component {\n  constructor(props) {\n    super(props);\n    // this.table = React.createRef();\n    const stateObject = {\n      columns: [],\n      data: [],\n      loading: false,\n    };\n    this.state = stateObject;\n    this.createFilters = this.createFilters.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { columns, data, loading } = props;\n    return { columns, data, loading };\n  }\n\n  componentDidMount() {\n    this.createFilters();\n  }\n\n  createFilters = () => {\n    const { columns, data } = this.state;\n    // TODO: Finish the dynamic creation of filters.\n    // let uniqueKeysAndValues = {};\n    columns.map((column) => {\n      // data.forEach.bind(column)((item) => {\n      //   console.log(item);\n      //   fieldValues.add(item);\n      // });\n      for (const item of data) {\n        // const uniqueValues = new Set(); // Check for value in Set: fieldValues.has('');\n        // Object.entries(item).forEach(([key, value]) => {\n        //   uniqueKeysAndValues.key = uniqueValues.add(value);\n        //   console.log(key);\n        // });\n        switch (column.key) {\n          case 'blockNumber':\n            column.sorter = (a, b) => {\n              console.log('TEST');\n              // return a.blockNumber - b.blockNumber;\n              return 1;\n            };\n            column.sortDirections = ['ascend', 'descend'];\n          case 'event':\n            // column.filters = [\n            //   {\n            //     text: 'TEST',\n            //     value: 'WORKING',\n            //     children: [\n            //       {\n            //         text: 'Green',\n            //         value: 'Green',\n            //       },\n            //       {\n            //         text: 'Black',\n            //         value: 'Black',\n            //       },{}\n            //     ],\n            //   },\n            // ];\n            const filter = `${item.event}`;\n            column.filters = [\n              {\n                text: filter,\n                value: filter,\n              },\n            ];\n            column.onFilter = (...items) => {\n              // record.name.indexOf(value) === 0;\n              console.log(item);\n            };\n          default:\n            column.render = (args) => {\n              return args;\n            };\n            break;\n        }\n        return column;\n      }\n    });\n  };\n\n  populateEventFilter = (items) => {\n    const { text, value, children } = items;\n    const headerObject = { text, value };\n    let filterArray = [];\n    console.log('BREAK');\n    if (children) {\n      children.forEach((item, index) => {\n        const { text, value } = item;\n        headerObject.children = [{ item, value }];\n      });\n    }\n    return [headerObject];\n  };\n\n  render() {\n    const { columns, data, loading } = this.state;\n    /*\n    + (*Optional*) Users should be able to sort events on various columns\n    + (*Optional*) Users should be able to filter events by name\n    */\n    return (\n      <Table\n        columns={columns}\n        dataSource={data}\n        expandable={() => {\n          return { expandIcon: PlusSquareFilled };\n        }}\n        loading={{ indicator: PlusSquareFilled, spinning: loading }}\n        pagination={\n          true /*TODO: Do this dynamically based on the number of items returned. */\n        }\n        ref={this.table}\n        scroll={{ x: false, y: false }}\n        title={() => {\n          return 'Data';\n        }}\n      />\n    );\n  }\n}\n\n// DataDisplay.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// DataDisplay.defaultProps = {\n//   array: [''],\n// };\n\nexport default DataDisplay;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Layout } from 'antd';\n\nconst DEBUG = false;\n\nconst AppFooter = (props) => {\n  const { style } = props;\n  const { Footer } = Layout;\n  const year = new Date().getFullYear();\n  return (\n    <Footer style={style}>\n      Decentralized Application ©{year} Created by Kevin Loy\n      {/* <p className=\"small-text\">...hire me please :D</p> */}\n    </Footer>\n  );\n};\n\n// AppFooter.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// AppFooter.defaultProps = {\n//   array: [''],\n// };\n\nexport default AppFooter;\n","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport AppHeader from './components/Header.jsx';\nimport Loader from './components/Loader.jsx';\nimport DataInput from './components/Form.jsx';\nimport DataDisplay from './components/Table.jsx';\nimport AppFooter from './components/Footer.jsx';\n\nconst DEBUG = false;\n\nconst moralis = require('moralis');\n\nconst { Content } = Layout;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const stateObject = {\n      api: {},\n      events: { columns: [], data: [] },\n      loading: true,\n      percentLoaded: 50,\n    };\n    this.state = stateObject;\n  }\n\n  componentDidMount() {\n    this.setState({ loading: false, percentLoaded: 0 });\n  }\n\n  // Make loading true if percentLoaded is specified. Or unless false is specified?\n  dataLoading = ({ loading, percentLoaded }) => {\n    this.setState({ loading, percentLoaded });\n  };\n\n  dataLoaded = ({ loading, percentLoaded }, events) => {\n    this.setState({ events, loading, percentLoaded });\n  };\n\n  render() {\n    const { events, loading, percentLoaded } = this.state;\n\n    const { columns, data } = events;\n\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Layout className=\"site-layout\">\n          <AppHeader className=\"site-layout-background\" />\n          <Content style={{ margin: '0 1rem' }}>\n            {false ? (\n              <Loader percent={percentLoaded} status=\"active\" />\n            ) : (\n              <div\n                className=\"site-layout-background\"\n                style={{ padding: 24, minHeight: 360 }}>\n                <DataInput\n                  dataLoading={this.dataLoading}\n                  dataLoaded={this.dataLoaded}\n                />\n                <DataDisplay columns={columns} data={data} loading={loading} />\n              </div>\n            )}\n          </Content>\n          <AppFooter style={{ textAlign: 'center' }} />\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable no-param-reassign, no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import reportWebVitals from 'reportWebVitals';\nimport 'antd/dist/antd.css';\n\n// Moralis wrapper = https://docs.moralis.io/moralis-server/tools/react-moralis\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}