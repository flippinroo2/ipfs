{"version":3,"sources":["state/actions/apiActions.js","state/actions/loadingActions.js","state/actions/polkadotActions.js","state/actions/tableActions.js","state/reducers/apiReducers.js","state/reducers/loadingReducers.js","state/reducers/polkadotReducers.js","state/reducers/tableReducers.js","state/reducers/index.js","state/store.js","components/Header.jsx","components/Loader.jsx","components/Form.jsx","components/Table.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["API_ERROR","GET_API","SET_API","SET_BLOCKCHAIN","GET_BLOCKCHAIN","SET_ENDPOINT","GET_ENDPOINT","getApi","dispatch","type","setApi","payload","endpoint","provider","WsProvider","ApiPromise","create","initializeProvider","then","api","error","getBlockchain","setBlockchain","getEndpoint","setEndpoint","tempFilter","filter","ACTION_TYPES","LOADING","getPercentLoaded","setPercentLoaded","setLoading","setLoaded","GET_PERCENT_LOADED","SET_PERCENT_LOADED","SET_CURRENCY","GET_CURRENCY","SET_GENESIS_BLOCK","GET_GENESIS_BLOCK","SET_CURRENT_BLOCK","GET_CURRENT_BLOCK","SET_LAST_BLOCK","GET_LAST_BLOCK","SET_LAST_FINALIZED_BLOCK","GET_LAST_FINALIZED_BLOCK","SET_BLOCK_HASH","GET_BLOCK_HASH","SET_BLOCK_NUMBER","GET_BLOCK_NUMBER","setCurrency","getCurrency","setGenesisBlock","getGenesisBlock","setCurrentBlock","getCurrentBlock","setLastBlock","getLastBlock","setLastFinalizedBlock","getLastFinalizedBlock","setBlockHash","getBlockHash","setBlockNumber","getBlockNumber","ADD_COLUMNS","ADD_ROW","ADD_ROWS","CLEAR_TABLE","SET_COLUMNS","addColumns","setColumns","addRow","addRows","clearTable","setColumnFilter","setRowFilter","apiActions","state","action","blockchain","loadingActions","loading","percentLoaded","polkadotActions","block","endBlock","genesisBlock","lastBlock","lastFinalizedBlock","startBlock","currency","tableActions","rowId","columns","rows","key","reducers","apiReducers","combineReducers","loadingReducers","polkadotReducers","tableReducers","store","initialState","createStore","combinedReducers","applyMiddleware","thunk","configureStore","console","log","getState","Title","Typography","AppHeader","props","className","style","Header","Layout","margin","textAlign","Loader","this","percent","status","Component","connect","DataInput","inputForm","React","createRef","menu","onClick","event","Item","item","setState","icon","RocketTwoTone","BankTwoTone","CompassTwoTone","SettingTwoTone","HeartTwoTone","ThunderboltTwoTone","clickListener","bind","subscribeToBlocks","unsubscribeToBlocks","misc","a","clear","buildTableObjects","form","current","parseInt","getFieldValue","getBlockData","blockDifference","i","getHashFromNumber","blockHash","getEventsFromHash","blockEvents","parseEventData","formattedEvents","forEach","index","keys","Object","push","title","toLocaleUpperCase","dataIndex","events","eventData","hash","createdAtHash","getBlockHeaderFromHash","blockHeader","getBlockNumberFromHash","blockNumber","getTimeFromHash","eventObject","get","data","meta","method","section","phase","toHuman","readable","args","docs","isEmpty","name","registry","Type","asApplyExtrinsic","words","eventId","author","extraData","class","paysFee","weight","test","isApplyExtrinsic","map","derive","rpc","chain","getBlock","header","subscribeNewHeads","subscribe","number","getBlockFromHash","time","extrincs","d","toString","join","query","bestNumberFinalized","blockData","getHeader","rpcChain","timestamp","didUpdate","now","blockchainTimestamp","parsedBlockchainTimestamp","Date","currentTime","diff1","diff2","diff3","time1","system","at","blockTime","children","toISOString","arguments","clickEvent","labelCol","span","wrapperCol","layout","initialValues","ref","scrollToFirstError","colon","orientation","align","flex","justify","Button","overlay","buttonsRender","leftButton","rightButton","cloneElement","CaretDownOutlined","label","tooltip","rules","required","message","shouldUpdate","previousValue","newValue","hasFeedback","labelAlign","preserve","min","max","Number","MAX_SAFE_INTEGER","getFieldInstance","getFieldsValue","isFieldTouched","isFieldValidating","resetFields","scrollToField","submit","validator","rule","value","Promise","resolve","reject","Error","trigger","addonAfter","AppstoreFilled","controls","width","validateFirst","guter","htmlType","disabled","DataDisplay","createFilters","column","row","sorter","b","sortDirections","filters","text","onFilter","render","populateEventFilter","items","record","populateTable","secondaryColumns","dataSource","expandable","childrenColumnName","expandedRowRender","pagination","expandIcon","expanded","onExpand","e","PlusSquareFilled","expandRowByClick","rowExpandable","spinning","AppFooter","Footer","year","getFullYear","Content","App","minHeight","padding","Boolean","window","location","hostname","match","ReactDOM","StrictMode","componentSize","space","size","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wlEAGMA,EAAY,YACZC,EAAU,UACVC,EAAU,UACVC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAe,eACfC,EAAe,eASd,SAASC,IACd,OAAO,SAACC,GACNA,EAAS,CACPC,KAAMR,KAKL,SAASS,EAAOC,GACrB,OAAO,SAACH,GACN,OAhBJ,SAA4BI,GAC1B,IAAMC,EAAW,IAAIC,IAAWF,GAChC,OAAOG,IAAWC,OAAO,CAAEH,aAclBI,CAAmBN,GAASO,MACjC,SAACC,GACCX,EAAS,CAAEC,KAAMP,EAASS,QAASQ,OAErC,SAACC,GACCZ,EAAS,CAAEC,KAAMT,EAAWW,QAASS,QAetC,IAAMC,EAAgB,WAC3B,OAAO,SAACb,GACNA,EAAS,CACPC,KAAML,MAKCkB,EAAgB,SAACX,GAC5B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMN,EACNQ,cAKOY,EAAc,WACzB,OAAO,SAACf,GACNA,EAAS,CACPC,KAAMH,MAKCkB,EAAc,SAACb,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMJ,EACNM,cAKOc,EAAa,SAACC,GAAD,MAAa,CACrCjB,KAAM,cACNiB,WAIWC,EAAe,CAC1B3B,YACAC,UACAC,UACAC,iBACAC,iBACAC,eACAC,gBC7FIsB,EAAU,UAIHC,EAAmB,WAC9B,OAAO,SAACrB,GACNA,EAAS,CACPC,KARqB,qBASrBE,oBAKOmB,EAAmB,SAACnB,GAC/B,OAAO,SAACH,GACNA,EAAS,CACPC,KAfqB,qBAgBrBE,cAKOoB,EAAa,WACxB,OAAO,SAACvB,GACNA,EAAS,CACPC,KAAMmB,EACNjB,SAAS,MAKFqB,EAAY,WACvB,OAAO,SAACxB,GACNA,EAAS,CACPC,KAAMmB,EACNjB,SAAS,MAMFgB,EAAe,CAC1BM,mBAAoB,qBACpBC,mBAAoB,qBACpBN,QAAS,WC7CLO,EAAe,eACfC,EAAe,eACfC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAoB,oBACpBnC,EAAe,eACfC,EAAe,eACfmC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAA2B,2BAC3BC,EAA2B,2BAC3BC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAmB,mBACnBC,EAAmB,mBAGZC,EAAc,SAACtC,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM0B,EACNxB,cAKOuC,GAAc,SAACvC,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM2B,EACNzB,cAKOY,GAAc,SAACZ,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMJ,EACNM,cAKOa,GAAc,SAACb,GAC1B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMH,EACNK,cAKOwC,GAAkB,SAACxC,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM4B,EACN1B,cAKOyC,GAAkB,SAACzC,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM6B,EACN3B,cAKO0C,GAAkB,SAAC1C,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM8B,EACN5B,cAKO2C,GAAkB,SAAC3C,GAC9B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM+B,EACN7B,cAKO4C,GAAe,SAAC5C,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMgC,EACN9B,cAKO6C,GAAe,SAAC7C,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMiC,EACN/B,cAKO8C,GAAwB,SAAC9C,GACpC,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMkC,EACNhC,cAKO+C,GAAwB,SAAC/C,GACpC,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMmC,EACNjC,cAKOgD,GAAe,SAAChD,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMoC,EACNlC,cAKOiD,GAAe,SAACjD,GAC3B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMqC,EACNnC,cAKOkD,GAAiB,SAAClD,GAC7B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMsC,EACNpC,cAKOmD,GAAiB,SAACnD,GAC7B,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMuC,EACNrC,cAKOc,GAAa,SAACC,GAAD,MAAa,CACrCjB,KAAM,cACNiB,WAIWC,GAAe,CAC1BQ,eACAC,eACAC,oBACAC,oBACAC,oBACAC,oBACAnC,eACAC,eACAmC,iBACAC,iBACAC,2BACAC,2BACAC,iBACAC,iBACAC,mBACAC,oBCxLIe,GAAc,aACdC,GAAU,UACVC,GAAW,WACXC,GAAc,cACdC,GAAc,cAmBPC,GAAa,SAACzD,GACzB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMsD,GACNpD,cAKO0D,GAAa,SAAC1D,GACzB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAM0D,GACNxD,cAKO2D,GAAS,SAAC3D,GACrB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMuD,GACNrD,cAKO4D,GAAU,SAAC5D,GACtB,OAAO,SAACH,GACNA,EAAS,CACPC,KAAMwD,GACNtD,cAKO6D,GAAa,WACxB,OAAO,SAAChE,GACNA,EAAS,CACPC,KAAMyD,OAMCO,GAAkB,SAAC/C,GAAD,MAAa,CAC1CjB,KAAM,oBACNiB,WAGWgD,GAAe,SAAChD,GAAD,MAAa,CACvCjB,KAAM,iBACNiB,WAIWC,GAAe,CAC1BoC,eACAC,WACAC,YACAC,eACAC,gBCnFF,GAQIQ,EAAWhD,aALbzB,IAHF,GACEF,UADF,GAEEC,QAFF,GAGEC,SACAC,GAJF,GAIEA,eAEAE,IANF,GAKED,eALF,GAMEC,cAuCa,IA7Cf,GAOEC,aAsCa,CACba,IApCU,WAAyB,IAAxByD,EAAuB,uDAAf,GAAIC,EAAW,uCAClC,OAAQA,EAAOpE,OAKRP,GACI2E,EAAOlE,QAEPiE,GA4BXE,WAxBiB,WAAiC,IAAhCF,EAA+B,uDAAvB,WAAYC,EAAW,uCACjD,OAAQA,EAAOpE,OAGRN,GACI0E,EAAOlE,QAEPiE,GAkBXhE,SAde,WAA8C,IAA7CgE,EAA4C,uDAApC,wBAAyBC,EAAW,uCAC5D,OAAQA,EAAOpE,OAGRJ,GACIwE,EAAOlE,QAEPiE,KCzCb,GACEG,EAAepD,aADWC,IAA5B,GAAQK,mBAAR,GAA4BL,SAASM,GAArC,GAAqCA,mBAuBtB,IAAE8C,QApBD,WAA2B,IAA1BJ,IAAyB,yDAAXC,EAAW,uCACxC,OAAQA,EAAOpE,OACRmB,GACIiD,EAAOlE,QAEPiE,GAeaK,cAXJ,WAAyB,IAAxBL,EAAuB,uDAAf,GAAIC,EAAW,uCAC5C,OAAQA,EAAOpE,OACRyB,GACI2C,EAAOlE,QAIPiE,ICjBb,GAiBIM,EAAgBvD,aAgEL,IAjFf,GACEQ,aADF,GAEEC,aAFF,GAGEC,kBAHF,GAIEC,kBAJF,GAKEC,kBALF,GAMEC,kBANF,GAOEnC,aAPF,GAQEC,aARF,GASEmC,eATF,GAUEC,eAVF,GAWEC,yBAXF,GAYEC,yBAZF,GAaEC,eAbF,GAcEC,eAdF,GAeEC,iBAfF,GAgBEC,iBAiEa,CACbmC,MA/DY,WASR,IARJP,EAQG,uDARK,CACNQ,SAAU,EACVC,aAAc,EACdC,UAAW,EACXC,mBAAoB,EACpBC,WAAY,GAEdX,EACG,uCA2BC,OA1BIA,EAAOpE,KA0BJmE,GA4BXa,SAxBe,WAA4B,IAA3Bb,EAA0B,uDAAlB,MAAOC,EAAW,uCAOtC,OANIA,EAAOpE,KAMJmE,GAkBXhE,SAde,WAA4D,IAA3DgE,EAA0D,uDAAlD,CAAEhE,SAAU,yBAA2BiE,EAAW,uCAOtE,OANIA,EAAOpE,KAMJmE,K,SC/Eb,GACEc,EAAa/D,aADPoC,GAAR,GAAQA,YAAaC,GAArB,GAAqBA,QAASC,GAA9B,GAA8BA,SAAUC,GAAxC,GAAwCA,YAAaC,GAArD,GAAqDA,YAgBjDwB,GAAQ,EAoBG,IACbC,QAjCc,WAAsC,IAArChB,EAAoC,uDAA5B,CAAEgB,QAAS,IAAMf,EAAW,uCAEnD,OAAQA,EAAOpE,MACb,KAAKsD,GACH,MAAM,GAAN,oBAAWa,GAAX,aAAqBC,EAAOlE,UAC9B,KAAKwD,GACH,OAAOU,EAAOlE,QAChB,QACE,OAAOiE,IA0BXiB,KApBW,WAAmC,IAAlCjB,EAAiC,uDAAzB,CAAEiB,KAAM,IAAMhB,EAAW,uCACrCgB,EAASjB,EAATiB,KACR,OAAQhB,EAAOpE,MACb,KAAKuD,GACH,IAAM8B,EAAG,YAAQH,IAIjB,OADAd,EAAOlE,QAAQmF,IAAMA,EACd,CAAED,KAAK,GAAD,oBAAMA,GAAN,CAAYhB,EAAOlE,WAClC,KAAKsD,GACH,MAAO,CAAE4B,KAAK,GAAD,oBAAMA,GAAN,CAAYhB,EAAOlE,WAClC,KAAKuD,GACH,MAAO,CAAE2B,KAAM,IACjB,QACE,OAAOjB,KCzBPmB,GAAW,CACfC,YAAaC,YAAgBD,IAC7BE,gBAAiBD,YAAgBC,IACjCC,iBAAkBF,YAAgBE,IAClCC,cAAeH,YAAgBG,KAOlBH,eAAgBF,ICW/B,IAAMM,GATC,WAA4C,IAApBC,EAAmB,uDAAJ,GACtCD,EAAQE,YACZC,GACAF,EACAG,YAAgBC,MAElB,OAAOL,EAGKM,CA1BO,IA2CrBC,QAAQC,IAAIR,GAAMS,YAEHT,U,wFC7CPU,GAAUC,KAAVD,MAoBOE,GAlBG,SAACC,GACjB,IAAQC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,MACXC,EAAWC,KAAXD,OACR,OACE,eAACA,EAAD,CAAQF,UAAWA,EAAWC,MAAOA,EAArC,SACE,eAACL,GAAD,CAAOK,MAAO,CAAEG,OAAQ,OAAQC,UAAW,UAA3C,2B,oBCNAC,G,oDACJ,WAAYP,GAAQ,wCACZA,G,2CAQR,WACE,IAAQjC,EAAkByC,KAAK9C,MAAvBK,cACR,OACE,gBAAC,KAAD,WACE,oBAAGmC,MAAO,CAAEI,UAAW,UAAvB,wBACA,eAAC,KAAD,CACEG,QAAS1C,EACT2C,OAAe,iB,uCAZvB,SAAgCV,EAAOtC,GAErC,MAAO,CAAEK,cADiBiC,EAAlBjC,mB,GANS4C,aAsCNC,gBANS,SAAClD,GAGvB,MAAO,CAAEK,cAFmBL,EAApBsB,gBACAjB,iBAIK6C,CAAyBL,I,yOCMhCrD,GAAwDsB,EAAxDtB,WAAYE,GAA4CoB,EAA5CpB,OAAQC,GAAoCmB,EAApCnB,QAASC,GAA2BkB,EAA3BlB,WAAYH,GAAeqB,EAAfrB,WACzCrC,GAA4C+C,EAA5C/C,UAAWD,GAAiCgD,EAAjChD,WAAYD,GAAqBiD,EAArBjD,iBAIzBiG,G,oDAGJ,WAAYb,GAAQ,IAAD,+BACjB,cAAMA,IAHRc,UAAYC,IAAMC,YAEC,EA0WnBC,KACE,gBAAC,KAAD,CACEC,QAAS,SAACC,KADZ,UAQE,eAAC,KAAKC,KAAN,CAEEF,QAAS,SAACG,GACR3B,QAAQC,IAAI0B,GACZ,EAAKC,SAAS,CACZ1D,WAAY,YACZlE,SAAU,oCAGd6H,KAAM,eAACC,GAAA,EAAD,IATR,sBACM,KAWN,eAAC,KAAKJ,KAAN,CAEEF,QAAS,SAACG,GACR3B,QAAQC,IAAI0B,GACZ,EAAKC,SAAS,CACZ1D,WAAY,sBACZlE,SAAU,sCAGd6H,KAAM,eAACE,GAAA,EAAD,IATR,gCACM,KAWN,eAAC,KAAKL,KAAN,CAEEF,QAAS,SAACG,GACR3B,QAAQC,IAAI0B,GACZ,EAAKC,SAAS,CACZ1D,WAAY,WACZlE,SAAU,gCAGd6H,KAAM,eAACG,GAAA,EAAD,IATR,qBACM,KAWN,eAAC,KAAKN,KAAN,CAEEF,QAAS,SAACG,GACR3B,QAAQC,IAAI0B,GACZ,EAAKC,SAAS,CACZ1D,WAAY,UACZlE,SAAU,oCAGd6H,KAAM,eAACI,GAAA,EAAD,IATR,oBACM,KAWN,eAAC,KAAKP,KAAN,CAEEF,QAAS,SAACG,GACR3B,QAAQC,IAAI0B,GACZ,EAAKC,SAAS,CACZ1D,WAAY,WACZlE,SAAU,2BAGd6H,KAAM,eAACK,GAAA,EAAD,IATR,qBACM,KAWN,eAAC,KAAKR,KAAN,CAEEF,QAAS,SAACG,GACR3B,QAAQC,IAAI0B,GACZ,EAAKC,SAAS,CACZ1D,WAAY,SACZlE,SAAU,kCAGd6H,KAAM,eAACM,GAAA,EAAD,IATR,mBACM,QA9aR,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,iBACrB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,iBACzB,EAAKE,oBAAsB,EAAKA,oBAAoBF,KAAzB,iBAG3B,EAAKpC,IAAM,EAAKA,IAAIoC,KAAT,iBACX,EAAKG,KAAO,EAAKA,KAAKH,KAAV,iBARK,E,sDAsCnB,WACErC,QAAQC,IAAI,kCACIa,KAAK9C,MAAbzD,IACAV,OACNiH,KAAKR,MAAMpF,iBAAiB,KAC5B4F,KAAKR,MAAMlF,e,gCAIf,WACE4E,QAAQC,IAAI,qC,uEAQd,WAAuBwB,GAAvB,UAAAgB,EAAA,0F,2HAIA,WAAoBhB,GAApB,UAAAgB,EAAA,6DACEzC,QAAQ0C,QACR5B,KAAKR,MAAMnF,aAFb,SAGsB2F,KAAKR,MAAM1C,aAHjC,kBAIkBkD,KAAK9C,MAAbzD,IACAV,KALV,iCAMuBiH,KAAK6B,oBAN5B,+D,+HAUA,gDAAAF,EAAA,6DACMzD,EAAU,GAER4D,EAAO9B,KAAKM,UAAUyB,QAE1BC,SAASF,EAAKG,cAAc,cAAgBjC,KAAK9C,MAAMhE,SAEnD4E,EAAakE,SAASF,EAAKG,cAAc,gBAAkB,EAPnE,SAQ+BjC,KAAKkC,aAAapE,GARjD,qBASQJ,EAAWsE,SAASF,EAAKG,cAAc,cAAgB,EAT/D,UAU6BjC,KAAKkC,aAAaxE,GAV/C,eAYwB,KADhByE,EAAkBzE,EAAWI,GAExB,GAbb,KAAA6D,EAAA,iBAcWS,GAdX,sBAAAT,EAAA,sEAe4B,EAAKU,kBAAkBvE,EAAasE,GAfhE,cAeUE,EAfV,gBAiB8B,EAAKC,kBAAkBD,GAjBrD,cAiBUE,EAjBV,gBAkBkC,EAAKC,eAAeD,GAlBtD,QAkBUE,EAlBV,QAuBoBC,SAAQ,SAAC9B,EAAM+B,GAG7B,EAAKpD,MAAM5C,OAAOiE,MAGdgC,EAAO,GACbC,OAAOD,KAAKH,EAAgB,IAAIC,SAAQ,SAACvE,GACvC,OAAQA,GACN,IAAK,YACL,IAAK,MACH,OACF,QACEyE,EAAKE,KAAK,CACRC,MAAM,GAAD,OAAK5E,EAAI6E,qBACdC,UAAU,GAAD,OAAK9E,GACdA,IAAI,GAAD,OAAKA,SAIhBF,EAAU2E,EA3Cd,2CAcWT,EAAI,EAdf,aAckBA,GAAKD,GAdvB,0CAcWC,GAdX,iBAcwCA,IAdxC,wBAgDEpC,KAAKR,MAAM7C,WAAWuB,GAEtB8B,KAAKR,MAAMpF,iBAAiB,KAC5B4F,KAAKR,MAAMlF,YAnDb,iD,2HAsDA,WAAqB6I,GAArB,oDAAAxB,EAAA,6DACQyB,EAAY,GACZC,EAAOF,EAAOG,cAFtB,SAG4BtD,KAAKuD,uBAAuBF,GAHxD,cAGQG,EAHR,gBAI4BxD,KAAKyD,uBAAuBJ,GAJxD,cAIQK,EAJR,iBAK0B1D,KAAK2D,gBAAgBN,GAL/C,eAMQO,EAAc,CAClBF,cACAP,OAAQ,IARZ,eAUqBA,GAVrB,kEAUatC,EAVb,UAWmDA,EAAKgD,IAAI,SAAhDC,EAXZ,EAWYA,KAXZ,EAWkBlB,MAAOmB,EAXzB,EAWyBA,KAAMC,EAX/B,EAW+BA,OAAQC,EAXvC,EAWuCA,QAC3BC,EAAUrD,EAAVqD,MAZZ,EAauBJ,EAAKK,UAb5B,oBAaWC,EAbX,KAcqBN,EAAKC,KACgCA,EAA9CM,KAA8CN,EAAxCO,KAAwCP,EAAlCQ,QAAkCR,EAAzBS,KAAyBT,EAAnBU,SAAmBV,EAATW,KAfjD,eAgBsBR,EAAMS,iBAAiBC,MAhB7C,GAgBWC,EAhBX,eAiByBrB,EAAYsB,OAjBrC,eAkBIlB,EAAYT,OAAOJ,KAAK,CAGtB8B,QAAQ,GAAD,OAAKnB,EAAL,YAAoBmB,GAC3BlE,MAAM,GAAD,OAAKsD,EAAL,YAAgBD,GACrBe,UAAW,CAACX,EAASY,MAAOZ,EAASa,QAASb,EAASc,UAvB7D,wJA0BE9B,EAAUL,KAAKa,GAEFT,EACVnJ,QACC,SAACmL,GACmBA,EAAVjB,MAEFkB,oBAKTC,KAAI,SAACF,GACJ,IAAQxE,EAAUwE,EAAVxE,MACR,MAAM,GAAN,OAAUA,EAAMsD,QAAhB,YAA2BtD,EAAMqD,WAErC9E,QAAQC,IAAIiE,GA1Cd,kBA2CSA,GA3CT,iE,+HA8CA,0CAAAzB,EAAA,6DACUlI,EAAQuG,KAAK9C,MAAbzD,IACA6L,EAAgB7L,EAAhB6L,OAAQC,EAAQ9L,EAAR8L,IAFlB,SAGsBA,EAAIC,MAAMC,WAHhC,OAGQhI,EAHR,OAIiBA,EAAMA,MAAMiI,OAC3BJ,EAAOE,MAAMG,mBAAkB,SAACD,GACR,EAAKxI,MAAnB0I,WAEN1G,QAAQC,IAAR,uBACkBuG,EAAOG,OADzB,2BACkDH,EAAOZ,YAT/D,gD,yHAeA,WAAmBpB,GAAnB,wBAAA/B,EAAA,6DACkB3B,KAAK9C,MAAbzD,IADV,SAEqBuG,KAAKqC,kBAAkBqB,GAF5C,cAEQL,EAFR,gBAG0BrD,KAAK8F,iBAAiBzC,GAHhD,uBAGU5F,EAHV,EAGUA,MAHV,UAIuBuC,KAAKuC,kBAAkBc,GAJ9C,eAIQF,EAJR,iBAKqBnD,KAAK2D,gBAAgBN,GAL1C,eAKQ0C,EALR,cAMqBtI,QANrB,IAMqBA,OANrB,EAMqBA,EAAOuI,SAN5B,kBAYS,CACLvI,QACA4F,OACAF,SACA4C,SAhBJ,iD,wFAoBA,WACE/F,KAAKc,SAAS,CAAE8E,WAAW,M,gCAG7B,YAA8B,IAATtB,EAAQ,EAARA,KACnBpF,QAAQC,IAAR,0BAA+BmF,EAAKe,KAAI,SAACY,GAAD,OAAOA,EAAEC,cAAYC,KAAK,U,kFAGpE,iCAAAxE,EAAA,6DACUlI,EAAQuG,KAAK9C,MAAbzD,IACA6L,EAAkB7L,EAAlB6L,OAAkB7L,EAAV2M,MACRZ,EAAUF,EAAVE,MAHV,kBAISA,EAAMa,uBAJf,gD,mIAOA,WAA6BhD,GAA7B,sBAAA1B,EAAA,2DACUlI,EAAQuG,KAAK9C,MAAbzD,KACAV,KAFV,uBAGYwM,EAAQ9L,EAAR8L,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAMC,SAASpC,GAL3C,cAKUiD,EALV,yBAMWtE,SAASsE,EAAU7I,MAAMiI,OAAOG,OAAOK,aANlD,gCAQS,GART,gD,+HAWA,WAAwBL,GAAxB,sBAAAlE,EAAA,2DACUlI,EAAQuG,KAAK9C,MAAbzD,KACAV,KAFV,uBAGYwM,EAAQ9L,EAAR8L,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAMtJ,aAAa2J,GAL/C,cAKUvD,EALV,yBAMWA,GANX,gCAQS,GART,gD,8HAWA,WAAuBe,GAAvB,sBAAA1B,EAAA,2DACUlI,EAAQuG,KAAK9C,MAAbzD,KACAV,KAFV,uBAGYwM,EAAQ9L,EAAR8L,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAMC,SAASpC,GAL3C,cAKUiD,EALV,OAMiBA,EAAU7I,MAAMuI,SANjC,kBAOWM,GAPX,gCASS,GATT,iD,oIAYA,WAA6BjD,GAA7B,sBAAA1B,EAAA,2DACUlI,EAAQuG,KAAK9C,MAAbzD,KACAV,KAFV,uBAGYwM,EAAQ9L,EAAR8L,IACAC,EAAUD,EAAVC,MAJZ,SAK4BA,EAAMe,UAAUlD,GAL5C,cAKUiD,EALV,yBAMWA,GANX,gCAQS,GART,gD,6HAWA,WAAsBjD,GAAtB,wCAAA1B,EAAA,2DAEiD3B,KAAK9C,MAA5CzD,EAFV,EAEUA,IAFV,EAEemE,UAFf,EAE0BC,oBACpBpE,EAAIV,KAHV,wBAIwBU,EAAI6L,OAAOE,MACzBgB,EAAW/M,EAAI8L,IAAIC,MAL7B,SAM4BgB,EAASf,SAASpC,GAN9C,yBAMY5F,MAEFgJ,EAAYhN,EAAI2M,MAAMK,UARhC,UAS4BA,EAAUC,YATtC,gCAUsCD,EAAUE,MAVhD,eAUUC,EAVV,sBAYwCA,EAAoBhC,MAZ5D,GAYWiC,EAZX,KAa2B,IAAIC,KAAKD,GAC1BE,EAAc,IAAID,KAClBE,EAAQD,EAAcF,EACtBI,EAAQJ,EAA4BE,EACpCG,EACJH,EACAH,EAAoBhC,MAAM,GAAKgC,EAAoBhC,MAAM,GAErDuC,EAAQ,IAAIL,KAAKE,GACT,IAAIF,KAAKG,GACT,IAAIH,KAAKI,GAvB3B,kBAwBWC,GAxBX,iD,+HA4BA,WAAwB9D,GAAxB,wBAAA1B,EAAA,2DACUlI,EAAQuG,KAAK9C,MAAbzD,KACAV,KAFV,uBAGYqN,EAAU3M,EAAV2M,MACAgB,EAAWhB,EAAXgB,OACAjE,EAAWiE,EAAXjE,OALZ,SAoBwBA,EAAOkE,GAAGhE,GApBlC,cAoBU1C,EApBV,yBAqBWA,GArBX,gCAuBS,IAvBT,iD,+HA0BA,WAAwBwC,GAAxB,oDAAAxB,EAAA,6DACQ0B,EAAOF,EAAOG,cADtB,SAE4BtD,KAAKuD,uBAAuBF,GAFxD,cAEQG,EAFR,gBAG4BxD,KAAKyD,uBAAuBJ,GAHxD,cAGQK,EAHR,gBAI0B1D,KAAK2D,gBAAgBN,GAJ/C,OAIQiE,EAJR,OAKQlE,EAAY,CAChBM,cACA6D,SAAU,GACVd,UAAWa,EAAUE,eARzB,eAUqBrE,GAVrB,kEAUatC,EAVb,UAWmDA,EAAKgD,IAAI,SAAhDC,EAXZ,EAWYA,KAXZ,EAWkBlB,MAAOmB,EAXzB,EAWyBA,KAAMC,EAX/B,EAW+BA,OAAQC,EAXvC,EAWuCA,QAC3BC,EAAUrD,EAAVqD,MAZZ,EAauBJ,EAAKK,UAb5B,yBAcqBL,EAAKC,KACdM,EAA8CN,EAA9CM,KAA8CN,EAAxCO,KAAwCP,EAAlCQ,QAAkCR,EAAzBS,KAAyBT,EAAnBU,SAAmBV,EAATW,KAfjD,eAgBsBR,EAAMS,iBAAiBC,MAhB7C,GAgBWC,EAhBX,eAiByBrB,EAAYsB,OAjBrC,eAkBI1B,EAAUmE,SAASxE,KAAK,CACtB0E,UAAWpD,EAAKF,UAEhBU,QAAQ,GAAD,OAAKnB,EAAL,YAAoBmB,GAC3BlE,MAAM,GAAD,OAAKsD,EAAL,YAAgBD,KAtB3B,wJA0Beb,EACVnJ,QACC,SAACmL,GACmBA,EAAVjB,MAEFkB,oBAKTC,KAAI,SAACF,GACJ,IAAQxE,EAAUwE,EAAVxE,MACR,MAAM,GAAN,OAAUA,EAAMsD,QAAhB,YAA2BtD,EAAMqD,WAtCvC,kBAwCS,CAACZ,IAxCV,iE,wEA+HA,SAAIsE,GACFxI,QAAQC,IAAI,UACZD,QAAQC,IAAIa,KAAKR,OACjBN,QAAQC,IAAI,UACZD,QAAQC,IAAIa,KAAK9C,S,kBAGnB,SAAKwK,GACHxI,QAAQC,IAAIuI,GACZ1H,KAAKR,MAAM1C,e,oBAGb,WACE,MACEkD,KAAK9C,MADCE,EAAR,EAAQA,WAAYM,EAApB,EAAoBA,SAAUxE,EAA9B,EAA8BA,SAAU0E,EAAxC,EAAwCA,UAAWN,EAAnD,EAAmDA,QAASQ,EAA5D,EAA4DA,WAU5D,OACE,gBAAC,KAAD,2BACE0G,KAAK,kBAPc,CACrBmD,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MAIpB,IAGEE,OAXe,aAYfC,cAAe,CACb7O,WACA4E,aACAJ,SAAUA,GAAsBE,GAElCoK,IAAKhI,KAAKM,UACV2H,oBAAoB,EACpBC,OAAO,EAXT,UAYE,eAAC,KAAD,CAASC,YAAY,OAArB,6BACA,gBAAC,KAAD,CAAKC,MAAM,SAASC,KAAK,OAAOC,QAAQ,SAAxC,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SACE,eAAC,KAASE,OAAV,CACEC,QAASxI,KAAKS,KACdgI,cAAe,oCAAEC,EAAF,KAAcC,EAAd,WAA+B,CAC5C,eAAC,KAAD,CAAS3F,MAAM,oBAAf,SACG0F,GADoC,cAGvCnI,IAAMqI,aAAaD,EAAa,CAC9B5H,KAAM,eAAC8H,GAAA,EAAD,IACNvL,SAAS,MARf,SAWGF,MAGL,eAAC,KAAD,CAAKiL,KAAM,EAAX,SACE,eAAC,KAAKzH,KAAN,CACEkI,MAAM,WACNtE,KAAK,WACLuE,QAAS,0BAMTC,MAAO,CACL,CACEC,UAAU,EACVC,QACE,6EAINC,aAAc,SAACC,EAAeC,GAG5B,OAAID,GAAiBC,GAKvBJ,UAAU,EAzBZ,SA0BE,eAAC,KAAD,WAIN,eAAC,KAAD,CAASd,YAAY,OAArB,oBACA,gBAAC,KAAD,CAAKE,KAAK,OAAOC,QAAQ,SAAzB,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SACE,eAAC,KAAKzH,KAAN,CACEkI,MAAM,cACNtE,KAAK,aACLuE,QAAS,wBACTO,aAAa,EACbC,WAAW,OACXC,UAAU,EACVR,MAAO,CACL,CACEC,UAAU,EACVC,QAAQ,oCAEV,CACEnQ,KAAM,SACN0Q,IAAK,EACLC,IAAKC,OAAOC,iBACZV,QACE,6FAEJ,cACEW,iBADF,EAEE5H,cAFF,IAGE6H,EAHF,EAGEA,eAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,YANF,EAOEC,cAPF,EAQEC,OARF,MASO,CACLC,UADK,SACKC,EAAMC,GACd,MAAiCR,IACjC,OADA,EAAQhM,WAAR,EAAoBJ,SAEX6M,QAAQC,UAEVD,QAAQE,OACb,IAAIC,MAAM,iDAKlBC,QAAQ,WACR1B,UAAU,EAzCZ,SA0CE,eAAC,KAAD,CACE2B,WAAY,eAACC,GAAA,EAAD,IACZC,UAAU,EACVrB,IAAK,EAEL/J,MAAO,CAAEqL,MAAO,cAItB,eAAC,KAAD,CAAK1C,KAAM,EAAX,SACE,eAAC,KAAKzH,KAAN,CACEkI,MAAM,YACNS,WAAW,OACX/E,KAAK,WACLuE,QAAS,qBACTO,aAAa,EACbE,UAAU,EACVwB,eAAe,EACfhC,MAAO,CACL,CACEjQ,KAAM,SACN0Q,IAAK,EACLC,IAAKC,OAAOC,iBACZV,QACE,6FAEJ,CACED,UAAU,EACVC,QAAQ,kCAEV,cACEW,iBADF,EAEE5H,cAFF,IAGE6H,EAHF,EAGEA,eAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,YANF,EAOEC,cAPF,EAQEC,OARF,MASO,CACLC,UADK,SACKC,EAAMC,GACd,MAAiCR,IAAzBhM,EAAR,EAAQA,WACR,OADA,EAAoBJ,SACLI,EACNyM,QAAQC,UAEVD,QAAQE,OACb,IAAIC,MAAM,oDAgBlBC,QAAQ,WACR1B,UAAU,EArDZ,SAsDE,eAAC,KAAD,CACE2B,WAAY,eAACC,GAAA,EAAD,IACZC,UAAU,EACVrB,IAAK,EAEL/J,MAAO,CAAEqL,MAAO,iBAQxB,eAAC,KAAD,CAAS5C,YAAY,OAArB,qBACA,gBAAC,KAAD,CAAKE,KAAK,OAAO4C,MAAO,GAAI3C,QAAQ,SAApC,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SAGE,eAAC,KAAD,CACE5I,UAAU,cACV1G,KAAK,UACLmS,SAAS,SACTxK,QAASV,KAAKsB,cACd7D,OAAO,EACP0N,SAAU7N,EANZ,oBAUF,eAAC,KAAD,CAAK+K,KAAM,EAAX,SACE,eAAC,KAAD,CACEtP,KAAK,UACL2H,QAASV,KAAKwB,kBACd/D,OAAO,EACP0N,SAAU7N,EAJZ,yBAQF,eAAC,KAAD,CAAK+K,KAAM,EAAX,SACE,eAAC,KAAD,CACEtP,KAAK,UACL2H,QAASV,KAAKyB,oBACdmG,KAAM,EACNnK,OAAO,EACP0N,SAAU7N,EALZ,8BAUJ,eAAC,KAAD,CAAS6K,YAAY,OAArB,+BACA,gBAAC,KAAD,CAAKE,KAAK,OAAO4C,MAAO,GAAI3C,QAAQ,SAApC,UACE,eAAC,KAAD,CAAKD,KAAM,EAAX,SACE,eAAC,KAAD,CAAQtP,KAAK,UAAU2H,QAASV,KAAKb,IAAKyI,KAAM,EAAGnK,OAAO,EAA1D,mBAIF,eAAC,KAAD,CAAK4K,KAAM,EAAX,SACE,eAAC,KAAD,CAAQtP,KAAK,UAAU2H,QAASV,KAAK0B,KAAMkG,KAAM,EAAGnK,OAAO,EAA3D,8B,uCA5qBV,SAAgC+B,EAAOtC,GAarC,MAAO,CACLzD,IAFE+F,EAVF/F,IAaA2D,WAHEoC,EATFpC,WAaAM,SAJE8B,EARF9B,SAaAxE,SALEsG,EAPFtG,SAaAyE,aANE6B,EANF7B,aAaAC,UAPE4B,EALF5B,UAaAC,mBARE2B,EAJF3B,mBAaAP,QATEkC,EAHFlC,QAaAC,cAVEiC,EAFFjC,cAaAO,WAXE0B,EADF1B,gB,GAzBkBqC,aAswBTC,gBA1DS,SAAClD,GACvB,IAAQoB,EAAmDpB,EAAnDoB,YAAaE,EAAsCtB,EAAtCsB,gBAAiBC,EAAqBvB,EAArBuB,iBAC9BhF,EAA8B6E,EAA9B7E,IAAK2D,EAAyBkB,EAAzBlB,WAAYlE,EAAaoF,EAAbpF,SACjBuE,EAAUgB,EAAVhB,MACAC,EACND,EADMC,SAAUC,EAChBF,EADgBE,aAAcC,EAC9BH,EAD8BG,UAAWC,EACzCJ,EADyCI,mBAAoBC,EAC7DL,EAD6DK,WAG/D,MAAO,CACLrE,MACA2D,aACAM,WACAxE,WACAyE,eACAC,YACAC,qBACAP,QATiCkB,EAA3BlB,QAUNC,cAViCiB,EAAlBjB,cAWfO,iBAIuB,SAAChF,GAO1B,MAAO,CACL4D,WAAY,SAACoH,GACXhL,EAAS4D,GAAWoH,KAEtBlH,OAAQ,SAACkH,GACPhL,EAAS8D,GAAOkH,KAElBjH,QAAS,SAACiH,GACRhL,EAAS+D,GAAQiH,KAEnBhH,WAAY,WACVhE,EAASgE,OAEXH,WAAY,SAACmH,GACXhL,EAAS6D,GAAWmH,KAEtBxJ,UAAW,WACTxB,EAASwB,OAEXD,WAAY,WACVvB,EAASuB,OAEXD,iBAAkB,SAAC0J,GACjBhL,EAASsB,GAAiB0J,QAOjB1D,CAA6CC,I,oBC1xBpD/F,GAA4C+C,EAA5C/C,UAAWD,GAAiCgD,EAAjChD,WAAYD,GAAqBiD,EAArBjD,iBAEzBgR,G,oDACJ,WAAY5L,GAAQ,IAAD,+BACjB,cAAMA,IAiCR6L,cAAgB,SAACnN,GACf,IAAQC,EAAS,EAAKjB,MAAdiB,KAGRD,EAAQmH,KAAI,SAACiG,GAAW,qBAKJnN,GALI,IAKtB,2BAAwB,CAAC,IAAdoN,EAAa,QAMtB,OAAQD,EAAOlN,KACb,IAAK,cACHkN,EAAOE,OAAS,SAAC7J,EAAG8J,GAElB,OAAO9J,GAET2J,EAAOI,eAAiB,CAAC,SAAU,WACrC,IAAK,QAiBH,IAAM1R,EAAM,UAAMuR,EAAI5K,OACtB2K,EAAOK,QAAU,CACf,CACEC,KAAM5R,EACNsQ,MAAOtQ,IAGXsR,EAAOO,SAAW,WAEhB3M,QAAQC,IAAI0B,OAEhB,QACEyK,EAAOQ,OAAS,SAACzH,GACf,OAAOA,GAIb,OAAOiH,GApDa,mCAtCP,EA+FnBS,oBAAsB,SAACC,GAgBrB,OAfAA,EAAM3G,KAAI,SAACxE,GAaT,MAZgB,SAAZA,EAAKzC,MACPyC,EAAK8K,QAAU,CACb,CACEC,KAAK,0BACLtB,MAAO,4BAGXzJ,EAAKgL,SAAW,SAACvB,EAAO2B,GAEtB,OADwBA,EAAOtL,OAAS2J,IAIrCzJ,KAEFmL,GA5GP,EAAKE,cAAgB,EAAKA,cAAc3K,KAAnB,iBACrB,EAAK8J,cAAgB,EAAKA,cAAc9J,KAAnB,iBACrB,EAAKwK,oBAAsB,EAAKA,oBAAoBxK,KAAzB,iBALV,E,sDAmBnB,WACErC,QAAQC,IAAI,mCACZa,KAAKR,MAAMpF,iBAAiB,KAC5B4F,KAAKR,MAAMlF,c,gCAGb,WACE4E,QAAQC,IAAI,oCACIa,KAAK9C,MAAbzD,M,2BAuFV,WACE,MAAyCuG,KAAK9C,MAAtCI,EAAR,EAAQA,QAAwBa,GAAhC,EAAiBZ,cAAjB,EAAgCY,MAa1BgO,EAAmBnM,KAAK+L,oBAAoB,CAChD,CACE/I,MAAO,WACPE,UAAW,UACX9E,IAAK,WAEP,CACE4E,MAAO,QACPE,UAAW,QACX9E,IAAK,SAEP,CACE4E,MAAO,aACPE,UAAW,YACX9E,IAAK,YACL0N,OAAQ,SAACF,EAAMK,EAAQrJ,GACrB,IAAMkB,EAAOmI,EAAOlH,UAAUM,KAAI,SAACxE,GACjC,OAAO,8BAAKA,OAEd,OAAO,8BAAKiD,QAIlB,OACE,eAAC,KAAD,CACE5F,QApCgB,CAClB,CACE8E,MAAO,eACPE,UAAW,cACX9E,IAAK,cACLoN,OAAQ,SAAC7J,EAAG8J,GACV,OAAO9J,EAAE+B,YAAc+H,EAAE/H,aAE3BgI,eAAgB,CAAC,SAAU,aA6B3BU,WAAYjO,EACZkO,WAAY,CACVC,mBAAoB,WACpBC,kBAAmB,SAACN,EAAQrJ,GAC1B,OACE,eAAC,KAAD,CAEE1E,QAASiO,EACTC,WAAYH,EAAO9I,OACnBqJ,YAAY,GAHP5J,IAOX6J,WAAY,YAAqC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAUV,EAAa,EAAbA,OACjC,OAAIS,EACK,eAAC7B,GAAA,EAAD,CAAgBnK,QAAS,SAACkM,GAAD,OAAOD,EAASV,EAAQW,MAEnD,eAACC,GAAA,EAAD,CAAkBnM,QAAS,SAACkM,GAAD,OAAOD,EAASV,EAAQW,OAE5DE,kBAAkB,EAClBC,cAAe,SAACd,GACd,QAAIA,EAAO9I,SAMf7F,QAAS,CAAE0P,SAAU1P,GACrBkP,YACE,EAIFxJ,MAAO,WACL,MAAO,uB,oBAMf,WAME,OADchD,KAAKkM,mB,uCA/LrB,SAAgC1M,EAAOtC,GACrC,IAAQzD,EAA+C+F,EAA/C/F,IAAKyE,EAA0CsB,EAA1CtB,QAASZ,EAAiCkC,EAAjClC,QAASC,EAAwBiC,EAAxBjC,cAAeY,EAASqB,EAATrB,KAC9C,MAAO,CACL1E,MACAyE,QAASA,EAAQA,QACjBZ,UACAC,gBACAY,KAAMA,EAAKA,U,GAhBSgC,aAiPXC,gBA5BS,SAAClD,GACvB,IAAQoB,EAAgDpB,EAAhDoB,YAAaE,EAAmCtB,EAAnCsB,gBAAiBE,EAAkBxB,EAAlBwB,cAC9BjF,EAAQ6E,EAAR7E,IACA6D,EAA2BkB,EAA3BlB,QAASC,EAAkBiB,EAAlBjB,cAEjB,MAAO,CACL9D,MACAyE,QAHwBQ,EAAlBR,QAINZ,UACAC,gBACAY,KANwBO,EAATP,SAUQ,SAACrF,GAC1B,MAAO,CACLwB,UAAW,WACTxB,EAASwB,OAEXD,WAAY,WACVvB,EAASuB,OAEXD,iBAAkB,SAAC0J,GACjBhL,EAASsB,GAAiB0J,QAKjB1D,CAA6CgL,IC3P7C6B,GApBG,SAACzN,GACjB,IAAQE,EAAUF,EAAVE,MACAwN,EAAWtN,KAAXsN,OACFC,GAAO,IAAIrG,MAAOsG,cACxB,OACE,gBAACF,EAAD,CAAQxN,MAAOA,EAAf,2CAC8ByN,EAD9B,4BCIInU,GAAWiE,EAAXjE,OACAsB,GAAgC+C,EAAhC/C,UAAWF,GAAqBiD,EAArBjD,iBAEXiT,GAAYzN,KAAZyN,QAIFC,G,oDACJ,WAAY9N,GAAQ,wCACZA,G,sDAgBR,WACEN,QAAQC,IAAI,iCACZa,KAAKR,MAAMxG,OAAOgH,KAAK9C,MAAMhE,UAC7B8G,KAAKR,MAAMpF,iBAAiB,M,gCAG9B,WACE8E,QAAQC,IAAI,oC,oBAGd,WACE,MAAmCa,KAAK9C,MAAvBK,GAAjB,EAAQD,QAAR,EAAiBC,eACjB,OACE,eAAC,KAAD,CAAQmC,MAAO,CAAE6N,UAAW,SAA5B,SACE,gBAAC,KAAD,CAAQ9N,UAAU,cAAlB,UACE,eAAC,GAAD,CAAWA,UAAU,2BACrB,eAAC4N,GAAD,CAAS3N,MAAO,CAAEG,OAAQ,UAA1B,SACGtC,EAAgB,GACf,eAAC,GAAD,IAEA,uBACEkC,UAAU,yBACVC,MAAO,CAAE8N,QAAS,GAAID,UAAW,KAFnC,UAGE,eAAC,GAAD,IACA,eAAC,GAAD,SAIN,eAAC,GAAD,CAAW7N,MAAO,CAAEI,UAAW,oB,uCAzCvC,SAAgCN,GAG9B,MAAO,CACL/F,IAFA+F,EADM/F,IAIN2D,WAHAoC,EADWpC,WAKXlE,SAJAsG,EADuBtG,SAMvBoE,QALAkC,EADiClC,QAOjCC,cANAiC,EAD0CjC,cAQ1CQ,SAPAyB,EADyDzB,c,GAN7CoC,aAkFHC,gBA7BS,SAAClD,GACvB,IAAQoB,EAAmDpB,EAAnDoB,YAAaE,EAAsCtB,EAAtCsB,gBAAiBC,EAAqBvB,EAArBuB,iBAItC,MAAO,CACLhF,IAJoC6E,EAA9B7E,IAKN2D,WALoCkB,EAAzBlB,WAMXlE,SANoCoF,EAAbpF,SAOvBoE,QANiCkB,EAA3BlB,QAONC,cAPiCiB,EAAlBjB,cAQfQ,SAPmBU,EAAbV,aAWiB,SAACjF,GAC1B,MAAO,CACLE,OAAQ,SAAC8K,GACPhL,EAASE,GAAO8K,KAElBxJ,UAAW,WACTxB,EAASwB,OAEXF,iBAAkB,SAAC0J,GACjBhL,EAASsB,GAAiB0J,QAKjB1D,CAA6CkN,IC5FxCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCLNC,IAAShC,OACP,eAAC,IAAMiC,WAAP,UACE,eAAC,IAAD,CAAUpP,MAAOA,GAAjB,SACE,eAAC,KAAD,CAAgBqP,cAAe,QAASC,MAAO,CAAEC,KAAM,UAAvD,SACE,eAAC,GAAD,UAINC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/U,MAAK,SAACgV,GAClCA,EAAaC,kB","file":"static/js/main.579a42b2.chunk.js","sourcesContent":["import { ApiPromise, WsProvider } from '@polkadot/api';\n\n// Action Types\nconst API_ERROR = 'API_ERROR';\nconst GET_API = 'GET_API';\nconst SET_API = 'SET_API';\nconst SET_BLOCKCHAIN = 'SET_BLOCKCHAIN';\nconst GET_BLOCKCHAIN = 'GET_BLOCKCHAIN';\nconst SET_ENDPOINT = 'SET_ENDPOINT';\nconst GET_ENDPOINT = 'GET_ENDPOINT';\n\n// Action Utilities\nfunction initializeProvider(endpoint) {\n  const provider = new WsProvider(endpoint);\n  return ApiPromise.create({ provider });\n}\n\n// Action Creators\nexport function getApi() {\n  return (dispatch) => {\n    dispatch({\n      type: GET_API,\n    });\n  };\n}\n\nexport function setApi(payload) {\n  return (dispatch) => {\n    return initializeProvider(payload).then(\n      (api) => {\n        dispatch({ type: SET_API, payload: api });\n      },\n      (error) => {\n        dispatch({ type: API_ERROR, payload: error });\n      },\n    );\n  };\n}\n\n// export const setApi = (payload) => {\n//   return (dispatch) => {\n//     dispatch({\n//       type: SET_API,\n//       payload,\n//     });\n//   };\n// };\n\nexport const getBlockchain = () => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_BLOCKCHAIN,\n    });\n  };\n};\n\nexport const setBlockchain = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_BLOCKCHAIN,\n      payload,\n    });\n  };\n};\n\nexport const getEndpoint = () => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_ENDPOINT,\n    });\n  };\n};\n\nexport const setEndpoint = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_ENDPOINT,\n      payload,\n    });\n  };\n};\n\nexport const tempFilter = (filter) => ({\n  type: 'TEMP_FILTER',\n  filter,\n});\n\n// Action Constants\nexport const ACTION_TYPES = {\n  API_ERROR,\n  GET_API,\n  SET_API,\n  SET_BLOCKCHAIN,\n  GET_BLOCKCHAIN,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n};\n","// Action Types\nconst GET_PERCENT_LOADED = 'GET_PERCENT_LOADED';\nconst LOADING = 'LOADING';\nconst SET_PERCENT_LOADED = 'SET_PERCENT_LOADED';\n\n// Action Creators\nexport const getPercentLoaded = () => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_PERCENT_LOADED,\n      payload,\n    });\n  };\n};\n\nexport const setPercentLoaded = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_PERCENT_LOADED,\n      payload,\n    });\n  };\n};\n\nexport const setLoading = () => {\n  return (dispatch) => {\n    dispatch({\n      type: LOADING,\n      payload: true,\n    });\n  };\n};\n\nexport const setLoaded = () => {\n  return (dispatch) => {\n    dispatch({\n      type: LOADING,\n      payload: false,\n    });\n  };\n};\n\n// Action Constants\nexport const ACTION_TYPES = {\n  GET_PERCENT_LOADED: 'GET_PERCENT_LOADED',\n  SET_PERCENT_LOADED: 'SET_PERCENT_LOADED',\n  LOADING: 'LOADING',\n};\n","// Action Types\nconst SET_CURRENCY = 'SET_CURRENCY';\nconst GET_CURRENCY = 'GET_CURRENCY';\nconst SET_GENESIS_BLOCK = 'SET_GENESIS_BLOCK';\nconst GET_GENESIS_BLOCK = 'GET_GENESIS_BLOCK';\nconst SET_CURRENT_BLOCK = 'SET_CURRENT_BLOCK';\nconst GET_CURRENT_BLOCK = 'GET_CURRENT_BLOCK';\nconst SET_ENDPOINT = 'SET_ENDPOINT';\nconst GET_ENDPOINT = 'GET_ENDPOINT';\nconst SET_LAST_BLOCK = 'SET_LAST_BLOCK';\nconst GET_LAST_BLOCK = 'GET_LAST_BLOCK';\nconst SET_LAST_FINALIZED_BLOCK = 'SET_LAST_FINALIZED_BLOCK';\nconst GET_LAST_FINALIZED_BLOCK = 'GET_LAST_FINALIZED_BLOCK';\nconst SET_BLOCK_HASH = 'SET_BLOCK_HASH';\nconst GET_BLOCK_HASH = 'GET_BLOCK_HASH';\nconst SET_BLOCK_NUMBER = 'SET_BLOCK_NUMBER';\nconst GET_BLOCK_NUMBER = 'GET_BLOCK_NUMBER';\n\n// Action Creators\nexport const setCurrency = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_CURRENCY,\n      payload,\n    });\n  };\n};\n\nexport const getCurrency = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_CURRENCY,\n      payload,\n    });\n  };\n};\n\nexport const getEndpoint = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_ENDPOINT,\n      payload,\n    });\n  };\n};\n\nexport const setEndpoint = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_ENDPOINT,\n      payload,\n    });\n  };\n};\n\nexport const setGenesisBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_GENESIS_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getGenesisBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_GENESIS_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setCurrentBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_CURRENT_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getCurrentBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_CURRENT_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setLastBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_LAST_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getLastBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_LAST_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setLastFinalizedBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_LAST_FINALIZED_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const getLastFinalizedBlock = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_LAST_FINALIZED_BLOCK,\n      payload,\n    });\n  };\n};\n\nexport const setBlockHash = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_BLOCK_HASH,\n      payload,\n    });\n  };\n};\n\nexport const getBlockHash = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_BLOCK_HASH,\n      payload,\n    });\n  };\n};\n\nexport const setBlockNumber = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_BLOCK_NUMBER,\n      payload,\n    });\n  };\n};\n\nexport const getBlockNumber = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: GET_BLOCK_NUMBER,\n      payload,\n    });\n  };\n};\n\nexport const tempFilter = (filter) => ({\n  type: 'TEMP_FILTER',\n  filter,\n});\n\n// Action Constants\nexport const ACTION_TYPES = {\n  SET_CURRENCY,\n  GET_CURRENCY,\n  SET_GENESIS_BLOCK,\n  GET_GENESIS_BLOCK,\n  SET_CURRENT_BLOCK,\n  GET_CURRENT_BLOCK,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n  SET_LAST_BLOCK,\n  GET_LAST_BLOCK,\n  SET_LAST_FINALIZED_BLOCK,\n  GET_LAST_FINALIZED_BLOCK,\n  SET_BLOCK_HASH,\n  GET_BLOCK_HASH,\n  SET_BLOCK_NUMBER,\n  GET_BLOCK_NUMBER,\n};\n","// Action Types\nconst ADD_COLUMNS = 'ADD_COLUMN';\nconst ADD_ROW = 'ADD_ROW';\nconst ADD_ROWS = 'ADD_ROWS';\nconst CLEAR_TABLE = 'CLEAR_TABLE';\nconst SET_COLUMNS = 'SET_COLUMNS';\n\n// Action Creators\n// export const addColumn = (payload) => {\n//   return {\n//     type: ADD_COLUMN,\n//     payload,\n//   };\n// };\n\n// export const addRow = (payload) => {\n//   console.log(payload);\n//   return {\n//     type: ADD_ROW,\n//     payload,\n//   };\n// };\n\n// // These are functions that will create and then dispatch an action.\nexport const addColumns = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_COLUMNS,\n      payload,\n    });\n  };\n};\n\nexport const setColumns = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_COLUMNS,\n      payload,\n    });\n  };\n};\n\nexport const addRow = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_ROW,\n      payload,\n    });\n  };\n};\n\nexport const addRows = (payload) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_ROWS,\n      payload,\n    });\n  };\n};\n\nexport const clearTable = () => {\n  return (dispatch) => {\n    dispatch({\n      type: CLEAR_TABLE,\n    });\n  };\n};\n\n// Action Filters\nexport const setColumnFilter = (filter) => ({\n  type: 'SET_COLUMN_FILTER',\n  filter,\n});\n\nexport const setRowFilter = (filter) => ({\n  type: 'SET_ROW_FILTER',\n  filter,\n});\n\n// Action Constants\nexport const ACTION_TYPES = {\n  ADD_COLUMNS,\n  ADD_ROW,\n  ADD_ROWS,\n  CLEAR_TABLE,\n  SET_COLUMNS,\n};\n","import { apiActions } from '../actions';\n\nconst {\n  API_ERROR,\n  GET_API,\n  SET_API,\n  SET_BLOCKCHAIN,\n  GET_BLOCKCHAIN,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n} = apiActions.ACTION_TYPES;\n\nconst api = (state = {}, action) => {\n  switch (action.type) {\n    case API_ERROR:\n      return state;\n    case GET_API:\n      return state;\n    case SET_API:\n      return action.payload; // Might want to return pending promise so we can resolve it any time we want to re-access it.\n    default:\n      return state;\n  }\n};\n\nconst blockchain = (state = 'Polkadot', action) => {\n  switch (action.type) {\n    case GET_BLOCKCHAIN:\n      return state;\n    case SET_BLOCKCHAIN:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst endpoint = (state = 'wss://rpc.polkadot.io', action) => {\n  switch (action.type) {\n    case GET_ENDPOINT:\n      return state;\n    case SET_ENDPOINT:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default {\n  api,\n  blockchain,\n  endpoint,\n};\n","import { loadingActions } from '../actions';\n\nconst { GET_PERCENT_LOADED, LOADING, SET_PERCENT_LOADED } =\n  loadingActions.ACTION_TYPES;\n\nconst loading = (state = true, action) => {\n  switch (action.type) {\n    case LOADING:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst percentLoaded = (state = 25, action) => {\n  switch (action.type) {\n    case SET_PERCENT_LOADED:\n      return action.payload;\n    case GET_PERCENT_LOADED:\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default { loading, percentLoaded };\n","import { polkadotActions } from '../actions';\n\n// blockchain: 'Polkadot',\n\nconst {\n  SET_CURRENCY,\n  GET_CURRENCY,\n  SET_GENESIS_BLOCK,\n  GET_GENESIS_BLOCK,\n  SET_CURRENT_BLOCK,\n  GET_CURRENT_BLOCK,\n  SET_ENDPOINT,\n  GET_ENDPOINT,\n  SET_LAST_BLOCK,\n  GET_LAST_BLOCK,\n  SET_LAST_FINALIZED_BLOCK,\n  GET_LAST_FINALIZED_BLOCK,\n  SET_BLOCK_HASH,\n  GET_BLOCK_HASH,\n  SET_BLOCK_NUMBER,\n  GET_BLOCK_NUMBER,\n} = polkadotActions.ACTION_TYPES;\n\nconst block = (\n  state = {\n    endBlock: 2,\n    genesisBlock: 0,\n    lastBlock: 0,\n    lastFinalizedBlock: 0,\n    startBlock: 1,\n  },\n  action,\n) => {\n  switch (action.type) {\n    case SET_GENESIS_BLOCK:\n      return state;\n    case GET_GENESIS_BLOCK:\n      return state;\n    case SET_CURRENT_BLOCK:\n      return state;\n    case GET_CURRENT_BLOCK:\n      return state;\n    case SET_BLOCK_HASH:\n      return state;\n    case GET_BLOCK_HASH:\n      return state;\n    case SET_LAST_BLOCK:\n      return state;\n    case GET_LAST_BLOCK:\n      return state;\n    case SET_LAST_FINALIZED_BLOCK:\n      return state;\n    case GET_LAST_FINALIZED_BLOCK:\n      return state;\n    case SET_BLOCK_NUMBER:\n      return state;\n    case GET_BLOCK_NUMBER:\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst currency = (state = 'DOT', action) => {\n  switch (action.type) {\n    case SET_CURRENCY:\n      return state;\n    case GET_CURRENCY:\n      return state;\n    default:\n      return state;\n  }\n};\n\nconst endpoint = (state = { endpoint: 'wss://rpc.polkadot.io' }, action) => {\n  switch (action.type) {\n    case SET_ENDPOINT:\n      return state;\n    case GET_ENDPOINT:\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default {\n  block,\n  currency,\n  endpoint,\n};\n","import { tableActions } from '../actions';\n\nconst { ADD_COLUMNS, ADD_ROW, ADD_ROWS, CLEAR_TABLE, SET_COLUMNS } =\n  tableActions.ACTION_TYPES;\n\n// Reducers are just functions that return a state. These functions are passed 2 arguments: + initial state & + the action associated with this payload\nconst columns = (state = { columns: [] }, action) => {\n  // We read the action and then return the appropriate state. (THIS IS WHERE WE MODIFY STATE)\n  switch (action.type) {\n    case ADD_COLUMNS:\n      return [...state, ...action.payload];\n    case SET_COLUMNS:\n      return action.payload;\n    default:\n      return state; // We typically just return the original state if none of the action types match.\n  }\n};\n\nlet rowId = 0;\n\nconst rows = (state = { rows: [] }, action) => {\n  const { rows } = state;\n  switch (action.type) {\n    case ADD_ROW:\n      const key = `${++rowId}`;\n      // console.log(`key = ${key}`);\n      // console.log(action.payload);\n      action.payload.key = key;\n      return { rows: [...rows, action.payload] };\n    case ADD_ROWS:\n      return { rows: [...rows, action.payload] };\n    case CLEAR_TABLE:\n      return { rows: [] };\n    default:\n      return state;\n  }\n};\n\nexport default {\n  columns,\n  rows,\n};\n","import { combineReducers } from 'redux';\n\nimport apiReducers from './apiReducers';\nimport loadingReducers from './loadingReducers';\nimport polkadotReducers from './polkadotReducers';\nimport tableReducers from './tableReducers';\n\n// https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers\n\nconst reducers = {\n  apiReducers: combineReducers(apiReducers),\n  loadingReducers: combineReducers(loadingReducers),\n  polkadotReducers: combineReducers(polkadotReducers),\n  tableReducers: combineReducers(tableReducers),\n};\n\n// const combinedReducers = () => {\n//   combineReducers(reducers);\n// };\n\nexport default combineReducers(reducers);\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport combinedReducers from './reducers';\n\nconst initialState = {\n  // loading: { percentLoaded: 0 },\n  // polkadot: {\n  //   block: {},\n  //   currency: 'DOT',\n  //   currentBlock: 0,\n  //   endBlock: 0,\n  //   endpoint: 'wss://rpc.polkadot.io',\n  //   lastBlock: 0,\n  //   startBlock: 0,\n  // },\n  // table: {\n  //   columns: [],\n  //   rows: [],\n  // },\n};\n\nexport function configureStore(initialState = {}) {\n  const store = createStore(\n    combinedReducers,\n    initialState,\n    applyMiddleware(thunk),\n  );\n  return store;\n}\n\nconst store = configureStore(initialState);\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\n// store.subscribe(() => console.log(store.getState()));\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\n// store.dispatch({ type: 'counter/incremented' });\n// // {value: 1}\n// store.dispatch({ type: 'counter/incremented' });\n// // {value: 2}\n// store.dispatch({ type: 'counter/decremented' });\n// {value: 1}\n\nconsole.log(store.getState());\n\nexport default store;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Layout, Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst AppHeader = (props) => {\n  const { className, style } = props;\n  const { Header } = Layout;\n  return (\n    <Header className={className} style={style}>\n      <Title style={{ margin: '1rem', textAlign: 'center' }}>Kevin Scan</Title>\n    </Header>\n  );\n};\n\n// AppHeader.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// AppHeader.defaultProps = {\n//   array: [''],\n// };\n\nexport default AppHeader;\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Progress, Row } from 'antd';\n\nclass Loader extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { percentLoaded } = props;\n    return { percentLoaded };\n  }\n\n  render() {\n    const { percentLoaded } = this.state;\n    return (\n      <Row>\n        <p style={{ textAlign: 'center' }}>Loading...</p>\n        <Progress\n          percent={percentLoaded}\n          status={true ? 'active' : 'inactive'}\n        />\n      </Row>\n    );\n  }\n}\n\n// Loader.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// Loader.defaultProps = {\n//   array: [''],\n// };\n\nconst mapStateToProps = (state) => {\n  const { loadingReducers } = state;\n  const { percentLoaded } = loadingReducers;\n  return { percentLoaded };\n};\n\nexport default connect(mapStateToProps)(Loader);\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  tableActions,\n  formActions,\n  loadingActions,\n  polkadotActions,\n} from '../state/actions';\nimport {\n  Button,\n  Col,\n  Divider,\n  Dropdown,\n  Form,\n  Input,\n  InputNumber,\n  Menu,\n  Row,\n  Tooltip,\n} from 'antd';\nimport {\n  AppstoreFilled,\n  CodeFilled,\n  CodepenSquareFilled,\n  InteractionFilled,\n  PlaySquareFilled,\n  PlusSquareFilled,\n  RightSquareFilled,\n  WalletFilled,\n  BorderOuterOutlined,\n  CaretDownOutlined,\n  DashboardOutlined,\n  DownCircleOutlined,\n  DownSquareOutlined,\n  UserOutlined,\n  ApiTwoTone,\n  BankTwoTone,\n  CompassTwoTone,\n  FireTwoTone,\n  FrownTwoTone,\n  HddTwoTone,\n  HeartTwoTone,\n  RocketTwoTone,\n  SaveTwoTone,\n  SettingTwoTone,\n  ThunderboltTwoTone,\n} from '@ant-design/icons';\n\nconst { addColumns, addRow, addRows, clearTable, setColumns } = tableActions;\nconst { setLoaded, setLoading, setPercentLoaded } = loadingActions;\n\nconst DEBUG = false;\n\nclass DataInput extends Component {\n  inputForm = React.createRef();\n\n  constructor(props) {\n    super(props);\n    this.clickListener = this.clickListener.bind(this);\n    this.subscribeToBlocks = this.subscribeToBlocks.bind(this);\n    this.unsubscribeToBlocks = this.unsubscribeToBlocks.bind(this);\n\n    // DEBUGGING FUNCTIONS\n    this.log = this.log.bind(this);\n    this.misc = this.misc.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      api,\n      blockchain,\n      endBlock,\n      endpoint,\n      genesisBlock,\n      lastBlock,\n      lastFinalizedBlock,\n      loading,\n      percentLoaded,\n      startBlock,\n    } = props;\n    return {\n      api,\n      blockchain,\n      endBlock,\n      endpoint,\n      genesisBlock,\n      lastBlock,\n      lastFinalizedBlock,\n      loading,\n      percentLoaded,\n      startBlock,\n    };\n  }\n\n  componentDidMount() {\n    console.log('Form.jsx - componentDidMount()');\n    const { api } = this.state;\n    if (api.type) {\n      this.props.setPercentLoaded(100);\n      this.props.setLoaded();\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('Form.jsx - componentDidUpdate()');\n    // const { api } = this.state;\n    // if (api.type) {\n    //   this.props.setPercentLoaded(100);\n    //   this.props.setLoaded();\n    // }\n  }\n\n  async dropdownListener(event) {\n    // console.log(event);\n  }\n\n  async clickListener(event) {\n    console.clear();\n    this.props.setLoading();\n    const clear = await this.props.clearTable();\n    const { api } = this.state;\n    if (api.type) {\n      const test = await this.buildTableObjects();\n    }\n  }\n\n  async buildTableObjects() {\n    let columns = [];\n\n    const form = this.inputForm.current;\n    const endpoint =\n      parseInt(form.getFieldValue('endpoint')) || this.state.endpoint;\n\n    const startBlock = parseInt(form.getFieldValue('startBlock')) || 0;\n    const startBlockData = await this.getBlockData(startBlock);\n    const endBlock = parseInt(form.getFieldValue('endBlock')) || 0;\n    const endBlockData = await this.getBlockData(endBlock);\n    const blockDifference = endBlock - startBlock;\n    const percentTicker = 100 / blockDifference;\n    let rows = [];\n    for (let i = 0; i <= blockDifference; i++) {\n      const blockHash = await this.getHashFromNumber(startBlock + i);\n\n      const blockEvents = await this.getEventsFromHash(blockHash);\n      const formattedEvents = await this.parseEventData(blockEvents);\n      // rows = [...rows, { block: formattedEvents }];\n      // this.props.addRow({ block: formattedEvents });\n      // this.props.addRow(formattedEvents);\n\n      formattedEvents.forEach((item, index) => {\n        // item.key = `${i + item.blockNumber + index}`;\n        // console.log(`item.key = ${item.key}`);\n        this.props.addRow(item); // TODO: So this is being called more than once per row because 1 block may have multiple children. Maybe we need... yes ANOTHER loop here to handle sub-rows / children?\n      });\n\n      const keys = [];\n      Object.keys(formattedEvents[0]).forEach((key) => {\n        switch (key) {\n          case 'arguments':\n          case 'key':\n            return;\n          default:\n            keys.push({\n              title: `${key.toLocaleUpperCase()}`, // https://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n              dataIndex: `${key}`,\n              key: `${key}`,\n            });\n        }\n      });\n      columns = keys;\n\n      // const percentLoaded = Math.round((i * percentTicker + Number.EPSILON) * 100) / 100;\n      // this.props.setPercentLoaded(percentLoaded);\n    }\n    this.props.setColumns(columns);\n    // this.props.addRows(rows);\n    this.props.setPercentLoaded(100);\n    this.props.setLoaded();\n  }\n\n  async parseEventData(events) {\n    const eventData = [];\n    const hash = events.createdAtHash;\n    const blockHeader = await this.getBlockHeaderFromHash(hash);\n    const blockNumber = await this.getBlockNumberFromHash(hash);\n    const blockTime = await this.getTimeFromHash(hash);\n    const eventObject = {\n      blockNumber,\n      events: [],\n    };\n    for (const item of events) {\n      const { data, index, meta, method, section } = item.get('event'); // Missing size\n      const { phase } = item;\n      const [readable] = data.toHuman();\n      const metadata = data.meta;\n      const { args, docs, isEmpty, name, registry, Type } = meta; // Missing size\n      const [eventId] = phase.asApplyExtrinsic.words;\n      const author = await blockHeader.author;\n      eventObject.events.push({\n        // author,\n        // timestamp: blockTime.toISOString(),\n        eventId: `${blockNumber}-${eventId}`,\n        event: `${section}.${method}`,\n        extraData: [readable.class, readable.paysFee, readable.weight],\n      });\n    }\n    eventData.push(eventObject);\n\n    const test = events\n      .filter(\n        (test) => {\n          const { phase } = test;\n          // console.log(phase.asApplyExtrinsic);\n          phase.isApplyExtrinsic;\n          // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq();\n        },\n        // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index), // Need \"index\" from forEach\n      )\n      .map((test) => {\n        const { event } = test;\n        return `${event.section}.${event.method}`;\n      });\n    console.log(eventData);\n    return eventData;\n  }\n\n  async subscribeToBlocks() {\n    const { api } = this.state;\n    const { derive, rpc } = api;\n    const block = await rpc.chain.getBlock();\n    const header = block.block.header;\n    derive.chain.subscribeNewHeads((header) => {\n      const { subscribe } = this.state;\n      if (subscribe) {\n        console.log(\n          `Block Number#${header.number}\\tBlock Author: ${header.author}`,\n        );\n      }\n    });\n  }\n\n  async getBlockData(blockNumber) {\n    const { api } = this.state;\n    const hash = await this.getHashFromNumber(blockNumber);\n    const { block } = await this.getBlockFromHash(hash);\n    const events = await this.getEventsFromHash(hash);\n    const time = await this.getTimeFromHash(hash);\n    const extrinsics = block?.extrincs;\n    // const {\n    //   isSigned,\n    //   meta,\n    //   method: { args, method, section },\n    // } = ex;\n    return {\n      block,\n      hash,\n      events,\n      time,\n    };\n  }\n\n  unsubscribeToBlocks() {\n    this.setState({ subscribe: false });\n  }\n\n  printDocumentation({ docs }) {\n    console.log(`Documentation:\\n${docs.map((d) => d.toString()).join('\\n')}`);\n  }\n\n  async getLastFinalizedBlockNumber() {\n    const { api } = this.state;\n    const { derive, query } = api;\n    const { chain } = derive;\n    return chain.bestNumberFinalized();\n  }\n\n  async getBlockNumberFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      return parseInt(blockData.block.header.number.toString());\n    }\n    return 0;\n  }\n\n  async getHashFromNumber(number) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockHash = await chain.getBlockHash(number);\n      return blockHash;\n    }\n    return 0;\n  }\n\n  async getBlockFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      const test = blockData.block.extrincs;\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getBlockHeaderFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getHeader(hash);\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getTimeFromHash(hash) {\n    let temp;\n    const { api, lastBlock, lastFinalizedBlock } = this.state;\n    if (api.type) {\n      const deriveChain = api.derive.chain;\n      const rpcChain = api.rpc.chain;\n      const { block } = await rpcChain.getBlock(hash);\n      // const block = await api.query.getBlock(hash);\n      const timestamp = api.query.timestamp;\n      const didUpdate = await timestamp.didUpdate();\n      const blockchainTimestamp = await timestamp.now(); // Try subtracting todays date from this date?\n      let timeDifference;\n      const [parsedBlockchainTimestamp] = blockchainTimestamp.words;\n      const blockchainTime = new Date(parsedBlockchainTimestamp);\n      const currentTime = new Date();\n      const diff1 = currentTime - parsedBlockchainTimestamp;\n      const diff2 = parsedBlockchainTimestamp - currentTime;\n      const diff3 =\n        currentTime -\n        blockchainTimestamp.words[0] * blockchainTimestamp.words[1];\n      // TODO: Fix timestamp here.\n      const time1 = new Date(diff1);\n      const time2 = new Date(diff2);\n      const time3 = new Date(diff3);\n      return time1;\n    }\n  }\n\n  async getEventsFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { query } = api;\n      const { system } = query;\n      const { events } = system;\n      // const {\n      //   at,\n      //   creator,\n      //   hash,\n      //   is,\n      //   key,\n      //   meta,\n      //   method,\n      //   multi,\n      //   range,\n      //   size,\n      //   sizeAt,\n      //   toJson,\n      // } = events;\n      const event = await events.at(hash);\n      return event;\n    }\n    return {};\n  }\n\n  async parseEventDataAlt(events) {\n    const hash = events.createdAtHash;\n    const blockHeader = await this.getBlockHeaderFromHash(hash);\n    const blockNumber = await this.getBlockNumberFromHash(hash);\n    const blockTime = await this.getTimeFromHash(hash);\n    const eventData = {\n      blockNumber,\n      children: [],\n      timestamp: blockTime.toISOString(),\n    };\n    for (const item of events) {\n      const { data, index, meta, method, section } = item.get('event'); // Missing size\n      const { phase } = item;\n      const [readable] = data.toHuman();\n      const metadata = data.meta;\n      const { args, docs, isEmpty, name, registry, Type } = meta; // Missing size\n      const [eventId] = phase.asApplyExtrinsic.words;\n      const author = await blockHeader.author;\n      eventData.children.push({\n        arguments: args.toHuman(),\n        // blockAuthor: blockHeader.author,\n        eventId: `${blockNumber}-${eventId}`,\n        event: `${section}.${method}`,\n      });\n    }\n\n    const test = events\n      .filter(\n        (test) => {\n          const { phase } = test;\n          // console.log(phase.asApplyExtrinsic);\n          phase.isApplyExtrinsic;\n          // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq();\n        },\n        // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index), // Need \"index\" from forEach\n      )\n      .map((test) => {\n        const { event } = test;\n        return `${event.section}.${event.method}`;\n      });\n    return [eventData];\n  }\n\n  menu = (\n    <Menu\n      onClick={(event) => {\n        // TODO: Make this items below 1 component with a loop or something?\n        // const {domEvent, key, keyPath} = event;\n        // const {target  } = domEvent;\n        // const { innerText } =target.domEvent;\n        // console.log(innerText);\n      }}>\n      <Menu.Item\n        key=\"1\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Avalanche',\n            endpoint: 'ws://NEED_URL:9650/ext/bc/C/ws',\n          });\n        }}\n        icon={<RocketTwoTone />}>\n        Avalanche\n      </Menu.Item>\n      <Menu.Item\n        key=\"2\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Binance Smart Chain',\n            endpoint: 'wss://bsc-ws-node.nariox.org:443',\n          });\n        }}\n        icon={<BankTwoTone />}>\n        Binance Smart Chain\n      </Menu.Item>\n      <Menu.Item\n        key=\"3\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Ethereum',\n            endpoint: 'wss://mainnet.infura.io/ws',\n          });\n        }}\n        icon={<CompassTwoTone />}>\n        Ethereum\n      </Menu.Item>\n      <Menu.Item\n        key=\"4\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Polygon',\n            endpoint: 'wss://socket.polygon.io/stocks',\n          });\n        }}\n        icon={<SettingTwoTone />}>\n        Polygon\n      </Menu.Item>\n      <Menu.Item\n        key=\"5\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Polkadot',\n            endpoint: 'wss://rpc.polkadot.io',\n          });\n        }}\n        icon={<HeartTwoTone />}>\n        Polkadot\n      </Menu.Item>\n      <Menu.Item\n        key=\"6\"\n        onClick={(item) => {\n          console.log(item);\n          this.setState({\n            blockchain: 'Solana',\n            endpoint: 'wss://api.devnet.solana.com/',\n          });\n        }}\n        icon={<ThunderboltTwoTone />}>\n        Solana\n      </Menu.Item>\n    </Menu>\n  );\n\n  log(clickEvent) {\n    console.log('props:');\n    console.log(this.props);\n    console.log('state:');\n    console.log(this.state);\n  }\n\n  misc(clickEvent) {\n    console.log(clickEvent);\n    this.props.clearTable();\n  }\n\n  render() {\n    const { blockchain, endBlock, endpoint, lastBlock, loading, startBlock } =\n      this.state; // TODO: Add a state for Subscribe that'll be used to stream new data from blockchain.\n\n    const formLayout = 'horizontal';\n\n    const formItemLayout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (\n      <Form\n        name=\"blockchainData\"\n        {...formItemLayout}\n        layout={formLayout}\n        initialValues={{\n          endpoint,\n          startBlock,\n          endBlock: endBlock ? endBlock : lastBlock,\n        }}\n        ref={this.inputForm}\n        scrollToFirstError={true}\n        colon={false}>\n        <Divider orientation=\"left\">Blockchain Info</Divider>\n        <Row align=\"middle\" flex=\"auto\" justify=\"center\">\n          <Col flex={1}>\n            <Dropdown.Button\n              overlay={this.menu}\n              buttonsRender={([leftButton, rightButton]) => [\n                <Tooltip title=\"Blockchain choice\" key=\"leftButton\">\n                  {leftButton}\n                </Tooltip>,\n                React.cloneElement(rightButton, {\n                  icon: <CaretDownOutlined />,\n                  loading: false,\n                }),\n              ]}>\n              {blockchain}\n            </Dropdown.Button>\n          </Col>\n          <Col flex={2}>\n            <Form.Item\n              label=\"Endpoint\"\n              name=\"endpoint\"\n              tooltip={'Blockchain Endpoint URL'}\n              // extra=\"EXTRA\"\n              // help=\"HELP\"\n              // initialValue={endpoint}\n              // fields={} // For Redux form state management\n              // value=\"Endpoint Value\"\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Please input the endpoint you would lke to request blockchain data from.',\n                },\n              ]}\n              // trigger=\"endpoint\"\n              shouldUpdate={(previousValue, newValue) => {\n                // console.log(previousValue);\n                // console.log(newValue);\n                if (previousValue != newValue) {\n                  return true;\n                }\n                return false;\n              }}\n              required={true}>\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Blocks</Divider>\n        <Row flex=\"auto\" justify=\"center\">\n          <Col flex={1}>\n            <Form.Item\n              label=\"Start Block\"\n              name=\"startBlock\"\n              tooltip={'Beginning block range'}\n              hasFeedback={true}\n              labelAlign=\"left\"\n              preserve={true}\n              rules={[\n                {\n                  required: true,\n                  message: `Start Block is a required field.`,\n                },\n                {\n                  type: 'number',\n                  min: 1,\n                  max: Number.MAX_SAFE_INTEGER,\n                  message:\n                    'Value must be greater than 0 and less than 9,007,199,254,740,991. (Maximum integer value)',\n                },\n                ({\n                  getFieldInstance,\n                  getFieldValue,\n                  getFieldsValue,\n                  isFieldTouched,\n                  isFieldValidating,\n                  resetFields,\n                  scrollToField,\n                  submit,\n                }) => ({\n                  validator(rule, value) {\n                    const { startBlock, endBlock } = getFieldsValue();\n                    if (startBlock < endBlock) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\n                      new Error('Start Block must be less than End Block.'),\n                    );\n                  },\n                }),\n              ]}\n              trigger=\"onChange\"\n              required={true}>\n              <InputNumber\n                addonAfter={<AppstoreFilled />}\n                controls={true}\n                min={1}\n                // max={endBlock - 1 >= 1 ? endBlock - 1 : Number.MAX_SAFE_INTEGER}\n                style={{ width: '100%' }}\n              />\n            </Form.Item>\n          </Col>\n          <Col flex={1}>\n            <Form.Item\n              label=\"End Block\"\n              labelAlign=\"left\"\n              name=\"endBlock\"\n              tooltip={'Ending block range'}\n              hasFeedback={true}\n              preserve={true}\n              validateFirst={true}\n              rules={[\n                {\n                  type: 'number',\n                  min: 1,\n                  max: Number.MAX_SAFE_INTEGER,\n                  message:\n                    'Value must be greater than 0 and less than 9,007,199,254,740,991. (Maximum integer value)',\n                },\n                {\n                  required: true,\n                  message: `End Block is a required field.`,\n                },\n                ({\n                  getFieldInstance,\n                  getFieldValue,\n                  getFieldsValue,\n                  isFieldTouched,\n                  isFieldValidating,\n                  resetFields,\n                  scrollToField,\n                  submit,\n                }) => ({\n                  validator(rule, value) {\n                    const { startBlock, endBlock } = getFieldsValue();\n                    if (endBlock > startBlock) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\n                      new Error('End Block must be greater than Start Block.'),\n                    );\n                  },\n                }),\n              ]}\n              // messageVariables={}\n              // shouldUpdate={(previousState, newState) => {\n              //   if (newState.startBlock <= 0) {\n              //     return false;\n              //   }\n              //   return true;\n              // }}\n              // normalize={(value, prevValue, prevValues) => {\n              //   // console.log('normalize()');\n              //   return value;\n              // }}\n              trigger=\"onChange\"\n              required={true}>\n              <InputNumber\n                addonAfter={<AppstoreFilled />}\n                controls={true}\n                min={1}\n                // max={endBlock - 1 >= 1 ? endBlock - 1 : Number.MAX_SAFE_INTEGER}\n                style={{ width: '100%' }}\n                // parser={(item) => {\n                //   return item;\n                // }}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Actions</Divider>\n        <Row flex=\"auto\" guter={10} justify=\"center\">\n          <Col flex={2}>\n            {/* <Row gutter={{ xs: 8, sm: 16, md: 25, lg: 32 }}> */}\n            {/* <Form.Item {...buttonItemLayout}> */}\n            <Button\n              className=\"scan_button\"\n              type=\"primary\"\n              htmlType=\"submit\"\n              onClick={this.clickListener}\n              block={true}\n              disabled={loading}>\n              Scan\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button\n              type=\"default\"\n              onClick={this.subscribeToBlocks}\n              block={true}\n              disabled={loading}>\n              Subscribe\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button\n              type=\"default\"\n              onClick={this.unsubscribeToBlocks}\n              span={1}\n              block={true}\n              disabled={loading}>\n              Unsubscribe\n            </Button>\n          </Col>\n        </Row>\n        <Divider orientation=\"left\">Debugging Buttons</Divider>\n        <Row flex=\"auto\" guter={10} justify=\"center\">\n          <Col flex={1}>\n            <Button type=\"default\" onClick={this.log} span={1} block={true}>\n              LOG\n            </Button>\n          </Col>\n          <Col flex={1}>\n            <Button type=\"default\" onClick={this.misc} span={1} block={true}>\n              MISC\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\n// DataInput.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// DataInput.defaultProps = {\n//   array: [''],\n// };\n\nconst mapStateToProps = (state) => {\n  const { apiReducers, loadingReducers, polkadotReducers } = state;\n  const { api, blockchain, endpoint } = apiReducers;\n  const { block } = polkadotReducers;\n  const { endBlock, genesisBlock, lastBlock, lastFinalizedBlock, startBlock } =\n    block;\n  const { loading, percentLoaded } = loadingReducers;\n  return {\n    api,\n    blockchain,\n    endBlock,\n    endpoint,\n    genesisBlock,\n    lastBlock,\n    lastFinalizedBlock,\n    loading,\n    percentLoaded,\n    startBlock,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  // Are these actually state because there's multiple & they constantly change?\n  // setCurrentBlock\n  // setLastBlock\n  // setLastFinalizedBlock\n  // setBlockHash\n  // setBlockNumber\n  return {\n    addColumns: (data) => {\n      dispatch(addColumns(data));\n    },\n    addRow: (data) => {\n      dispatch(addRow(data));\n    },\n    addRows: (data) => {\n      dispatch(addRows(data));\n    },\n    clearTable: () => {\n      dispatch(clearTable());\n    },\n    setColumns: (data) => {\n      dispatch(setColumns(data));\n    },\n    setLoaded: () => {\n      dispatch(setLoaded());\n    },\n    setLoading: () => {\n      dispatch(setLoading());\n    },\n    setPercentLoaded: (data) => {\n      dispatch(setPercentLoaded(data));\n    },\n  };\n};\n\n// export default DataInput;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataInput);\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadingActions, tableActions } from '../state/actions';\nimport { Table } from 'antd';\nimport {\n  AppstoreFilled,\n  CodeFilled,\n  CodepenSquareFilled,\n  InteractionFilled,\n  PlaySquareFilled,\n  PlusSquareFilled,\n  RightSquareFilled,\n  WalletFilled,\n  BorderOuterOutlined,\n  CaretDownOutlined,\n  DashboardOutlined,\n  DownCircleOutlined,\n  DownSquareOutlined,\n  UserOutlined,\n  ApiTwoTone,\n  BankTwoTone,\n  CompassTwoTone,\n  FireTwoTone,\n  FrownTwoTone,\n  HddTwoTone,\n  HeartTwoTone,\n  RocketTwoTone,\n  SaveTwoTone,\n  SettingTwoTone,\n  ThunderboltTwoTone,\n} from '@ant-design/icons';\n\nconst { addColumns, addRows } = tableActions;\nconst { setLoaded, setLoading, setPercentLoaded } = loadingActions;\n\nclass DataDisplay extends Component {\n  constructor(props) {\n    super(props);\n    // this.table = React.createRef();\n    this.populateTable = this.populateTable.bind(this);\n    this.createFilters = this.createFilters.bind(this);\n    this.populateEventFilter = this.populateEventFilter.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { api, columns, loading, percentLoaded, rows } = props;\n    return {\n      api,\n      columns: columns.columns,\n      loading,\n      percentLoaded,\n      rows: rows.rows,\n    };\n  }\n\n  componentDidMount() {\n    console.log('Table.jsx - componentDidMount()');\n    this.props.setPercentLoaded(100);\n    this.props.setLoaded();\n  }\n\n  componentDidUpdate() {\n    console.log('Table.jsx - componentDidUpdate()');\n    const { api } = this.state;\n    // if (api.type) {\n    //   this.props.setPercentLoaded(100);\n    //   this.props.setLoaded();\n    // }\n  }\n\n  createFilters = (columns) => {\n    const { rows } = this.state;\n    // TODO: Finish the dynamic creation of filters.\n    // let uniqueKeysAndValues = {};\n    columns.map((column) => {\n      // data.forEach.bind(column)((item) => {\n      //   console.log(item);\n      //   fieldValues.add(item);\n      // });\n      for (const row of rows) {\n        // const uniqueValues = new Set(); // Check for value in Set: fieldValues.has('');\n        // Object.entries(row).forEach(([key, value]) => {\n        //   uniqueKeysAndValues.key = uniqueValues.add(value);\n        //   console.log(key);\n        // });\n        switch (column.key) {\n          case 'blockNumber':\n            column.sorter = (a, b) => {\n              // return a.blockNumber - b.blockNumber;\n              return a;\n            };\n            column.sortDirections = ['ascend', 'descend'];\n          case 'event':\n            // column.filters = [\n            //   {\n            //     text: 'TEST',\n            //     value: 'WORKING',\n            //     children: [\n            //       {\n            //         text: 'Green',\n            //         value: 'Green',\n            //       },\n            //       {\n            //         text: 'Black',\n            //         value: 'Black',\n            //       },{}\n            //     ],\n            //   },\n            // ];\n            const filter = `${row.event}`;\n            column.filters = [\n              {\n                text: filter,\n                value: filter,\n              },\n            ];\n            column.onFilter = (...items) => {\n              // record.name.indexOf(value) === 0;\n              console.log(item);\n            };\n          default:\n            column.render = (args) => {\n              return args;\n            };\n            break;\n        }\n        return column;\n      }\n    });\n  };\n\n  populateEventFilter = (items) => {\n    items.map((item) => {\n      if (item.key == 'event') {\n        item.filters = [\n          {\n            text: `system.ExtrinsicSuccess`,\n            value: 'system.ExtrinsicSuccess',\n          },\n        ];\n        item.onFilter = (value, record) => {\n          const filterCondition = record.event == value;\n          return filterCondition;\n        };\n      }\n      return item;\n    });\n    return items;\n  };\n\n  populateTable() {\n    const { loading, percentLoaded, rows } = this.state;\n    // TODO: Dynamic column creation\n    const mainColumns = [\n      {\n        title: 'BLOCK NUMBER',\n        dataIndex: 'blockNumber',\n        key: 'blockNumber',\n        sorter: (a, b) => {\n          return a.blockNumber - b.blockNumber;\n        },\n        sortDirections: ['ascend', 'descend'],\n      },\n    ];\n    const secondaryColumns = this.populateEventFilter([\n      {\n        title: 'EVENT ID',\n        dataIndex: 'eventId',\n        key: 'eventId',\n      },\n      {\n        title: 'EVENT',\n        dataIndex: 'event',\n        key: 'event',\n      },\n      {\n        title: 'EXTRA DATA',\n        dataIndex: 'extraData',\n        key: 'extraData',\n        render: (text, record, index) => {\n          const data = record.extraData.map((item) => {\n            return <li>{item}</li>;\n          });\n          return <ul>{data}</ul>;\n        },\n      },\n    ]);\n    return (\n      <Table\n        columns={mainColumns}\n        dataSource={rows}\n        expandable={{\n          childrenColumnName: 'children',\n          expandedRowRender: (record, index) => {\n            return (\n              <Table\n                key={index}\n                columns={secondaryColumns}\n                dataSource={record.events}\n                pagination={false}\n              />\n            );\n          },\n          expandIcon: ({ expanded, onExpand, record }) => {\n            if (expanded) {\n              return <AppstoreFilled onClick={(e) => onExpand(record, e)} />;\n            }\n            return <PlusSquareFilled onClick={(e) => onExpand(record, e)} />;\n          },\n          expandRowByClick: true,\n          rowExpandable: (record) => {\n            if (record.events) {\n              return true;\n            }\n            return false;\n          },\n        }}\n        loading={{ spinning: loading }}\n        pagination={\n          true /*TODO: Do this dynamically based on the number of items returned. */\n        }\n        // ref={this.table}\n        // scroll={{ x: false, y: false }}\n        title={() => {\n          return 'Blockchain Data';\n        }}\n      />\n    );\n  }\n\n  render() {\n    /*\n    + (*Optional*) Users should be able to sort events on various columns\n    + (*Optional*) Users should be able to filter events by name\n    */\n    const Table = this.populateTable();\n    return Table;\n  }\n}\n\n// DataDisplay.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// DataDisplay.defaultProps = {\n//   array: [''],\n// };\n\nconst mapStateToProps = (state) => {\n  const { apiReducers, loadingReducers, tableReducers } = state;\n  const { api } = apiReducers;\n  const { loading, percentLoaded } = loadingReducers;\n  const { columns, rows } = tableReducers;\n  return {\n    api,\n    columns,\n    loading,\n    percentLoaded,\n    rows,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setLoaded: () => {\n      dispatch(setLoaded());\n    },\n    setLoading: () => {\n      dispatch(setLoading());\n    },\n    setPercentLoaded: (data) => {\n      dispatch(setPercentLoaded(data));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataDisplay);\n","/* eslint-disable no-unused-vars, react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Layout } from 'antd';\n\nconst DEBUG = false;\n\nconst AppFooter = (props) => {\n  const { style } = props;\n  const { Footer } = Layout;\n  const year = new Date().getFullYear();\n  return (\n    <Footer style={style}>\n      Decentralized Application ©{year} Created by Kevin Loy\n      {/* <p className=\"small-text\">...hire me please :D</p> */}\n    </Footer>\n  );\n};\n\n// AppFooter.propTypes = {\n//   array: PropTypes.arrayOf(PropTypes.string).isRequired,\n// };\n\n// AppFooter.defaultProps = {\n//   array: [''],\n// };\n\nexport default AppFooter;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { apiActions, loadingActions } from './state/actions';\n\nimport { Layout } from 'antd';\nimport './App.css';\n\nimport AppHeader from './components/Header.jsx';\nimport Loader from './components/Loader.jsx';\nimport DataInput from './components/Form.jsx';\nimport DataDisplay from './components/Table.jsx';\nimport AppFooter from './components/Footer.jsx';\n\n// const moralis = require('moralis');\n\nconst { setApi } = apiActions;\nconst { setLoaded, setPercentLoaded } = loadingActions;\n\nconst { Content } = Layout;\n\n// Websockets Article - https://blog.logrocket.com/websockets-tutorial-how-to-go-real-time-with-node-and-react-8e4693fbf843/\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getDerivedStateFromProps(props) {\n    const { api, blockchain, endpoint, loading, percentLoaded, currency } =\n      props;\n    return {\n      api,\n      blockchain,\n      endpoint,\n      loading,\n      percentLoaded,\n      currency,\n    };\n  }\n\n  componentDidMount() {\n    console.log('App.jsx - componentDidMount()');\n    this.props.setApi(this.state.endpoint);\n    this.props.setPercentLoaded(50);\n  }\n\n  componentDidUpdate() {\n    console.log('App.jsx - componentDidUpdate()');\n  }\n\n  render() {\n    const { loading, percentLoaded } = this.state;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Layout className=\"site-layout\">\n          <AppHeader className=\"site-layout-background\" />\n          <Content style={{ margin: '0 1rem' }}>\n            {percentLoaded < 50 ? (\n              <Loader />\n            ) : (\n              <div\n                className=\"site-layout-background\"\n                style={{ padding: 24, minHeight: 360 }}>\n                <DataInput />\n                <DataDisplay />\n              </div>\n            )}\n          </Content>\n          <AppFooter style={{ textAlign: 'center' }} />\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { apiReducers, loadingReducers, polkadotReducers } = state;\n  const { api, blockchain, endpoint } = apiReducers;\n  const { loading, percentLoaded } = loadingReducers;\n  const { currency } = polkadotReducers;\n  return {\n    api,\n    blockchain,\n    endpoint,\n    loading,\n    percentLoaded,\n    currency,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setApi: (data) => {\n      dispatch(setApi(data));\n    },\n    setLoaded: () => {\n      dispatch(setLoaded());\n    },\n    setPercentLoaded: (data) => {\n      dispatch(setPercentLoaded(data));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/* eslint-disable no-param-reassign, no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ConfigProvider } from 'antd';\n// import reportWebVitals from 'reportWebVitals';\n\n// Moralis wrapper = https://docs.moralis.io/moralis-server/tools/react-moralis\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConfigProvider componentSize={'small'} space={{ size: 'middle' }}>\n        <App />\n      </ConfigProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}