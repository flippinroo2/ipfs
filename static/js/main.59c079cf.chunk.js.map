{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["Header","require","Layout","Content","Footer","App","props","menu","onClick","event","Item","item","console","log","setState","blockchain","endpoint","icon","RocketTwoTone","BankTwoTone","CompassTwoTone","SettingTwoTone","HeartTwoTone","ThunderboltTwoTone","inputForm","React","createRef","stateObject","api","endBlock","events","columns","title","dataIndex","key","render","args","value","data","lastBlock","loading","percentLoaded","startBlock","subscribe","transactions","state","clickListener","bind","subscribeToBlocks","unsubscribeToBlocks","this","initializeProvider","then","a","query","system","getLastFinalizedBlockNumber","lastFinalizedBlock","words","obj","derive","rpc","registry","getChainProperties","number","systemNumber","chain","raw","lastBlockNumber","getHashFromNumber","lastBlockHash","getHeader","getFinalizedHead","getBlock","temp","block","header","blockHeader","getEventsFromHash","hash","eventRecords","parseEventData","digest","logs","runtimeMetadata","magicNumber","extrinsics","forEach","ex","index","isSigned","meta","method","section","map","toString","join","signer","nonce","provider","WsProvider","ApiPromise","create","docs","d","blockNumber","getBlockFromHash","getTimeFromHash","time","extrincs","subscribeNewHeads","author","bestNumberFinalized","type","blockData","parseInt","getBlockHash","blockHash","rpcChain","timestamp","didUpdate","now","blockchainTimestamp","parsedBlockchainTimestamp","Date","currentTime","diff1","diff2","diff3","time1","at","eventData","createdAtHash","get","phase","toHuman","isEmpty","name","Type","getBlockHeaderFromHash","getBlockNumberFromHash","asApplyExtrinsic","eventId","blockTime","push","blockAuthor","toISOString","arguments","filter","test","isApplyExtrinsic","form","current","getFieldValue","blockDifference","getBlockData","percentTicker","i","Math","round","blockEvents","populateTable","formLayout","style","minHeight","className","padding","margin","percent","status","labelCol","span","wrapperCol","layout","initialValues","ref","orientation","flex","Button","overlay","buttonsRender","leftButton","rightButton","cloneElement","CaretDownOutlined","label","tooltip","initialValue","rules","required","message","shouldUpdate","previousValue","newValue","placeholder","offset","dataSource","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59c079cf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { Button, Col, Divider, Dropdown, Form, Input, Layout, Menu, Progress, Row, Space, Table, Tag, Tooltip } from 'antd';\nimport {\n  AppstoreFilled,\n  CodeFilled,\n  CodepenSquareFilled,\n  InteractionFilled,\n  PlaySquareFilled,\n  PlusSquareFilled,\n  RightSquareFilled,\n  WalletFilled,\n  BorderOuterOutlined,\n  CaretDownOutlined,\n  DashboardOutlined,\n  DownCircleOutlined,\n  DownSquareOutlined,\n  UserOutlined,\n  ApiTwoTone,\n  BankTwoTone,\n  CompassTwoTone,\n  FireTwoTone,\n  FrownTwoTone,\n  HddTwoTone,\n  HeartTwoTone,\n  RocketTwoTone,\n  SaveTwoTone,\n  SettingTwoTone,\n  ThunderboltTwoTone,\n} from '@ant-design/icons';\nimport './App.css';\n\nconst DEBUG = false;\n\nconst moralis = require('moralis');\n\nconst { Header, Content, Footer } = Layout;\n\nclass App extends Component {\n\n  menu = (\n    <Menu onClick={(event) => {\n      // const {domEvent, key, keyPath} = event;\n      // const {target  } = domEvent;\n      // const { innerText } =target.domEvent;\n      // console.log(innerText);\n    }}>\n      <Menu.Item key=\"1\" onClick={(item) => {\n        console.log(item);\n        this.setState({ blockchain: 'Avalanche', endpoint: 'ws://NEED_URL:9650/ext/bc/C/ws' });\n      }} icon={<RocketTwoTone />}>\n        Avalanche\n      </Menu.Item>\n      <Menu.Item key=\"2\" onClick={(item) => { console.log(item); this.setState({ blockchain: 'Binance Smart Chain', endpoint: 'wss://bsc-ws-node.nariox.org:443' }) }} icon={<BankTwoTone />}>\n        Binance Smart Chain\n      </Menu.Item>\n      <Menu.Item key=\"3\" onClick={(item) => { console.log(item); this.setState({ blockchain: 'Ethereum', endpoint: 'wss://mainnet.infura.io/ws' }) }} icon={<CompassTwoTone />}>\n        Ethereum\n      </Menu.Item>\n      <Menu.Item key=\"4\" onClick={(item) => { console.log(item); this.setState({ blockchain: 'Polygon', endpoint: 'wss://socket.polygon.io/stocks' }) }} icon={<SettingTwoTone />}>\n        Polygon\n      </Menu.Item>\n      <Menu.Item key=\"5\" onClick={(item) => { console.log(item); this.setState({ blockchain: 'Polkadot', endpoint: 'wss://rpc.polkadot.io' }) }} icon={<HeartTwoTone />}>\n        Polkadot\n      </Menu.Item>\n      <Menu.Item key=\"6\" onClick={(item) => { console.log(item); this.setState({ blockchain: 'Solana', endpoint: 'wss://api.devnet.solana.com/' }) }} icon={<ThunderboltTwoTone />}>\n        Solana\n      </Menu.Item>\n    </Menu>\n  );\n\n  constructor(props) {\n    super(props);\n    this.inputForm = React.createRef();\n    const stateObject = {\n      api: {},\n      blockchain: 'Polkadot',\n      endBlock: 1,\n      endpoint: 'wss://rpc.polkadot.io',\n      events: {\n        columns: [\n          {\n            title: 'Block Number',\n            dataIndex: 'blockNumber',\n            key: 'blockNumber',\n          },\n          {\n            title: 'Block Author',\n            dataIndex: 'blockAuthor',\n            key: 'blockAuthor',\n          },\n          {\n            title: 'Timestamp',\n            dataIndex: 'timestamp',\n            key: 'timestamp',\n          },\n          {\n            title: 'Event ID',\n            dataIndex: 'eventId',\n            key: 'eventId',\n          },\n          {\n            title: 'Event',\n            dataIndex: 'event',\n            key: 'event',\n          },\n          {\n            title: 'Arguments',\n            dataIndex: 'arguments',\n            key: 'arguments',\n            render: (args) => {\n              const [value] = args;\n              return <span>{value}</span>;\n            },\n          },\n        ],\n        data: [],\n      },\n      lastBlock: 0,\n      loading: true,\n      percentLoaded: 0,\n      startBlock: 1,\n      subscribe: true,\n      transactions: [],\n    };\n    this.state = stateObject;\n    this.clickListener = this.clickListener.bind(this);\n    this.subscribeToBlocks = this.subscribeToBlocks.bind(this);\n    this.unsubscribeToBlocks = this.unsubscribeToBlocks.bind(this);\n  }\n\n  componentDidMount() {\n    this.initializeProvider().then(async () => {\n      const { api } = this.state;\n      const { query } = api;\n      const { system } = query;\n      const lastFinalizedBlock = await this.getLastFinalizedBlockNumber();\n      if (DEBUG) {\n        await this.debug({});\n      }\n      this.setState({\n        lastBlock: lastFinalizedBlock.words[0],\n        loading: false,\n      });\n    });\n  }\n\n  async debug(obj) {\n    const { api } = this.state;\n    const { derive, query, rpc } = api;\n\n    const chainProperties = await api.registry.getChainProperties();\n\n    const systemNumber = await api.query.system.number();\n    const raw = await rpc.system.chain.raw();\n    const [lastBlockNumber] = systemNumber.words;\n    const lastBlockHash = await this.getHashFromNumber(lastBlockNumber);\n\n    const header = await rpc.chain.getHeader();\n\n    const test = await rpc.chain.getFinalizedHead();\n    const temp = await rpc.chain.getBlock(lastBlockHash);\n    const blockHeader = await temp.block.header;\n\n    // // no blockHash is specified, so we retrieve the latest\n    const eventRecords = await this.getEventsFromHash(temp.block.header.hash);\n    const events = await this.parseEventData(eventRecords);\n\n    const digest = await blockHeader.digest;\n    const logs = await digest.logs;\n    const magicNumber = await api.runtimeMetadata.magicNumber;\n\n    await temp.block.extrinsics.forEach((ex, index) => {\n      // ({ method: { method, section } }, index) => {\n      // the extrinsics are decoded by the API, human-like view\n\n      const {\n        isSigned,\n        meta,\n        method: { args, method, section },\n      } = ex;\n\n      // filter the specific events based on the phase and then the\n      // index of our extrinsic in the block\n\n      console.log(`${section}.${method}:: ${events || 'no events'}`);\n      // console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\n\n      // this.printDocumentation(meta);\n\n      // explicit display of name, args & documentation\n      console.log(\n        `Function:\\n${section}.${method}(${args\n          .map((a) => a.toString())\n          .join(', ')})`,\n      );\n\n      // signer/nonce info\n      if (isSigned) {\n        console.log(\n          `signer=${ex.signer.toString()}, nonce=${ex.nonce.toString()}`,\n        );\n      }\n    });\n  }\n\n  async initializeProvider() {\n    const { endpoint } = this.state;\n    const provider = new WsProvider(endpoint);\n    const api = await ApiPromise.create({ provider });\n    this.setState({ api });\n  }\n\n  printDocumentation({ docs }) {\n    console.log(`Documentation:\\n${docs.map((d) => d.toString()).join('\\n')}`);\n  }\n\n  async getBlockData(blockNumber) {\n    const { api } = this.state;\n    const hash = await this.getHashFromNumber(blockNumber);\n    const {block} = await this.getBlockFromHash(hash);\n    const events = await this.getEventsFromHash(hash);\n    const time = await this.getTimeFromHash(hash);\n    const extrinsics = await block.extrincs;\n    // const {\n    //   isSigned,\n    //   meta,\n    //   method: { args, method, section },\n    // } = ex;\n    return {\n      block,\n      hash,\n      events,\n      time,\n    };\n  }\n\n  async subscribeToBlocks() {\n    const { api } = this.state;\n    const { derive, rpc } = api;\n    const block = await rpc.chain.getBlock();\n    const header = block.block.header;\n    derive.chain.subscribeNewHeads((header) => {\n      const { subscribe } = this.state;\n      if (subscribe) {\n        console.log(\n          `Block Number#${header.number}\\tBlock Author: ${header.author}`,\n        );\n      }\n    });\n  }\n\n  unsubscribeToBlocks() {\n    this.setState({ subscribe: false });\n  }\n\n  async getLastFinalizedBlockNumber(){\n    const { api } = this.state;\n    const {derive, query} = api;\n    const {chain} = derive;\n    return chain.bestNumberFinalized();\n  }\n\n  async getBlockNumberFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      return parseInt(blockData.block.header.number.toString());\n    }\n    return 0;\n  }\n\n  async getHashFromNumber(number) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockHash = await chain.getBlockHash(number);\n      return blockHash;\n    }\n    return 0;\n  }\n\n  async getBlockFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getBlock(hash);\n      const test = blockData.block.extrincs;\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getBlockHeaderFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { rpc } = api;\n      const { chain } = rpc;\n      const blockData = await chain.getHeader(hash);\n      return blockData;\n    }\n    return 0;\n  }\n\n  async getTimeFromHash(hash) {\n    let temp;\n    const { api, lastBlock, lastFinalizedBlock } = this.state;\n    const deriveChain = api.derive.chain;\n    const rpcChain = api.rpc.chain;\n    const {block} = await rpcChain.getBlock(hash);\n    // const block = await api.query.getBlock(hash);\n    const timestamp = api.query.timestamp;\n    const didUpdate = await timestamp.didUpdate();\n    const blockchainTimestamp = await timestamp.now(); // Try subtracting todays date from this date?\n    let timeDifference;\n    const [parsedBlockchainTimestamp] = blockchainTimestamp.words;\n    const blockchainTime = new Date(parsedBlockchainTimestamp);\n    const currentTime = new Date();\n    const diff1 = currentTime - parsedBlockchainTimestamp;\n    const diff2 = parsedBlockchainTimestamp - currentTime;\n    const diff3 =\n      currentTime - blockchainTimestamp.words[0] * blockchainTimestamp.words[1];\n    // TODO: Fix timestamp here.\n    const time1 = new Date(diff1);\n    const time2 = new Date(diff2);\n    const time3 = new Date(diff3);\n    return time1;\n  }\n\n  async getEventsFromHash(hash) {\n    const { api } = this.state;\n    if (api.type) {\n      const { query } = api;\n      const { system } = query;\n      const { events } = system;\n      // const {\n      //   at,\n      //   creator,\n      //   hash,\n      //   is,\n      //   key,\n      //   meta,\n      //   method,\n      //   multi,\n      //   range,\n      //   size,\n      //   sizeAt,\n      //   toJson,\n      // } = events;\n      const event = await events.at(hash);\n      return event;\n    }\n    return {};\n  }\n\n  async parseEventData(events) {\n    let eventData = [];\n    for (const item of events) {\n      const hash = events.createdAtHash;\n      const { data, index, meta, method, section } = item.get('event'); // Missing size\n      const { phase } = item;\n      const [readable] = data.toHuman();\n      const metadata = data.meta;\n      const { args, docs, isEmpty, name, registry, Type } = meta; // Missing size\n      const blockHeader = await this.getBlockHeaderFromHash(\n        hash\n      );\n      const blockNumber = await this.getBlockNumberFromHash(\n        hash\n      );\n      const [eventId] = phase.asApplyExtrinsic.words;\n      const blockTime = await this.getTimeFromHash(hash);\n      // const author = await blockHeader.author;\n      // console.log(author);\n      eventData.push({\n        blockNumber,\n        blockAuthor: blockHeader.author,\n        timestamp: blockTime.toISOString(),\n        eventId: `${blockNumber}-${eventId}`,\n        event: `${section}.${method}`,\n        arguments: args.toHuman(),\n      });\n    }\n\n    const test = events\n      .filter(\n        (test) => {\n          const { phase } = test;\n          // console.log(phase.asApplyExtrinsic);\n          phase.isApplyExtrinsic;\n          // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq();\n        },\n        // phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index), // Need \"index\" from forEach\n      )\n      .map((test) => {\n        const { event } = test;\n        return `${event.section}.${event.method}`;\n      });\n    return eventData;\n  }\n\n  async populateTable(data) {\n    const { columns } = this.state.events;\n    const events = { columns, data };\n    this.setState({ events, loading: false });\n  }\n\n  async clickListener(event) {\n    this.setState({ loading: true });\n    // const { currentTarget, target, nativeEvent, type } = event;\n    // const parent = currentTarget.parentElement;\n    // const { innerText, parentElement } = target;\n    const form = this.inputForm.current;\n    // console.log(form);\n    const { api, percentLoaded } = this.state;\n    let { endBlock, endpoint, startBlock } = this.state;\n    startBlock = parseInt(form.getFieldValue('startBlock')) || startBlock;\n    endBlock = parseInt(form.getFieldValue('endBlock')) || endBlock;\n    endpoint = parseInt(form.getFieldValue('endpoint')) || endpoint;\n    const blockDifference = endBlock - startBlock;\n    const endBlockData = await this.getBlockData(endBlock);\n    const startBlockData = await this.getBlockData(startBlock);\n    let events = [];\n    const percentTicker = 100 / blockDifference;\n    for (let i = 0; i <= blockDifference; i++) {\n      // const percentLoaded = Math.round((i * percentTicker + Number.EPSILON) * 100) / 100;\n      this.setState({ percentLoaded: Math.round(i * percentTicker) });\n      const blockHash = await this.getHashFromNumber(startBlock + i);\n      const blockEvents = await this.getEventsFromHash(blockHash);\n      const formattedEvents = await this.parseEventData(blockEvents);\n      formattedEvents.forEach((item, index) => {\n        const { blockNumber } = item;\n        item.key = `${i + blockNumber + index}`;\n        events.push(item);\n      });\n    }\n    await this.populateTable(events);\n  }\n\n  async dropdownListener(event) {\n    // console.log(event);\n  }\n\n  render() {\n    const {\n      blockchain,\n      lastBlock,\n      endBlock,\n      endpoint,\n      events,\n      loading,\n      percentLoaded,\n      startBlock,\n      transactions,\n    } = this.state;\n\n    const { columns, data } = events;\n\n    const formLayout = 'horizontal';\n\n    const formItemLayout = {\n      labelCol: { span: 4 },\n      wrapperCol: { span: 14 },\n    };\n\n    const buttonItemLayout = {\n      wrapperCol: { span: 14, offset: 4 },\n    };\n\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n          <Content style={{ margin: '0 1rem' }}>\n            {loading ? (\n              <Progress percent={percentLoaded} status=\"active\" />\n            ) : (\n              <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n                <Form\n                  {...formItemLayout}\n                  layout={formLayout}\n                  initialValues={{\n                    layout: formLayout,\n                  }}\n                  ref={this.inputForm}>\n\n                  {/* Error validation on all form fields with relevant error messages. */}\n\n                  <Divider orientation=\"left\">Blockchain</Divider>\n                  <Row>\n                    <Col flex=\"auto\">\n                      <Dropdown.Button\n                        overlay={this.menu}\n                        buttonsRender={([leftButton, rightButton]) => [\n                          <Tooltip title=\"Choose a blockchain\" key=\"leftButton\">\n                            {leftButton}\n                          </Tooltip>,\n                          React.cloneElement(rightButton, { icon: <CaretDownOutlined />, loading: false }),\n                        ]}>\n                        {blockchain}\n                      </Dropdown.Button>\n                    </Col>\n                    <Col flex=\"auto\">\n                      <Form.Item\n                        label=\"Endpoint\"\n                        name=\"endpoint\"\n                        tooltip={'TEST TOOLTIP'}\n                        // extra=\"EXTRA\"\n                        // help=\"HELP\"\n                        initialValue={endpoint}\n                        // value=\"Endpoint Value\"\n                        rules={[\n                          {\n                            required: true,\n                            message:\n                              'Please input the endpoint you would lke to request blockchain data from.',\n                          },\n                        ]}\n                        // trigger=\"endpoint\"\n                        shouldUpdate={(previousValue, newValue) => {\n                          // console.log(previousValue);\n                          // console.log(newValue);\n                          if (previousValue != newValue) {\n                            return true;\n                          }\n                          return false;\n                        }}\n                        required={true}>\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <Divider orientation=\"left\">Blocks</Divider>\n                  <Row>\n                    <Col flex=\"auto\">\n                      <Form.Item\n                        label=\"Start Block\"\n                        name=\"startBlock\"\n                        tooltip={'TEST TOOLTIP'}\n                        // extra=\"EXTRA\"\n                        // help=\"HELP\"\n                        initialValue={startBlock}\n                        // value=\"Start Block Value\"\n                        rules={[\n                          {\n                            required: true,\n                            message:\n                              'Input the number of the block you would like to start the search at.',\n                          },\n                        ]}\n                        // trigger=\"startBlock\"\n                        shouldUpdate={(previousValue, newValue) => {\n                          // console.log(previousValue);\n                          // console.log(newValue);\n                          if (previousValue != newValue) {\n                            return true;\n                          }\n                          return false;\n                        }}\n                        required={true}>\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col flex=\"auto\">\n                      <Form.Item\n                        label=\"End Block\"\n                        name=\"endBlock\"\n                        tooltip={'TEST TOOLTIP'}\n                        // extra=\"EXTRA\"\n                        // help=\"HELP\"\n                        // value=\"End Block Value\"\n                        rules={[\n                          {\n                            required: true,\n                            message:\n                              'Input the number of the block you would like to finish the search at.',\n                          },\n                        ]}\n                        // trigger=\"endBlock\"\n                        shouldUpdate={(previousValue, newValue) => {\n                          // console.log(previousValue);\n                          // console.log(newValue);\n                          if (previousValue != newValue) {\n                            return true;\n                          }\n                          return false;\n                        }}\n                        required={true}>\n                        <Input placeholder={!endBlock ? endBlock : lastBlock} />\n                      </Form.Item>\n                    </Col>\n                  </ Row>\n                  <Divider orientation=\"left\">Actions</Divider>\n                  <Row>\n                    <Form.Item {...buttonItemLayout}>\n                      <Col flex=\"auto\">\n                        <Button type=\"primary\" onClick={this.clickListener}>\n                          Scan\n                        </Button>\n                      </ Col>\n                      <Col flex=\"auto\">\n                        <Button type=\"default\" onClick={this.subscribeToBlocks}>\n                          Subscribe\n                        </Button>\n                      </ Col>\n                      <Col flex=\"auto\">\n                        <Button type=\"default\" onClick={this.unsubscribeToBlocks}>\n                          Unsubscribe\n                        </Button>\n                      </ Col>\n                    </Form.Item>\n                  </Row>\n                </Form>\n                <Divider orientation=\"left\">Data</Divider>\n                <Table columns={columns} dataSource={data} />\n                {/*\n                + (*Optional*) Users should be able to sort events on various columns\n                + (*Optional*) Users should be able to filter events by name\n              */}\n              </div>\n            )}\n          </ Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Decentralized Application ©2021 Created by Kevin Loy\n            <p className=\"small-text\">...hire me please :D</p>\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable no-param-reassign, no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import reportWebVitals from 'reportWebVitals';\nimport 'antd/dist/antd.css';\n\n// Moralis wrapper = https://docs.moralis.io/moralis-server/tools/react-moralis\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}